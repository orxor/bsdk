//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BinaryStudio.PlatformComponents.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BinaryStudio.PlatformComponents.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error..
        /// </summary>
        internal static string CLDB_E_INTERNALERROR {
            get {
                return ResourceManager.GetString("CLDB_E_INTERNALERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binding for the specified assembly name was not found..
        /// </summary>
        internal static string CLR_E_BIND_ASSEMBLY_NOT_FOUND {
            get {
                return ResourceManager.GetString("CLR_E_BIND_ASSEMBLY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly version has a public key token that does not match that of the request..
        /// </summary>
        internal static string CLR_E_BIND_ASSEMBLY_PUBLIC_KEY_MISMATCH {
            get {
                return ResourceManager.GetString("CLR_E_BIND_ASSEMBLY_PUBLIC_KEY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bound assembly has a version that is lower than that of the request..
        /// </summary>
        internal static string CLR_E_BIND_ASSEMBLY_VERSION_TOO_LOW {
            get {
                return ResourceManager.GetString("CLR_E_BIND_ASSEMBLY_VERSION_TOO_LOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested image was not found or is unavailable..
        /// </summary>
        internal static string CLR_E_BIND_IMAGE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("CLR_E_BIND_IMAGE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Native image identity mismatch with respect to its dependencies.
        /// </summary>
        internal static string CLR_E_BIND_NI_DEP_IDENTITY_MISMATCH {
            get {
                return ResourceManager.GetString("CLR_E_BIND_NI_DEP_IDENTITY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Native image was generated in a different trust level than present at runtime..
        /// </summary>
        internal static string CLR_E_BIND_NI_SECURITY_FAILURE {
            get {
                return ResourceManager.GetString("CLR_E_BIND_NI_SECURITY_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not use native image because System.Private.CoreLib.dll is missing a native image..
        /// </summary>
        internal static string CLR_E_BIND_SYS_ASM_NI_MISSING {
            get {
                return ResourceManager.GetString("CLR_E_BIND_SYS_ASM_NI_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binding for the specified type name was not found..
        /// </summary>
        internal static string CLR_E_BIND_TYPE_NOT_FOUND {
            get {
                return ResourceManager.GetString("CLR_E_BIND_TYPE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided identity format is not recognized..
        /// </summary>
        internal static string CLR_E_BIND_UNRECOGNIZED_IDENTITY_FORMAT {
            get {
                return ResourceManager.GetString("CLR_E_BIND_UNRECOGNIZED_IDENTITY_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot compile using the PartialNgen flag because no IBC data was found..
        /// </summary>
        internal static string CLR_E_CROSSGEN_NO_IBC_DATA_FOUND {
            get {
                return ResourceManager.GetString("CLR_E_CROSSGEN_NO_IBC_DATA_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GCHeapAffinitizeMask or GCHeapAffinitizeRanges didn&apos;t specify any CPUs the current process is affinitized to..
        /// </summary>
        internal static string CLR_E_GC_BAD_AFFINITY_CONFIG {
            get {
                return ResourceManager.GetString("CLR_E_GC_BAD_AFFINITY_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GCHeapAffinitizeRanges configuration string has invalid format..
        /// </summary>
        internal static string CLR_E_GC_BAD_AFFINITY_CONFIG_FORMAT {
            get {
                return ResourceManager.GetString("CLR_E_GC_BAD_AFFINITY_CONFIG_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GC heap hard limit configuration is invalid..
        /// </summary>
        internal static string CLR_E_GC_BAD_HARD_LIMIT {
            get {
                return ResourceManager.GetString("CLR_E_GC_BAD_HARD_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GC large page support requires hard limit settings..
        /// </summary>
        internal static string CLR_E_GC_LARGE_PAGE_MISSING_HARD_LIMIT {
            get {
                return ResourceManager.GetString("CLR_E_GC_LARGE_PAGE_MISSING_HARD_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failfast due to an OOM during a GC..
        /// </summary>
        internal static string CLR_E_GC_OOM {
            get {
                return ResourceManager.GetString("CLR_E_GC_OOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous implementation found..
        /// </summary>
        internal static string COR_E_AMBIGUOUSIMPLEMENTATION {
            get {
                return ResourceManager.GetString("COR_E_AMBIGUOUSIMPLEMENTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to While late binding to a method via reflection, could not resolve between..
        /// </summary>
        internal static string COR_E_AMBIGUOUSMATCH {
            get {
                return ResourceManager.GetString("COR_E_AMBIGUOUSMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid data..
        /// </summary>
        internal static string COR_E_DATA {
            get {
                return ResourceManager.GetString("COR_E_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory was available for an operation..
        /// </summary>
        internal static string COR_E_INSUFFICIENTMEMORY {
            get {
                return ResourceManager.GetString("COR_E_INSUFFICIENTMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object that does not derive from System.Exception has been wrapped in a RuntimeWrappedException..
        /// </summary>
        internal static string COR_E_RUNTIMEWRAPPED {
            get {
                return ResourceManager.GetString("COR_E_RUNTIMEWRAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that a user thread fails to start..
        /// </summary>
        internal static string COR_E_THREADSTART {
            get {
                return ResourceManager.GetString("COR_E_THREADSTART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not supported because assembly updates have been applied..
        /// </summary>
        internal static string CORDBG_E_ASSEMBLY_UPDATES_APPLIED {
            get {
                return ResourceManager.GetString("CORDBG_E_ASSEMBLY_UPDATES_APPLIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegate contains a delegate currently not supported by the API..
        /// </summary>
        internal static string CORDBG_E_UNSUPPORTED_DELEGATE {
            get {
                return ResourceManager.GetString("CORDBG_E_UNSUPPORTED_DELEGATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to SetIP when not going to a sequence point. If both this and CORDBG_E_BAD_START_SEQUENCE_POINT are true, only CORDBG_E_BAD_START_SEQUENCE_POINT will be reported..
        /// </summary>
        internal static string CORDBG_S_BAD_END_SEQUENCE_POINT {
            get {
                return ResourceManager.GetString("CORDBG_S_BAD_END_SEQUENCE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to SetIP not at a sequence point sequence point..
        /// </summary>
        internal static string CORDBG_S_BAD_START_SEQUENCE_POINT {
            get {
                return ResourceManager.GetString("CORDBG_S_BAD_START_SEQUENCE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The func eval completed, but was aborted..
        /// </summary>
        internal static string CORDBG_S_FUNC_EVAL_ABORTED {
            get {
                return ResourceManager.GetString("CORDBG_S_FUNC_EVAL_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some Func evals will lack a return value..
        /// </summary>
        internal static string CORDBG_S_FUNC_EVAL_HAS_NO_RESULT {
            get {
                return ResourceManager.GetString("CORDBG_S_FUNC_EVAL_HAS_NO_RESULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Debugging API doesn&apos;t support dereferencing void pointers..
        /// </summary>
        internal static string CORDBG_S_VALUE_POINTS_TO_VOID {
            get {
                return ResourceManager.GetString("CORDBG_S_VALUE_POINTS_TO_VOID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime was unable to decode the Header or Payload..
        /// </summary>
        internal static string CORDIAGIPC_E_BAD_ENCODING {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_BAD_ENCODING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified CommandSet or CommandId is unknown..
        /// </summary>
        internal static string CORDIAGIPC_E_UNKNOWN_COMMAND {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_UNKNOWN_COMMAND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred in the Diagnpostics IPC Server..
        /// </summary>
        internal static string CORDIAGIPC_E_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The magic version of Diagnostics IPC is unknown..
        /// </summary>
        internal static string CORDIAGIPC_E_UNKNOWN_MAGIC {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_UNKNOWN_MAGIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A legal asynchronous call was made at an unsafe time (e.g., CLR locks are held)..
        /// </summary>
        internal static string CORPROF_E_ASYNCHRONOUS_UNSAFE {
            get {
                return ResourceManager.GetString("CORPROF_E_ASYNCHRONOUS_UNSAFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiler must implement ICorProfilerCallback3 interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK3_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK3_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiler must implement ICorProfilerCallback4 interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK4_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK4_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiler must implement ICorProfilerCallback6 interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK6_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK6_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiler must implement ICorProfilerCallback7 interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK7_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK7_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified ClassID cannot be inspected by this function because it is an array..
        /// </summary>
        internal static string CORPROF_E_CLASSID_IS_ARRAY {
            get {
                return ResourceManager.GetString("CORPROF_E_CLASSID_IS_ARRAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified ClassID is a non-array composite type (e.g., ref) and cannot be inspected..
        /// </summary>
        internal static string CORPROF_E_CLASSID_IS_COMPOSITE {
            get {
                return ResourceManager.GetString("CORPROF_E_CLASSID_IS_COMPOSITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Concurrent GC mode is enabled, which prevents use of COR_PRF_MONITOR_GC..
        /// </summary>
        internal static string CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE {
            get {
                return ResourceManager.GetString("CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This functionality requires CoreCLR debugging to be enabled..
        /// </summary>
        internal static string CORPROF_E_DEBUGGING_DISABLED {
            get {
                return ResourceManager.GetString("CORPROF_E_DEBUGGING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified function is instantiated into a collectible assembly, and is thus not supported by this API method..
        /// </summary>
        internal static string CORPROF_E_FUNCTION_IS_COLLECTIBLE {
            get {
                return ResourceManager.GetString("CORPROF_E_FUNCTION_IS_COLLECTIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detach is impossible because immutable flags were set by the profiler at startup. Detach was not attempted; the profiler is still fully attached..
        /// </summary>
        internal static string CORPROF_E_IMMUTABLE_FLAGS_SET {
            get {
                return ResourceManager.GetString("CORPROF_E_IMMUTABLE_FLAGS_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profiler called a function that first requires additional flags to be set in the event mask.  This HRESULT may also indicate that the profiler called a function that first requires that some of the flags currently set in the event mask be reset..
        /// </summary>
        internal static string CORPROF_E_INCONSISTENT_WITH_FLAGS {
            get {
                return ResourceManager.GetString("CORPROF_E_INCONSISTENT_WITH_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AttachProfiler() encountered an error while communicating on the pipe to the target profilee.  This is often caused by a target profilee that is shutting down or killed while AttachProfiler() is reading or writing the pipe..
        /// </summary>
        internal static string CORPROF_E_IPC_FAILED {
            get {
                return ResourceManager.GetString("CORPROF_E_IPC_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detach is impossible because the profiler has either instrumented IL or inserted enter/leave hooks. Detach was not attempted; the profiler is still fully attached..
        /// </summary>
        internal static string CORPROF_E_IRREVERSIBLE_INSTRUMENTATION_PRESENT {
            get {
                return ResourceManager.GetString("CORPROF_E_IRREVERSIBLE_INSTRUMENTATION_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returned when asked for the address of a static that is a literal..
        /// </summary>
        internal static string CORPROF_E_LITERALS_HAVE_NO_ADDRESS {
            get {
                return ResourceManager.GetString("CORPROF_E_LITERALS_HAVE_NO_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified module was dynamically generated (e.g., via Reflection.Emit API), and is thus not supported by this API method..
        /// </summary>
        internal static string CORPROF_E_MODULE_IS_DYNAMIC {
            get {
                return ResourceManager.GetString("CORPROF_E_MODULE_IS_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to request a profiler attach because the target profilee&apos;s runtime is of a version incompatible with the current process calling AttachProfiler()..
        /// </summary>
        internal static string CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AttachProfiler() was unable to find a profilee with the specified process ID..
        /// </summary>
        internal static string CORPROF_E_PROFILEE_PROCESS_NOT_FOUND {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILEE_PROCESS_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to attach a profiler was denied because a profiler is already loaded..
        /// </summary>
        internal static string CORPROF_E_PROFILER_ALREADY_ACTIVE {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_ALREADY_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profiler has requested that the CLR instance not load the profiler into this process..
        /// </summary>
        internal static string CORPROF_E_PROFILER_CANCEL_ACTIVATION {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_CANCEL_ACTIVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profiler&apos;s call into the CLR is disallowed because the profiler is attempting to detach..
        /// </summary>
        internal static string CORPROF_E_PROFILER_DETACHING {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_DETACHING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profiler does not support attaching to a live process..
        /// </summary>
        internal static string CORPROF_E_PROFILER_NOT_ATTACHABLE {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_NOT_ATTACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profiler called a function that cannot complete because the profiler is not yet fully initialized..
        /// </summary>
        internal static string CORPROF_E_PROFILER_NOT_YET_INITIALIZED {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_NOT_YET_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime&apos;s tracking of inlined methods for ReJIT is not enabled..
        /// </summary>
        internal static string CORPROF_E_REJIT_INLINING_DISABLED {
            get {
                return ResourceManager.GetString("CORPROF_E_REJIT_INLINING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This call is not supported unless ReJIT is first enabled during initialization by setting COR_PRF_ENABLE_REJIT via SetEventMask..
        /// </summary>
        internal static string CORPROF_E_REJIT_NOT_ENABLED {
            get {
                return ResourceManager.GetString("CORPROF_E_REJIT_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profiler called a function that cannot complete because the CLR is not yet fully initialized.  The profiler may try again once the CLR has fully started..
        /// </summary>
        internal static string CORPROF_E_RUNTIME_UNINITIALIZED {
            get {
                return ResourceManager.GetString("CORPROF_E_RUNTIME_UNINITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stackwalking callback requested the walk to abort..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_ABORTED {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A profiler tried to walk the stack of an invalid thread..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A profiler can not walk a thread that is currently executing unmanaged code..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_UNMANAGED_CTX {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_UNMANAGED_CTX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A stackwalk at this point may cause dead locks or data corruption..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_UNSAFE {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_UNSAFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime cannot be suspened since a suspension is already in progress..
        /// </summary>
        internal static string CORPROF_E_SUSPENSION_IN_PROGRESS {
            get {
                return ResourceManager.GetString("CORPROF_E_SUSPENSION_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timed out on waiting for concurrent GC to finish during attach..
        /// </summary>
        internal static string CORPROF_E_TIMEOUT_WAITING_FOR_CONCURRENT_GC {
            get {
                return ResourceManager.GetString("CORPROF_E_TIMEOUT_WAITING_FOR_CONCURRENT_GC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message sent on the profiling API attach pipe is in an unrecognized format..
        /// </summary>
        internal static string CORPROF_E_UNRECOGNIZED_PIPE_MSG_FORMAT {
            get {
                return ResourceManager.GetString("CORPROF_E_UNRECOGNIZED_PIPE_MSG_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call was made at an unsupported time.  Examples include illegally calling a profiling API method asynchronously, calling a method that might trigger a GC at an unsafe time, and calling a method at a time that could cause locks to be taken out of order..
        /// </summary>
        internal static string CORPROF_E_UNSUPPORTED_CALL_SEQUENCE {
            get {
                return ResourceManager.GetString("CORPROF_E_UNSUPPORTED_CALL_SEQUENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This call was attempted by a profiler that attached to the process after startup, but this call is only supported by profilers that are loaded into the process on startup..
        /// </summary>
        internal static string CORPROF_E_UNSUPPORTED_FOR_ATTACHING_PROFILER {
            get {
                return ResourceManager.GetString("CORPROF_E_UNSUPPORTED_FOR_ATTACHING_PROFILER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strong-name signed assemblies can only grant friend access to strong name-signed assemblies..
        /// </summary>
        internal static string META_E_CA_FRIENDS_SN_REQUIRED {
            get {
                return ResourceManager.GetString("META_E_CA_FRIENDS_SN_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to define an object that already exists in valid scenerios..
        /// </summary>
        internal static string META_S_DUPLICATE {
            get {
                return ResourceManager.GetString("META_S_DUPLICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server received a MOVE_NOTIFICATION request, but the FileTable size limit has already been reached..
        /// </summary>
        internal static string TRK_S_NOTIFICATION_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("TRK_S_NOTIFICATION_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VolumeSequenceNumber of a MOVE_NOTIFICATION request is incorrect..
        /// </summary>
        internal static string TRK_S_OUT_OF_SYNC {
            get {
                return ResourceManager.GetString("TRK_S_OUT_OF_SYNC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VolumeID in a request was not found in the server&apos;s ServerVolumeTable..
        /// </summary>
        internal static string TRK_VOLUME_NOT_FOUND {
            get {
                return ResourceManager.GetString("TRK_VOLUME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A notification was sent to the LnkSvrMessage method, but the RequestMachine for the request was not the VolumeOwner for a VolumeID in the request..
        /// </summary>
        internal static string TRK_VOLUME_NOT_OWNED {
            get {
                return ResourceManager.GetString("TRK_VOLUME_NOT_OWNED", resourceCulture);
            }
        }
    }
}
