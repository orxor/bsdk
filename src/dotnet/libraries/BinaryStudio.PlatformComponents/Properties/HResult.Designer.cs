//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BinaryStudio.PlatformComponents.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class HResult {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HResult() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BinaryStudio.PlatformComponents.Properties.HResult", typeof(HResult).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cache not updated.
        /// </summary>
        internal static string CACHE_E_NOCACHE_UPDATED {
            get {
                return ResourceManager.GetString("CACHE_E_NOCACHE_UPDATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FORMATETC not supported.
        /// </summary>
        internal static string CACHE_S_FORMATETC_NOTSUPPORTED {
            get {
                return ResourceManager.GetString("CACHE_S_FORMATETC_NOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Same cache.
        /// </summary>
        internal static string CACHE_S_SAMECACHE {
            get {
                return ResourceManager.GetString("CACHE_S_SAMECACHE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some cache(s) not updated.
        /// </summary>
        internal static string CACHE_S_SOMECACHES_NOTUPDATED {
            get {
                return ResourceManager.GetString("CACHE_S_SOMECACHES_NOTUPDATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CATID does not exist.
        /// </summary>
        internal static string CAT_E_CATIDNOEXIST {
            get {
                return ResourceManager.GetString("CAT_E_CATIDNOEXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description not found.
        /// </summary>
        internal static string CAT_E_NODESCRIPTION {
            get {
                return ResourceManager.GetString("CAT_E_NODESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {cvtres.exe} not found..
        /// </summary>
        internal static string CEE_E_CVTRES_NOT_FOUND {
            get {
                return ResourceManager.GetString("CEE_E_CVTRES_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate chain could not be built to a trusted root authority..
        /// </summary>
        internal static string CERT_E_CHAINING {
            get {
                return ResourceManager.GetString("CERT_E_CHAINING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate&apos;s CN name does not match the passed value..
        /// </summary>
        internal static string CERT_E_CN_NO_MATCH {
            get {
                return ResourceManager.GetString("CERT_E_CN_NO_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate contains an unknown extension that is marked &apos;critical&apos;..
        /// </summary>
        internal static string CERT_E_CRITICAL {
            get {
                return ResourceManager.GetString("CERT_E_CRITICAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file..
        /// </summary>
        internal static string CERT_E_EXPIRED {
            get {
                return ResourceManager.GetString("CERT_E_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate has an invalid name. The name is not included in the permitted list or is explicitly excluded..
        /// </summary>
        internal static string CERT_E_INVALID_NAME {
            get {
                return ResourceManager.GetString("CERT_E_INVALID_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate has invalid policy..
        /// </summary>
        internal static string CERT_E_INVALID_POLICY {
            get {
                return ResourceManager.GetString("CERT_E_INVALID_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A parent of a given certificate in fact did not issue that child certificate..
        /// </summary>
        internal static string CERT_E_ISSUERCHAINING {
            get {
                return ResourceManager.GetString("CERT_E_ISSUERCHAINING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate is missing or has an empty value for an important field, such as a subject or issuer name..
        /// </summary>
        internal static string CERT_E_MALFORMED {
            get {
                return ResourceManager.GetString("CERT_E_MALFORMED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path length constraint in the certification chain has been violated..
        /// </summary>
        internal static string CERT_E_PATHLENCONST {
            get {
                return ResourceManager.GetString("CERT_E_PATHLENCONST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate being used for a purpose other than the ones specified by its CA..
        /// </summary>
        internal static string CERT_E_PURPOSE {
            get {
                return ResourceManager.GetString("CERT_E_PURPOSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation process could not continue - the certificate(s) could not be checked..
        /// </summary>
        internal static string CERT_E_REVOCATION_FAILURE {
            get {
                return ResourceManager.GetString("CERT_E_REVOCATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate was explicitly revoked by its issuer..
        /// </summary>
        internal static string CERT_E_REVOKED {
            get {
                return ResourceManager.GetString("CERT_E_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate that can only be used as an end-entity is being used as a CA or vice versa..
        /// </summary>
        internal static string CERT_E_ROLE {
            get {
                return ResourceManager.GetString("CERT_E_ROLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certification chain processed correctly, but one of the CA certificates is not trusted by the policy provider..
        /// </summary>
        internal static string CERT_E_UNTRUSTEDCA {
            get {
                return ResourceManager.GetString("CERT_E_UNTRUSTEDCA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider..
        /// </summary>
        internal static string CERT_E_UNTRUSTEDROOT {
            get {
                return ResourceManager.GetString("CERT_E_UNTRUSTEDROOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certification path terminates with the test root which is not trusted with the current policy settings..
        /// </summary>
        internal static string CERT_E_UNTRUSTEDTESTROOT {
            get {
                return ResourceManager.GetString("CERT_E_UNTRUSTEDTESTROOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The validity periods of the certification chain do not nest correctly..
        /// </summary>
        internal static string CERT_E_VALIDITYPERIODNESTING {
            get {
                return ResourceManager.GetString("CERT_E_VALIDITYPERIODNESTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate is not valid for the requested usage..
        /// </summary>
        internal static string CERT_E_WRONG_USAGE {
            get {
                return ResourceManager.GetString("CERT_E_WRONG_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A memory reference caused a data alignment fault..
        /// </summary>
        internal static string CERTSRV_E_ALIGNMENT_FAULT {
            get {
                return ResourceManager.GetString("CERTSRV_E_ALIGNMENT_FAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing a required private key for archival by the server..
        /// </summary>
        internal static string CERTSRV_E_ARCHIVED_KEY_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_ARCHIVED_KEY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request includes a private key for archival by the server, but key archival is not enabled for the specified certificate template..
        /// </summary>
        internal static string CERTSRV_E_ARCHIVED_KEY_UNEXPECTED {
            get {
                return ResourceManager.GetString("CERTSRV_E_ARCHIVED_KEY_UNEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request contains an invalid renewal certificate attribute..
        /// </summary>
        internal static string CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE {
            get {
                return ResourceManager.GetString("CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request was made on behalf of a subject other than the caller. The certificate template must be configured to require at least one signature to authorize the request..
        /// </summary>
        internal static string CERTSRV_E_BAD_RENEWAL_SUBJECT {
            get {
                return ResourceManager.GetString("CERTSRV_E_BAD_RENEWAL_SUBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is incorrectly formatted. The encrypted private key must be in an unauthenticated attribute in an outermost signature..
        /// </summary>
        internal static string CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL {
            get {
                return ResourceManager.GetString("CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request&apos;s current status does not allow this operation..
        /// </summary>
        internal static string CERTSRV_E_BAD_REQUESTSTATUS {
            get {
                return ResourceManager.GetString("CERTSRV_E_BAD_REQUESTSTATUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request subject name is invalid or too long..
        /// </summary>
        internal static string CERTSRV_E_BAD_REQUESTSUBJECT {
            get {
                return ResourceManager.GetString("CERTSRV_E_BAD_REQUESTSUBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request template version is newer than the supported template version..
        /// </summary>
        internal static string CERTSRV_E_BAD_TEMPLATE_VERSION {
            get {
                return ResourceManager.GetString("CERTSRV_E_BAD_TEMPLATE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate template renewal period is longer than the certificate validity period. The template should be reconfigured or the CA certificate renewed..
        /// </summary>
        internal static string CERTSRV_E_CERT_TYPE_OVERLAP {
            get {
                return ResourceManager.GetString("CERTSRV_E_CERT_TYPE_OVERLAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contacted domain controller cannot support signed LDAP traffic. Update the domain controller or configure Certificate Services to use SSL for Active Directory access..
        /// </summary>
        internal static string CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE {
            get {
                return ResourceManager.GetString("CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate contains an encoded length that is potentially incompatible with older enrollment software..
        /// </summary>
        internal static string CERTSRV_E_ENCODING_LENGTH {
            get {
                return ResourceManager.GetString("CERTSRV_E_ENCODING_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The permissions on this certification authority do not allow the current user to enroll for certificates..
        /// </summary>
        internal static string CERTSRV_E_ENROLL_DENIED {
            get {
                return ResourceManager.GetString("CERTSRV_E_ENROLL_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certification authority&apos;s certificate contains invalid data..
        /// </summary>
        internal static string CERTSRV_E_INVALID_CA_CERTIFICATE {
            get {
                return ResourceManager.GetString("CERTSRV_E_INVALID_CA_CERTIFICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certification authority cannot interpret or verify the endorsement key information supplied in the request, or the information is inconsistent..
        /// </summary>
        internal static string CERTSRV_E_INVALID_EK {
            get {
                return ResourceManager.GetString("CERTSRV_E_INVALID_EK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing one or more required signature issuance policies..
        /// </summary>
        internal static string CERTSRV_E_ISSUANCE_POLICY_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_ISSUANCE_POLICY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot archive private key. The certification authority is not configured for key archival..
        /// </summary>
        internal static string CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED {
            get {
                return ResourceManager.GetString("CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request does not support private key attestation as defined in the certificate template..
        /// </summary>
        internal static string CERTSRV_E_KEY_ATTESTATION {
            get {
                return ResourceManager.GetString("CERTSRV_E_KEY_ATTESTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public key does not meet the minimum size required by the specified certificate template..
        /// </summary>
        internal static string CERTSRV_E_KEY_LENGTH {
            get {
                return ResourceManager.GetString("CERTSRV_E_KEY_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one security principal must have the permission to manage this CA..
        /// </summary>
        internal static string CERTSRV_E_NO_CAADMIN_DEFINED {
            get {
                return ResourceManager.GetString("CERTSRV_E_NO_CAADMIN_DEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request contains no certificate template information..
        /// </summary>
        internal static string CERTSRV_E_NO_CERT_TYPE {
            get {
                return ResourceManager.GetString("CERTSRV_E_NO_CERT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to open a Certification Authority database session, but there are already too many active sessions. The server may need to be configured to allow additional sessions..
        /// </summary>
        internal static string CERTSRV_E_NO_DB_SESSIONS {
            get {
                return ResourceManager.GetString("CERTSRV_E_NO_DB_SESSIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request does not exist..
        /// </summary>
        internal static string CERTSRV_E_NO_REQUEST {
            get {
                return ResourceManager.GetString("CERTSRV_E_NO_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot archive private key. The certification authority could not verify one or more key recovery certificates..
        /// </summary>
        internal static string CERTSRV_E_NO_VALID_KRA {
            get {
                return ResourceManager.GetString("CERTSRV_E_NO_VALID_KRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested property value is empty..
        /// </summary>
        internal static string CERTSRV_E_PROPERTY_EMPTY {
            get {
                return ResourceManager.GetString("CERTSRV_E_PROPERTY_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate template requires renewal with the same public key, but the request uses a different public key..
        /// </summary>
        internal static string CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY {
            get {
                return ResourceManager.GetString("CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is denied. It can only be performed by a certificate manager that is allowed to manage certificates for the current requester..
        /// </summary>
        internal static string CERTSRV_E_RESTRICTEDOFFICER {
            get {
                return ResourceManager.GetString("CERTSRV_E_RESTRICTEDOFFICER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is denied. The user has multiple roles assigned and the certification authority is configured to enforce role separation..
        /// </summary>
        internal static string CERTSRV_E_ROLECONFLICT {
            get {
                return ResourceManager.GetString("CERTSRV_E_ROLECONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate service has been suspended for a database restore operation..
        /// </summary>
        internal static string CERTSRV_E_SERVER_SUSPENDED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SERVER_SUSPENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing one or more required signatures..
        /// </summary>
        internal static string CERTSRV_E_SIGNATURE_COUNT {
            get {
                return ResourceManager.GetString("CERTSRV_E_SIGNATURE_COUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing required signature policy information..
        /// </summary>
        internal static string CERTSRV_E_SIGNATURE_POLICY_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SIGNATURE_POLICY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more signatures did not include the required application or issuance policies. The request is missing one or more required valid signatures..
        /// </summary>
        internal static string CERTSRV_E_SIGNATURE_REJECTED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SIGNATURE_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing a required SMIME capabilities extension..
        /// </summary>
        internal static string CERTSRV_E_SMIME_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SMIME_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing a required Subject Alternate name extension..
        /// </summary>
        internal static string CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Active Directory GUID is unavailable and cannot be added to the Subject Alternate name..
        /// </summary>
        internal static string CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DNS name is unavailable and cannot be added to the Subject Alternate name..
        /// </summary>
        internal static string CERTSRV_E_SUBJECT_DNS_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SUBJECT_DNS_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EMail name is unavailable and cannot be added to the Subject or Subject Alternate name..
        /// </summary>
        internal static string CERTSRV_E_SUBJECT_EMAIL_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SUBJECT_EMAIL_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UPN is unavailable and cannot be added to the Subject Alternate name..
        /// </summary>
        internal static string CERTSRV_E_SUBJECT_UPN_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_SUBJECT_UPN_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request contains conflicting template information..
        /// </summary>
        internal static string CERTSRV_E_TEMPLATE_CONFLICT {
            get {
                return ResourceManager.GetString("CERTSRV_E_TEMPLATE_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The permissions on the certificate template do not allow the current user to enroll for this type of certificate..
        /// </summary>
        internal static string CERTSRV_E_TEMPLATE_DENIED {
            get {
                return ResourceManager.GetString("CERTSRV_E_TEMPLATE_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The template is missing a required signature policy attribute..
        /// </summary>
        internal static string CERTSRV_E_TEMPLATE_POLICY_REQUIRED {
            get {
                return ResourceManager.GetString("CERTSRV_E_TEMPLATE_POLICY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate template requires too many RA signatures. Only one RA signature is allowed..
        /// </summary>
        internal static string CERTSRV_E_TOO_MANY_SIGNATURES {
            get {
                return ResourceManager.GetString("CERTSRV_E_TOO_MANY_SIGNATURES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more certificate templates to be enabled on this certification authority could not be found..
        /// </summary>
        internal static string CERTSRV_E_UNKNOWN_CERT_TYPE {
            get {
                return ResourceManager.GetString("CERTSRV_E_UNKNOWN_CERT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested certificate template is not supported by this CA..
        /// </summary>
        internal static string CERTSRV_E_UNSUPPORTED_CERT_TYPE {
            get {
                return ResourceManager.GetString("CERTSRV_E_UNSUPPORTED_CERT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClassFactory cannot supply requested class.
        /// </summary>
        internal static string CLASS_E_CLASSNOTAVAILABLE {
            get {
                return ResourceManager.GetString("CLASS_E_CLASSNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class does not support aggregation (or class object is remote).
        /// </summary>
        internal static string CLASS_E_NOAGGREGATION {
            get {
                return ResourceManager.GetString("CLASS_E_NOAGGREGATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class is not licensed for use.
        /// </summary>
        internal static string CLASS_E_NOTLICENSED {
            get {
                return ResourceManager.GetString("CLASS_E_NOTLICENSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open a incrementally build scope for full update..
        /// </summary>
        internal static string CLDB_E_BADUPDATEMODE {
            get {
                return ResourceManager.GetString("CLDB_E_BADUPDATEMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred during a read..
        /// </summary>
        internal static string CLDB_E_FILE_BADREAD {
            get {
                return ResourceManager.GetString("CLDB_E_FILE_BADREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred during a write..
        /// </summary>
        internal static string CLDB_E_FILE_BADWRITE {
            get {
                return ResourceManager.GetString("CLDB_E_FILE_BADWRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File is corrupt..
        /// </summary>
        internal static string CLDB_E_FILE_CORRUPT {
            get {
                return ResourceManager.GetString("CLDB_E_FILE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Old version error..
        /// </summary>
        internal static string CLDB_E_FILE_OLDVER {
            get {
                return ResourceManager.GetString("CLDB_E_FILE_OLDVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing scope is not compatible with the emitting scope..
        /// </summary>
        internal static string CLDB_E_INCOMPATIBLE {
            get {
                return ResourceManager.GetString("CLDB_E_INCOMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index not found..
        /// </summary>
        internal static string CLDB_E_INDEX_NOTFOUND {
            get {
                return ResourceManager.GetString("CLDB_E_INDEX_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error..
        /// </summary>
        internal static string CLDB_E_INTERNALERROR {
            get {
                return ResourceManager.GetString("CLDB_E_INTERNALERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No .CLB data in the memory or stream..
        /// </summary>
        internal static string CLDB_E_NO_DATA {
            get {
                return ResourceManager.GetString("CLDB_E_NO_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record not found on lookup..
        /// </summary>
        internal static string CLDB_E_RECORD_NOTFOUND {
            get {
                return ResourceManager.GetString("CLDB_E_RECORD_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record is emitted out of order..
        /// </summary>
        internal static string CLDB_E_RECORD_OUTOFORDER {
            get {
                return ResourceManager.GetString("CLDB_E_RECORD_OUTOFORDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create of shared memory failed.  A memory mapping of the same name already exists..
        /// </summary>
        internal static string CLDB_E_SMDUPLICATE {
            get {
                return ResourceManager.GetString("CLDB_E_SMDUPLICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A blob or string was too big..
        /// </summary>
        internal static string CLDB_E_TOO_BIG {
            get {
                return ResourceManager.GetString("CLDB_E_TOO_BIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data value was truncated..
        /// </summary>
        internal static string CLDB_S_TRUNCATION {
            get {
                return ResourceManager.GetString("CLDB_S_TRUNCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data on clipboard is invalid.
        /// </summary>
        internal static string CLIPBRD_E_BAD_DATA {
            get {
                return ResourceManager.GetString("CLIPBRD_E_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CloseClipboard Failed.
        /// </summary>
        internal static string CLIPBRD_E_CANT_CLOSE {
            get {
                return ResourceManager.GetString("CLIPBRD_E_CANT_CLOSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EmptyClipboard Failed.
        /// </summary>
        internal static string CLIPBRD_E_CANT_EMPTY {
            get {
                return ResourceManager.GetString("CLIPBRD_E_CANT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OpenClipboard Failed.
        /// </summary>
        internal static string CLIPBRD_E_CANT_OPEN {
            get {
                return ResourceManager.GetString("CLIPBRD_E_CANT_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetClipboard Failed.
        /// </summary>
        internal static string CLIPBRD_E_CANT_SET {
            get {
                return ResourceManager.GetString("CLIPBRD_E_CANT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binding for the specified assembly name was not found..
        /// </summary>
        internal static string CLR_E_BIND_ASSEMBLY_NOT_FOUND {
            get {
                return ResourceManager.GetString("CLR_E_BIND_ASSEMBLY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly version has a public key token that does not match that of the request..
        /// </summary>
        internal static string CLR_E_BIND_ASSEMBLY_PUBLIC_KEY_MISMATCH {
            get {
                return ResourceManager.GetString("CLR_E_BIND_ASSEMBLY_PUBLIC_KEY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bound assembly has a version that is lower than that of the request..
        /// </summary>
        internal static string CLR_E_BIND_ASSEMBLY_VERSION_TOO_LOW {
            get {
                return ResourceManager.GetString("CLR_E_BIND_ASSEMBLY_VERSION_TOO_LOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested image was not found or is unavailable..
        /// </summary>
        internal static string CLR_E_BIND_IMAGE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("CLR_E_BIND_IMAGE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Native image identity mismatch with respect to its dependencies..
        /// </summary>
        internal static string CLR_E_BIND_NI_DEP_IDENTITY_MISMATCH {
            get {
                return ResourceManager.GetString("CLR_E_BIND_NI_DEP_IDENTITY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Native image was generated in a different trust level than present at runtime..
        /// </summary>
        internal static string CLR_E_BIND_NI_SECURITY_FAILURE {
            get {
                return ResourceManager.GetString("CLR_E_BIND_NI_SECURITY_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not use native image because System.Private.CoreLib.dll is missing a native image..
        /// </summary>
        internal static string CLR_E_BIND_SYS_ASM_NI_MISSING {
            get {
                return ResourceManager.GetString("CLR_E_BIND_SYS_ASM_NI_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binding for the specified type name was not found..
        /// </summary>
        internal static string CLR_E_BIND_TYPE_NOT_FOUND {
            get {
                return ResourceManager.GetString("CLR_E_BIND_TYPE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided identity format is not recognized..
        /// </summary>
        internal static string CLR_E_BIND_UNRECOGNIZED_IDENTITY_FORMAT {
            get {
                return ResourceManager.GetString("CLR_E_BIND_UNRECOGNIZED_IDENTITY_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot compile using the PartialNgen flag because no IBC data was found..
        /// </summary>
        internal static string CLR_E_CROSSGEN_NO_IBC_DATA_FOUND {
            get {
                return ResourceManager.GetString("CLR_E_CROSSGEN_NO_IBC_DATA_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GCHeapAffinitizeMask or GCHeapAffinitizeRanges didn&apos;t specify any CPUs the current process is affinitized to..
        /// </summary>
        internal static string CLR_E_GC_BAD_AFFINITY_CONFIG {
            get {
                return ResourceManager.GetString("CLR_E_GC_BAD_AFFINITY_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GCHeapAffinitizeRanges configuration string has invalid format..
        /// </summary>
        internal static string CLR_E_GC_BAD_AFFINITY_CONFIG_FORMAT {
            get {
                return ResourceManager.GetString("CLR_E_GC_BAD_AFFINITY_CONFIG_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GC heap hard limit configuration is invalid..
        /// </summary>
        internal static string CLR_E_GC_BAD_HARD_LIMIT {
            get {
                return ResourceManager.GetString("CLR_E_GC_BAD_HARD_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GC large page support requires hard limit settings..
        /// </summary>
        internal static string CLR_E_GC_LARGE_PAGE_MISSING_HARD_LIMIT {
            get {
                return ResourceManager.GetString("CLR_E_GC_LARGE_PAGE_MISSING_HARD_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failfast due to an OOM during a GC.
        /// </summary>
        internal static string CLR_E_GC_OOM {
            get {
                return ResourceManager.GetString("CLR_E_GC_OOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A runtime has already been bound for legacy activation policy use..
        /// </summary>
        internal static string CLR_E_SHIM_LEGACYRUNTIMEALREADYBOUND {
            get {
                return ResourceManager.GetString("CLR_E_SHIM_LEGACYRUNTIMEALREADYBOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load the runtime..
        /// </summary>
        internal static string CLR_E_SHIM_RUNTIMELOAD {
            get {
                return ResourceManager.GetString("CLR_E_SHIM_RUNTIMELOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system function, AccessCheck, returned false.
        /// </summary>
        internal static string CO_E_ACCESSCHECKFAILED {
            get {
                return ResourceManager.GetString("CO_E_ACCESSCHECKFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all the DENY_ACCESS ACEs are arranged in front of the GRANT_ACCESS ACEs in the stream..
        /// </summary>
        internal static string CO_E_ACESINWRONGORDER {
            get {
                return ResourceManager.GetString("CO_E_ACESINWRONGORDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM IAccessControl object is not initialized.
        /// </summary>
        internal static string CO_E_ACNOTINITIALIZED {
            get {
                return ResourceManager.GetString("CO_E_ACNOTINITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred during COM+ Activation..
        /// </summary>
        internal static string CO_E_ACTIVATIONFAILED {
            get {
                return ResourceManager.GetString("CO_E_ACTIVATIONFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ Activation failed due to a catalog or configuration error..
        /// </summary>
        internal static string CO_E_ACTIVATIONFAILED_CATALOGERROR {
            get {
                return ResourceManager.GetString("CO_E_ACTIVATIONFAILED_CATALOGERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ Activation failed. Check the event log for more information.
        /// </summary>
        internal static string CO_E_ACTIVATIONFAILED_EVENTLOGGED {
            get {
                return ResourceManager.GetString("CO_E_ACTIVATIONFAILED_EVENTLOGGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ activation failed because the activation could not be completed in the specified amount of time..
        /// </summary>
        internal static string CO_E_ACTIVATIONFAILED_TIMEOUT {
            get {
                return ResourceManager.GetString("CO_E_ACTIVATIONFAILED_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CoInitialize has already been called..
        /// </summary>
        internal static string CO_E_ALREADYINITIALIZED {
            get {
                return ResourceManager.GetString("CO_E_ALREADYINITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application was launched but it didn&apos;t register a class factory.
        /// </summary>
        internal static string CO_E_APPDIDNTREG {
            get {
                return ResourceManager.GetString("CO_E_APPDIDNTREG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application not found.
        /// </summary>
        internal static string CO_E_APPNOTFOUND {
            get {
                return ResourceManager.GetString("CO_E_APPNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application cannot be run more than once.
        /// </summary>
        internal static string CO_E_APPSINGLEUSE {
            get {
                return ResourceManager.GetString("CO_E_APPSINGLEUSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thread-pool rejected the submitted asynchronous work..
        /// </summary>
        internal static string CO_E_ASYNC_WORK_REJECTED {
            get {
                return ResourceManager.GetString("CO_E_ASYNC_WORK_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified activation could not occur in the client context as specified..
        /// </summary>
        internal static string CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT {
            get {
                return ResourceManager.GetString("CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad path to object.
        /// </summary>
        internal static string CO_E_BAD_PATH {
            get {
                return ResourceManager.GetString("CO_E_BAD_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Remote activation was necessary but the server name provided was invalid.
        /// </summary>
        internal static string CO_E_BAD_SERVER_NAME {
            get {
                return ResourceManager.GetString("CO_E_BAD_SERVER_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component attempted to make a cross-context call between invocations of EnterTransactionScopeand ExitTransactionScope. This is not allowed. Cross-context calls cannot be made while inside of a transaction scope..
        /// </summary>
        internal static string CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call Cancellation is disabled.
        /// </summary>
        internal static string CO_E_CANCEL_DISABLED {
            get {
                return ResourceManager.GetString("CO_E_CANCEL_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Remote activation was necessary but was not allowed.
        /// </summary>
        internal static string CO_E_CANT_REMOTE {
            get {
                return ResourceManager.GetString("CO_E_CANT_REMOTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class of object cannot be determined.
        /// </summary>
        internal static string CO_E_CANTDETERMINECLASS {
            get {
                return ResourceManager.GetString("CO_E_CANTDETERMINECLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to create a class object failed.
        /// </summary>
        internal static string CO_E_CLASS_CREATE_FAILED {
            get {
                return ResourceManager.GetString("CO_E_CLASS_CREATE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component or application containing the component has been disabled..
        /// </summary>
        internal static string CO_E_CLASS_DISABLED {
            get {
                return ResourceManager.GetString("CO_E_CLASS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid class string.
        /// </summary>
        internal static string CO_E_CLASSSTRING {
            get {
                return ResourceManager.GetString("CO_E_CLASSSTRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The common language runtime is not available.
        /// </summary>
        internal static string CO_E_CLRNOTAVAILABLE {
            get {
                return ResourceManager.GetString("CO_E_CLRNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registration information for this server is inconsistent or incomplete..
        /// </summary>
        internal static string CO_E_CLSREG_INCONSISTENT {
            get {
                return ResourceManager.GetString("CO_E_CLSREG_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to convert a wide character trustee string to a multibyte trustee string.
        /// </summary>
        internal static string CO_E_CONVERSIONFAILED {
            get {
                return ResourceManager.GetString("CO_E_CONVERSIONFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server process could not be started. The pathname may be incorrect..
        /// </summary>
        internal static string CO_E_CREATEPROCESS_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_CREATEPROCESS_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to use a database generated a database specific error..
        /// </summary>
        internal static string CO_E_DBERROR {
            get {
                return ResourceManager.GetString("CO_E_DBERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to decode the ACL in the stream provided by the user.
        /// </summary>
        internal static string CO_E_DECODEFAILED {
            get {
                return ResourceManager.GetString("CO_E_DECODEFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DLL for class not found.
        /// </summary>
        internal static string CO_E_DLLNOTFOUND {
            get {
                return ResourceManager.GetString("CO_E_DLLNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class is not configured to support Elevated activation..
        /// </summary>
        internal static string CO_E_ELEVATION_DISABLED {
            get {
                return ResourceManager.GetString("CO_E_ELEVATION_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some error in application program.
        /// </summary>
        internal static string CO_E_ERRORINAPP {
            get {
                return ResourceManager.GetString("CO_E_ERRORINAPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in the DLL.
        /// </summary>
        internal static string CO_E_ERRORINDLL {
            get {
                return ResourceManager.GetString("CO_E_ERRORINDLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of ACEs in an ACL exceeds the system limit..
        /// </summary>
        internal static string CO_E_EXCEEDSYSACLLIMIT {
            get {
                return ResourceManager.GetString("CO_E_EXCEEDSYSACLLIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component made a call to EnterTransactionScope, but did not make a corresponding call to ExitTransactionScope before returning..
        /// </summary>
        internal static string CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED {
            get {
                return ResourceManager.GetString("CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to close a serialization handle or a file handle..
        /// </summary>
        internal static string CO_E_FAILEDTOCLOSEHANDLE {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOCLOSEHANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create file.
        /// </summary>
        internal static string CO_E_FAILEDTOCREATEFILE {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOCREATEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to generate a uuid..
        /// </summary>
        internal static string CO_E_FAILEDTOGENUUID {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOGENUUID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain server&apos;s security context.
        /// </summary>
        internal static string CO_E_FAILEDTOGETSECCTX {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOGETSECCTX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain user info from an access token.
        /// </summary>
        internal static string CO_E_FAILEDTOGETTOKENINFO {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOGETTOKENINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain the Windows directory.
        /// </summary>
        internal static string CO_E_FAILEDTOGETWINDIR {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOGETWINDIR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to impersonate DCOM client.
        /// </summary>
        internal static string CO_E_FAILEDTOIMPERSONATE {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOIMPERSONATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to open the access token of the server process.
        /// </summary>
        internal static string CO_E_FAILEDTOOPENPROCESSTOKEN {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOOPENPROCESSTOKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to open the access token of the current thread.
        /// </summary>
        internal static string CO_E_FAILEDTOOPENTHREADTOKEN {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOOPENTHREADTOKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain the client&apos;s security blanket.
        /// </summary>
        internal static string CO_E_FAILEDTOQUERYCLIENTBLANKET {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOQUERYCLIENTBLANKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to set a discretionary ACL into a security descriptor.
        /// </summary>
        internal static string CO_E_FAILEDTOSETDACL {
            get {
                return ResourceManager.GetString("CO_E_FAILEDTOSETDACL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registration information for this interface is inconsistent or incomplete..
        /// </summary>
        internal static string CO_E_IIDREG_INCONSISTENT {
            get {
                return ResourceManager.GetString("CO_E_IIDREG_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid interface string.
        /// </summary>
        internal static string CO_E_IIDSTRING {
            get {
                return ResourceManager.GetString("CO_E_IIDSTRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of ACL format in the stream is not supported by this implementation of IAccessControl.
        /// </summary>
        internal static string CO_E_INCOMPATIBLESTREAMVERSION {
            get {
                return ResourceManager.GetString("CO_E_INCOMPATIBLESTREAMVERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to initialize class cache.
        /// </summary>
        internal static string CO_E_INIT_CLASS_CACHE {
            get {
                return ResourceManager.GetString("CO_E_INIT_CLASS_CACHE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get memory allocator failure.
        /// </summary>
        internal static string CO_E_INIT_MEMORY_ALLOCATOR {
            get {
                return ResourceManager.GetString("CO_E_INIT_MEMORY_ALLOCATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an attempt to call CoInitialize a second time while single threaded.
        /// </summary>
        internal static string CO_E_INIT_ONLY_SINGLE_THREADED {
            get {
                return ResourceManager.GetString("CO_E_INIT_ONLY_SINGLE_THREADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to initialize RPC services.
        /// </summary>
        internal static string CO_E_INIT_RPC_CHANNEL {
            get {
                return ResourceManager.GetString("CO_E_INIT_RPC_CHANNEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure attempting to launch OLE service.
        /// </summary>
        internal static string CO_E_INIT_SCM_EXEC_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_INIT_SCM_EXEC_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OLE service file mapping already exists.
        /// </summary>
        internal static string CO_E_INIT_SCM_FILE_MAPPING_EXISTS {
            get {
                return ResourceManager.GetString("CO_E_INIT_SCM_FILE_MAPPING_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to map view of file for OLE service.
        /// </summary>
        internal static string CO_E_INIT_SCM_MAP_VIEW_OF_FILE {
            get {
                return ResourceManager.GetString("CO_E_INIT_SCM_MAP_VIEW_OF_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OLE service mutex already exists.
        /// </summary>
        internal static string CO_E_INIT_SCM_MUTEX_EXISTS {
            get {
                return ResourceManager.GetString("CO_E_INIT_SCM_MUTEX_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get shared memory allocator failure.
        /// </summary>
        internal static string CO_E_INIT_SHARED_ALLOCATOR {
            get {
                return ResourceManager.GetString("CO_E_INIT_SHARED_ALLOCATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread local storage failure.
        /// </summary>
        internal static string CO_E_INIT_TLS {
            get {
                return ResourceManager.GetString("CO_E_INIT_TLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not allocate thread local storage channel control.
        /// </summary>
        internal static string CO_E_INIT_TLS_CHANNEL_CONTROL {
            get {
                return ResourceManager.GetString("CO_E_INIT_TLS_CHANNEL_CONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot set thread local storage channel control.
        /// </summary>
        internal static string CO_E_INIT_TLS_SET_CHANNEL_CONTROL {
            get {
                return ResourceManager.GetString("CO_E_INIT_TLS_SET_CHANNEL_CONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user supplied memory allocator is unacceptable.
        /// </summary>
        internal static string CO_E_INIT_UNACCEPTED_USER_ALLOCATOR {
            get {
                return ResourceManager.GetString("CO_E_INIT_UNACCEPTED_USER_ALLOCATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ Activation failed because an initialization function failed. Check the event log for more information..
        /// </summary>
        internal static string CO_E_INITIALIZATIONFAILED {
            get {
                return ResourceManager.GetString("CO_E_INITIALIZATIONFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the security identifiers provided by the user was invalid.
        /// </summary>
        internal static string CO_E_INVALIDSID {
            get {
                return ResourceManager.GetString("CO_E_INVALIDSID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TxIsolation Level property for the COM+ component being created is stronger than the TxIsolationLevel for the &quot;root&quot; component for the transaction. The creation failed..
        /// </summary>
        internal static string CO_E_ISOLEVELMISMATCH {
            get {
                return ResourceManager.GetString("CO_E_ISOLEVELMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client is not allowed to launch this server..
        /// </summary>
        internal static string CO_E_LAUNCH_PERMSSION_DENIED {
            get {
                return ResourceManager.GetString("CO_E_LAUNCH_PERMSSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system function, LookupAccountName, failed.
        /// </summary>
        internal static string CO_E_LOOKUPACCNAMEFAILED {
            get {
                return ResourceManager.GetString("CO_E_LOOKUPACCNAMEFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system function, LookupAccountSID, failed.
        /// </summary>
        internal static string CO_E_LOOKUPACCSIDFAILED {
            get {
                return ResourceManager.GetString("CO_E_LOOKUPACCSIDFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server principal name (SPN) obtained during security negotiation is malformed..
        /// </summary>
        internal static string CO_E_MALFORMED_SPN {
            get {
                return ResourceManager.GetString("CO_E_MALFORMED_SPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation requires a display name to be present under the CLSID key..
        /// </summary>
        internal static string CO_E_MISSING_DISPLAYNAME {
            get {
                return ResourceManager.GetString("CO_E_MISSING_DISPLAYNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Microsoft Software Installer error was encountered..
        /// </summary>
        internal static string CO_E_MSI_ERROR {
            get {
                return ResourceManager.GetString("CO_E_MSI_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either NetAccessDel or NetAccessAdd returned an error code..
        /// </summary>
        internal static string CO_E_NETACCESSAPIFAILED {
            get {
                return ResourceManager.GetString("CO_E_NETACCESSAPIFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to complete the call since there is no COM+ security context inside IObjectControl.Activate..
        /// </summary>
        internal static string CO_E_NO_SECCTX_IN_ACTIVATE {
            get {
                return ResourceManager.GetString("CO_E_NO_SECCTX_IN_ACTIVATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to write a cookie failed..
        /// </summary>
        internal static string CO_E_NOCOOKIES {
            get {
                return ResourceManager.GetString("CO_E_NOCOOKIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IIS intrinsics not available. Start your work with IIS..
        /// </summary>
        internal static string CO_E_NOIISINTRINSICS {
            get {
                return ResourceManager.GetString("CO_E_NOIISINTRINSICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find a trustee name that corresponds to a security identifier provided by the user.
        /// </summary>
        internal static string CO_E_NOMATCHINGNAMEFOUND {
            get {
                return ResourceManager.GetString("CO_E_NOMATCHINGNAMEFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find a security identifier that corresponds to a trustee string provided by the user.
        /// </summary>
        internal static string CO_E_NOMATCHINGSIDFOUND {
            get {
                return ResourceManager.GetString("CO_E_NOMATCHINGSIDFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ component requires synchronization, and it is not configured for it..
        /// </summary>
        internal static string CO_E_NOSYNCHRONIZATION {
            get {
                return ResourceManager.GetString("CO_E_NOSYNCHRONIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation attempted is not supported..
        /// </summary>
        internal static string CO_E_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("CO_E_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ component you created must use object construction to work correctly..
        /// </summary>
        internal static string CO_E_NOTCONSTRUCTED {
            get {
                return ResourceManager.GetString("CO_E_NOTCONSTRUCTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CoInitialize has not been called..
        /// </summary>
        internal static string CO_E_NOTINITIALIZED {
            get {
                return ResourceManager.GetString("CO_E_NOTINITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ component you created must use object pooling to work..
        /// </summary>
        internal static string CO_E_NOTPOOLED {
            get {
                return ResourceManager.GetString("CO_E_NOTPOOLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is already registered.
        /// </summary>
        internal static string CO_E_OBJISREG {
            get {
                return ResourceManager.GetString("CO_E_OBJISREG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is not connected to server.
        /// </summary>
        internal static string CO_E_OBJNOTCONNECTED {
            get {
                return ResourceManager.GetString("CO_E_OBJNOTCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is not registered.
        /// </summary>
        internal static string CO_E_OBJNOTREG {
            get {
                return ResourceManager.GetString("CO_E_OBJNOTREG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE service could not communicate with the object server.
        /// </summary>
        internal static string CO_E_OBJSRV_RPC_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_OBJSRV_RPC_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of Ole1 services requiring DDE windows is disabled.
        /// </summary>
        internal static string CO_E_OLE1DDE_DISABLED {
            get {
                return ResourceManager.GetString("CO_E_OLE1DDE_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path too long.
        /// </summary>
        internal static string CO_E_PATHTOOLONG {
            get {
                return ResourceManager.GetString("CO_E_PATHTOOLONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object has been released.
        /// </summary>
        internal static string CO_E_RELEASED {
            get {
                return ResourceManager.GetString("CO_E_RELEASED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A dll must be loaded..
        /// </summary>
        internal static string CO_E_RELOAD_DLL {
            get {
                return ResourceManager.GetString("CO_E_RELOAD_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This computer was unable to communicate with the computer providing the server..
        /// </summary>
        internal static string CO_E_REMOTE_COMMUNICATION_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_REMOTE_COMMUNICATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server process could not be started as the configured identity. The pathname may be incorrect or unavailable..
        /// </summary>
        internal static string CO_E_RUNAS_CREATEPROCESS_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_RUNAS_CREATEPROCESS_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server process could not be started because the configured identity is incorrect. Check the username and password..
        /// </summary>
        internal static string CO_E_RUNAS_LOGON_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_RUNAS_LOGON_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A RunAs specification must be {domain name}\{user name} or simply {user name}.
        /// </summary>
        internal static string CO_E_RUNAS_SYNTAX {
            get {
                return ResourceManager.GetString("CO_E_RUNAS_SYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation requires that the RunAs value for the application is Activate As Activator..
        /// </summary>
        internal static string CO_E_RUNAS_VALUE_MUST_BE_AAA {
            get {
                return ResourceManager.GetString("CO_E_RUNAS_VALUE_MUST_BE_AAA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE service could not bind object.
        /// </summary>
        internal static string CO_E_SCM_ERROR {
            get {
                return ResourceManager.GetString("CO_E_SCM_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RPC communication failed with OLE service.
        /// </summary>
        internal static string CO_E_SCM_RPC_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_SCM_RPC_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server execution failed.
        /// </summary>
        internal static string CO_E_SERVER_EXEC_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_SERVER_EXEC_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server started, but did not finish initializing in a timely fashion..
        /// </summary>
        internal static string CO_E_SERVER_INIT_TIMEOUT {
            get {
                return ResourceManager.GetString("CO_E_SERVER_INIT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activations on the server are not paused..
        /// </summary>
        internal static string CO_E_SERVER_NOT_PAUSED {
            get {
                return ResourceManager.GetString("CO_E_SERVER_NOT_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activations on the server are paused..
        /// </summary>
        internal static string CO_E_SERVER_PAUSED {
            get {
                return ResourceManager.GetString("CO_E_SERVER_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server did not respond after being launched..
        /// </summary>
        internal static string CO_E_SERVER_START_TIMEOUT {
            get {
                return ResourceManager.GetString("CO_E_SERVER_START_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object server is stopping when OLE service contacts it.
        /// </summary>
        internal static string CO_E_SERVER_STOPPING {
            get {
                return ResourceManager.GetString("CO_E_SERVER_STOPPING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to set or reset a serialization handle.
        /// </summary>
        internal static string CO_E_SETSERLHNDLFAILED {
            get {
                return ResourceManager.GetString("CO_E_SETSERLHNDLFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service providing this server could not be started..
        /// </summary>
        internal static string CO_E_START_SERVICE_FAILURE {
            get {
                return ResourceManager.GetString("CO_E_START_SERVICE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided side-by-side configuration is invalid.
        /// </summary>
        internal static string CO_E_SXS_CONFIG {
            get {
                return ResourceManager.GetString("CO_E_SXS_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The components threading model has changed after install into a COM+ Application. Please re-install component..
        /// </summary>
        internal static string CO_E_THREADINGMODEL_CHANGED {
            get {
                return ResourceManager.GetString("CO_E_THREADINGMODEL_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided thread pool configuration is invalid.
        /// </summary>
        internal static string CO_E_THREADPOOL_CONFIG {
            get {
                return ResourceManager.GetString("CO_E_THREADPOOL_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided tracker configuration is invalid.
        /// </summary>
        internal static string CO_E_TRACKER_CONFIG {
            get {
                return ResourceManager.GetString("CO_E_TRACKER_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client who called IAccessControl::IsAccessPermitted was not the trustee provided to the method.
        /// </summary>
        internal static string CO_E_TRUSTEEDOESNTMATCHCLIENT {
            get {
                return ResourceManager.GetString("CO_E_TRUSTEEDOESNTMATCHCLIENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class is configured to run as a security id different from the caller.
        /// </summary>
        internal static string CO_E_WRONG_SERVER_IDENTITY {
            get {
                return ResourceManager.GetString("CO_E_WRONG_SERVER_IDENTITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong OS or OS version for application.
        /// </summary>
        internal static string CO_E_WRONGOSFORAPP {
            get {
                return ResourceManager.GetString("CO_E_WRONGOSFORAPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the trustee strings provided by the user did not conform to the {Domain}\{Name} syntax and it was not the &quot;*&quot; string.
        /// </summary>
        internal static string CO_E_WRONGTRUSTEENAMESYNTAX {
            get {
                return ResourceManager.GetString("CO_E_WRONGTRUSTEENAMESYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified machine name was not found in the cache..
        /// </summary>
        internal static string CO_S_MACHINENAMENOTFOUND {
            get {
                return ResourceManager.GetString("CO_S_MACHINENAMENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all the requested interfaces were available.
        /// </summary>
        internal static string CO_S_NOTALLINTERFACES {
            get {
                return ResourceManager.GetString("CO_S_NOTALLINTERFACES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is already registered.
        /// </summary>
        internal static string COMADMIN_E_ALREADYINSTALLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_ALREADYINSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application name is not unique and cannot be resolved to an application id.
        /// </summary>
        internal static string COMADMIN_E_AMBIGUOUS_APPLICATION_NAME {
            get {
                return ResourceManager.GetString("COMADMIN_E_AMBIGUOUS_APPLICATION_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition name is not unique and cannot be resolved to a partition id.
        /// </summary>
        internal static string COMADMIN_E_AMBIGUOUS_PARTITION_NAME {
            get {
                return ResourceManager.GetString("COMADMIN_E_AMBIGUOUS_PARTITION_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred reading the application file.
        /// </summary>
        internal static string COMADMIN_E_APP_FILE_READFAIL {
            get {
                return ResourceManager.GetString("COMADMIN_E_APP_FILE_READFAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid version number in application file.
        /// </summary>
        internal static string COMADMIN_E_APP_FILE_VERSION {
            get {
                return ResourceManager.GetString("COMADMIN_E_APP_FILE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred writing to the application file.
        /// </summary>
        internal static string COMADMIN_E_APP_FILE_WRITEFAIL {
            get {
                return ResourceManager.GetString("COMADMIN_E_APP_FILE_WRITEFAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified application is not currently running.
        /// </summary>
        internal static string COMADMIN_E_APP_NOT_RUNNING {
            get {
                return ResourceManager.GetString("COMADMIN_E_APP_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application install directory not found.
        /// </summary>
        internal static string COMADMIN_E_APPDIRNOTFOUND {
            get {
                return ResourceManager.GetString("COMADMIN_E_APPDIRNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application is already installed.
        /// </summary>
        internal static string COMADMIN_E_APPLICATIONEXISTS {
            get {
                return ResourceManager.GetString("COMADMIN_E_APPLICATIONEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CLSID with the same GUID as the new application ID is already installed on this machine.
        /// </summary>
        internal static string COMADMIN_E_APPLID_MATCHES_CLSID {
            get {
                return ResourceManager.GetString("COMADMIN_E_APPLID_MATCHES_CLSID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to set required authentication level for update request.
        /// </summary>
        internal static string COMADMIN_E_AUTHENTICATIONLEVEL {
            get {
                return ResourceManager.GetString("COMADMIN_E_AUTHENTICATIONLEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file path is invalid.
        /// </summary>
        internal static string COMADMIN_E_BADPATH {
            get {
                return ResourceManager.GetString("COMADMIN_E_BADPATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registered TypeLib ID is not valid.
        /// </summary>
        internal static string COMADMIN_E_BADREGISTRYLIBID {
            get {
                return ResourceManager.GetString("COMADMIN_E_BADREGISTRYLIBID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component&apos;s progID is missing or corrupt.
        /// </summary>
        internal static string COMADMIN_E_BADREGISTRYPROGID {
            get {
                return ResourceManager.GetString("COMADMIN_E_BADREGISTRYPROGID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function is valid for the base partition only.
        /// </summary>
        internal static string COMADMIN_E_BASE_PARTITION_ONLY {
            get {
                return ResourceManager.GetString("COMADMIN_E_BASE_PARTITION_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Base Application Partition exists in all partition sets and cannot be removed..
        /// </summary>
        internal static string COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET {
            get {
                return ResourceManager.GetString("COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application Proxy is not exportable.
        /// </summary>
        internal static string COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System application is not exportable.
        /// </summary>
        internal static string COMADMIN_E_CAN_NOT_EXPORT_SYS_APP {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAN_NOT_EXPORT_SYS_APP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to start application because it is either a library application or an application proxy.
        /// </summary>
        internal static string COMADMIN_E_CAN_NOT_START_APP {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAN_NOT_START_APP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alas, Event Class components cannot be aliased..
        /// </summary>
        internal static string COMADMIN_E_CANNOT_ALIAS_EVENTCLASS {
            get {
                return ResourceManager.GetString("COMADMIN_E_CANNOT_ALIAS_EVENTCLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot subscribe to this component (the component may have been imported).
        /// </summary>
        internal static string COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT {
            get {
                return ResourceManager.GetString("COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred copying the file.
        /// </summary>
        internal static string COMADMIN_E_CANTCOPYFILE {
            get {
                return ResourceManager.GetString("COMADMIN_E_CANTCOPYFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library applications may not be NT services..
        /// </summary>
        internal static string COMADMIN_E_CANTMAKEINPROCSERVICE {
            get {
                return ResourceManager.GetString("COMADMIN_E_CANTMAKEINPROCSERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library applications may not be recycled..
        /// </summary>
        internal static string COMADMIN_E_CANTRECYCLELIBRARYAPPS {
            get {
                return ResourceManager.GetString("COMADMIN_E_CANTRECYCLELIBRARYAPPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applications running as NT services may not be recycled..
        /// </summary>
        internal static string COMADMIN_E_CANTRECYCLESERVICEAPPS {
            get {
                return ResourceManager.GetString("COMADMIN_E_CANTRECYCLESERVICEAPPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a type mismatch between binaries.
        /// </summary>
        internal static string COMADMIN_E_CAT_BITNESSMISMATCH {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_BITNESSMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified partition name is already in use on this computer.
        /// </summary>
        internal static string COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applications that contain one or more imported components cannot be installed into a non-base partition.
        /// </summary>
        internal static string COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified partition name is invalid. Check that the name contains at least one visible character.
        /// </summary>
        internal static string COMADMIN_E_CAT_INVALID_PARTITION_NAME {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_INVALID_PARTITION_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition cannot be deleted because it is the default partition for one or more users.
        /// </summary>
        internal static string COMADMIN_E_CAT_PARTITION_IN_USE {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_PARTITION_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application cannot be paused or resumed.
        /// </summary>
        internal static string COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ Catalog Server threw an exception during execution.
        /// </summary>
        internal static string COMADMIN_E_CAT_SERVERFAULT {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_SERVERFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binary of unknown or invalid type was provided.
        /// </summary>
        internal static string COMADMIN_E_CAT_UNACCEPTABLEBITNESS {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_UNACCEPTABLEBITNESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a type mismatch between a binary and an application.
        /// </summary>
        internal static string COMADMIN_E_CAT_WRONGAPPBITNESS {
            get {
                return ResourceManager.GetString("COMADMIN_E_CAT_WRONGAPPBITNESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application file CLSIDs or IIDs do not match corresponding DLLs.
        /// </summary>
        internal static string COMADMIN_E_CLSIDORIIDMISMATCH {
            get {
                return ResourceManager.GetString("COMADMIN_E_CLSIDORIIDMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component move failed because the destination application no longer exists.
        /// </summary>
        internal static string COMADMIN_E_COMP_MOVE_BAD_DEST {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMP_MOVE_BAD_DEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component cannot be moved (or copied) to the System Application, an application proxy or a non-changeable application.
        /// </summary>
        internal static string COMADMIN_E_COMP_MOVE_DEST {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMP_MOVE_DEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component move was disallowed, because the source or destination application is either a system application or currently locked against changes.
        /// </summary>
        internal static string COMADMIN_E_COMP_MOVE_LOCKED {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMP_MOVE_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A private component cannot be moved (or copied) to a library application or to the base partition.
        /// </summary>
        internal static string COMADMIN_E_COMP_MOVE_PRIVATE {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMP_MOVE_PRIVATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component cannot be moved (or copied) from the System Application, an application proxy or a non-changeable application.
        /// </summary>
        internal static string COMADMIN_E_COMP_MOVE_SOURCE {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMP_MOVE_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TypeLib could not be loaded.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_BADTLB {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_BADTLB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DLL does not support the components listed in the TypeLib.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_CLASSNOTAVAIL {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_CLASSNOTAVAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file does not exist.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_DOESNOTEXIST {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_DOESNOTEXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetClassObject failed in the DLL.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_GETCLASSOBJ {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_GETCLASSOBJ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DLL could not be loaded.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_LOADDLLFAIL {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_LOADDLLFAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component registrar referenced in this file is not available.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_NOREGISTRAR {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_NOREGISTRAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file does not contain components or component information.
        /// </summary>
        internal static string COMADMIN_E_COMPFILE_NOTINSTALLABLE {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPFILE_NOTINSTALLABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component already exists.
        /// </summary>
        internal static string COMADMIN_E_COMPONENTEXISTS {
            get {
                return ResourceManager.GetString("COMADMIN_E_COMPONENTEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component in the same DLL is already installed.
        /// </summary>
        internal static string COMADMIN_E_COREQCOMPINSTALLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_COREQCOMPINSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition specified as default is not a member of the partition set..
        /// </summary>
        internal static string COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET {
            get {
                return ResourceManager.GetString("COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DLL could not be loaded.
        /// </summary>
        internal static string COMADMIN_E_DLLLOADFAILED {
            get {
                return ResourceManager.GetString("COMADMIN_E_DLLLOADFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DllRegisterServer failed on component install.
        /// </summary>
        internal static string COMADMIN_E_DLLREGISTERSERVER {
            get {
                return ResourceManager.GetString("COMADMIN_E_DLLREGISTERSERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An event class cannot also be a subscriber component.
        /// </summary>
        internal static string COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER {
            get {
                return ResourceManager.GetString("COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition cannot be exported, because one or more components in the partition have the same file name.
        /// </summary>
        internal static string COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES {
            get {
                return ResourceManager.GetString("COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition(s) specified are not valid..
        /// </summary>
        internal static string COMADMIN_E_INVALID_PARTITION {
            get {
                return ResourceManager.GetString("COMADMIN_E_INVALID_PARTITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more users in the application file are not valid.
        /// </summary>
        internal static string COMADMIN_E_INVALIDUSERIDS {
            get {
                return ResourceManager.GetString("COMADMIN_E_INVALIDUSERIDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object was not found in the catalog.
        /// </summary>
        internal static string COMADMIN_E_KEYMISSING {
            get {
                return ResourceManager.GetString("COMADMIN_E_KEYMISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applications containing one or more legacy components may not be exported to 1.0 format..
        /// </summary>
        internal static string COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT {
            get {
                return ResourceManager.GetString("COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Legacy components may not exist in non-base partitions..
        /// </summary>
        internal static string COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS {
            get {
                return ResourceManager.GetString("COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library applications and application proxies are incompatible.
        /// </summary>
        internal static string COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE {
            get {
                return ResourceManager.GetString("COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The schema version to be migrated could not be found in the COM+ registry database.
        /// </summary>
        internal static string COMADMIN_E_MIG_SCHEMANOTFOUND {
            get {
                return ResourceManager.GetString("COMADMIN_E_MIG_SCHEMANOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This version of the COM+ registry database cannot be migrated.
        /// </summary>
        internal static string COMADMIN_E_MIG_VERSIONNOTSUPPORTED {
            get {
                return ResourceManager.GetString("COMADMIN_E_MIG_VERSIONNOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component&apos;s CLSID is missing or corrupt.
        /// </summary>
        internal static string COMADMIN_E_NOREGISTRYCLSID {
            get {
                return ResourceManager.GetString("COMADMIN_E_NOREGISTRYCLSID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No server file share available.
        /// </summary>
        internal static string COMADMIN_E_NOSERVERSHARE {
            get {
                return ResourceManager.GetString("COMADMIN_E_NOSERVERSHARE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes to this object and its sub-objects have been disabled.
        /// </summary>
        internal static string COMADMIN_E_NOTCHANGEABLE {
            get {
                return ResourceManager.GetString("COMADMIN_E_NOTCHANGEABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delete function has been disabled for this object.
        /// </summary>
        internal static string COMADMIN_E_NOTDELETEABLE {
            get {
                return ResourceManager.GetString("COMADMIN_E_NOTDELETEABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object was not found in registry.
        /// </summary>
        internal static string COMADMIN_E_NOTINREGISTRY {
            get {
                return ResourceManager.GetString("COMADMIN_E_NOTINREGISTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more users are not valid.
        /// </summary>
        internal static string COMADMIN_E_NOUSER {
            get {
                return ResourceManager.GetString("COMADMIN_E_NOUSER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the specified objects cannot be found.
        /// </summary>
        internal static string COMADMIN_E_OBJECT_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("COMADMIN_E_OBJECT_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the objects being inserted or updated does not belong to a valid parent collection.
        /// </summary>
        internal static string COMADMIN_E_OBJECT_PARENT_MISSING {
            get {
                return ResourceManager.GetString("COMADMIN_E_OBJECT_PARENT_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Errors occurred accessing one or more objects - the ErrorInfo collection may have more detail.
        /// </summary>
        internal static string COMADMIN_E_OBJECTERRORS {
            get {
                return ResourceManager.GetString("COMADMIN_E_OBJECTERRORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object you are attempting to add or rename already exists.
        /// </summary>
        internal static string COMADMIN_E_OBJECTEXISTS {
            get {
                return ResourceManager.GetString("COMADMIN_E_OBJECTEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the object&apos;s properties are missing or invalid.
        /// </summary>
        internal static string COMADMIN_E_OBJECTINVALID {
            get {
                return ResourceManager.GetString("COMADMIN_E_OBJECTINVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This object is not poolable.
        /// </summary>
        internal static string COMADMIN_E_OBJECTNOTPOOLABLE {
            get {
                return ResourceManager.GetString("COMADMIN_E_OBJECTNOTPOOLABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the specified partition is denied..
        /// </summary>
        internal static string COMADMIN_E_PARTITION_ACCESSDENIED {
            get {
                return ResourceManager.GetString("COMADMIN_E_PARTITION_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only Application Files (*.MSI files) can be installed into partitions..
        /// </summary>
        internal static string COMADMIN_E_PARTITION_MSI_ONLY {
            get {
                return ResourceManager.GetString("COMADMIN_E_PARTITION_MSI_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ partitions are currently disabled..
        /// </summary>
        internal static string COMADMIN_E_PARTITIONS_DISABLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_PARTITIONS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A paused process may not be recycled..
        /// </summary>
        internal static string COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied because the component is private..
        /// </summary>
        internal static string COMADMIN_E_PRIVATE_ACCESSDENIED {
            get {
                return ResourceManager.GetString("COMADMIN_E_PRIVATE_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process has already been recycled..
        /// </summary>
        internal static string COMADMIN_E_PROCESSALREADYRECYCLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_PROCESSALREADYRECYCLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ProgID provided to the copy operation is invalid. The ProgID is in use by another registered CLSID..
        /// </summary>
        internal static string COMADMIN_E_PROGIDINUSEBYCLSID {
            get {
                return ResourceManager.GetString("COMADMIN_E_PROGIDINUSEBYCLSID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property value is too large.
        /// </summary>
        internal static string COMADMIN_E_PROPERTY_OVERFLOW {
            get {
                return ResourceManager.GetString("COMADMIN_E_PROPERTY_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more property settings are either invalid or in conflict with each other.
        /// </summary>
        internal static string COMADMIN_E_PROPERTYSAVEFAILED {
            get {
                return ResourceManager.GetString("COMADMIN_E_PROPERTYSAVEFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A recycled process may not be paused..
        /// </summary>
        internal static string COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED {
            get {
                return ResourceManager.GetString("COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ registry database is already running.
        /// </summary>
        internal static string COMADMIN_E_REGDB_ALREADYRUNNING {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGDB_ALREADYRUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ registry database has not been initialized.
        /// </summary>
        internal static string COMADMIN_E_REGDB_NOTINITIALIZED {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGDB_NOTINITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ registry database is not open.
        /// </summary>
        internal static string COMADMIN_E_REGDB_NOTOPEN {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGDB_NOTOPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ registry database detected a system error.
        /// </summary>
        internal static string COMADMIN_E_REGDB_SYSTEMERR {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGDB_SYSTEMERR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registration file is corrupt.
        /// </summary>
        internal static string COMADMIN_E_REGFILE_CORRUPT {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGFILE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system was unable to register the TypeLib.
        /// </summary>
        internal static string COMADMIN_E_REGISTERTLB {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGISTERTLB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Errors occurred while in the component registrar.
        /// </summary>
        internal static string COMADMIN_E_REGISTRARFAILED {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGISTRARFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified user cannot write to the system registry.
        /// </summary>
        internal static string COMADMIN_E_REGISTRY_ACCESSDENIED {
            get {
                return ResourceManager.GetString("COMADMIN_E_REGISTRY_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface information is either missing or changed.
        /// </summary>
        internal static string COMADMIN_E_REMOTEINTERFACE {
            get {
                return ResourceManager.GetString("COMADMIN_E_REMOTEINTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not enabled on this platform.
        /// </summary>
        internal static string COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM {
            get {
                return ResourceManager.GetString("COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A role assigned to a component, interface, or method did not exist in the application.
        /// </summary>
        internal static string COMADMIN_E_ROLE_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("COMADMIN_E_ROLE_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The role already exists.
        /// </summary>
        internal static string COMADMIN_E_ROLEEXISTS {
            get {
                return ResourceManager.GetString("COMADMIN_E_ROLEEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified SAFER level is invalid..
        /// </summary>
        internal static string COMADMIN_E_SAFERINVALID {
            get {
                return ResourceManager.GetString("COMADMIN_E_SAFERINVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service is not installed.
        /// </summary>
        internal static string COMADMIN_E_SERVICENOTINSTALLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_SERVICENOTINSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server catalog version is not supported.
        /// </summary>
        internal static string COMADMIN_E_SESSION {
            get {
                return ResourceManager.GetString("COMADMIN_E_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot start an application that has been disabled.
        /// </summary>
        internal static string COMADMIN_E_START_APP_DISABLED {
            get {
                return ResourceManager.GetString("COMADMIN_E_START_APP_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must have components in an application in order to start the application.
        /// </summary>
        internal static string COMADMIN_E_START_APP_NEEDS_COMPONENTS {
            get {
                return ResourceManager.GetString("COMADMIN_E_START_APP_NEEDS_COMPONENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ applications that run as NT service may not be pooled or recycled.
        /// </summary>
        internal static string COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE {
            get {
                return ResourceManager.GetString("COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed on the system application.
        /// </summary>
        internal static string COMADMIN_E_SYSTEMAPP {
            get {
                return ResourceManager.GetString("COMADMIN_E_SYSTEMAPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more users are already assigned to a local partition set..
        /// </summary>
        internal static string COMADMIN_E_USER_IN_SET {
            get {
                return ResourceManager.GetString("COMADMIN_E_USER_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity or password set on the application is not valid.
        /// </summary>
        internal static string COMADMIN_E_USERPASSWDNOTVALID {
            get {
                return ResourceManager.GetString("COMADMIN_E_USERPASSWDNOTVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only COM+ Applications marked &quot;queued&quot; can be invoked using the &quot;queue&quot; moniker.
        /// </summary>
        internal static string COMQC_E_APPLICATION_NOT_QUEUED {
            get {
                return ResourceManager.GetString("COMQC_E_APPLICATION_NOT_QUEUED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message is improperly formatted or was damaged in transit.
        /// </summary>
        internal static string COMQC_E_BAD_MESSAGE {
            get {
                return ResourceManager.GetString("COMQC_E_BAD_MESSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to marshal an interface that does not support IPersistStream.
        /// </summary>
        internal static string COMQC_E_NO_IPERSISTSTREAM {
            get {
                return ResourceManager.GetString("COMQC_E_NO_IPERSISTSTREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one interface must be marked &quot;queued&quot; in order to create a queued component instance with the &quot;queue&quot; moniker.
        /// </summary>
        internal static string COMQC_E_NO_QUEUEABLE_INTERFACES {
            get {
                return ResourceManager.GetString("COMQC_E_NO_QUEUEABLE_INTERFACES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ is required for the requested operation and is not installed.
        /// </summary>
        internal static string COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unauthenticated message was received by an application that accepts only authenticated messages.
        /// </summary>
        internal static string COMQC_E_UNAUTHENTICATED {
            get {
                return ResourceManager.GetString("COMQC_E_UNAUTHENTICATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message was requeued or moved by a user not in the &quot;QC Trusted User&quot; role.
        /// </summary>
        internal static string COMQC_E_UNTRUSTED_ENQUEUER {
            get {
                return ResourceManager.GetString("COMQC_E_UNTRUSTED_ENQUEUER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The root transaction wanted to commit, but transaction aborted.
        /// </summary>
        internal static string CONTEXT_E_ABORTED {
            get {
                return ResourceManager.GetString("CONTEXT_E_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You made a method call on a COM+ component that has a transaction that has already aborted or in the process of aborting..
        /// </summary>
        internal static string CONTEXT_E_ABORTING {
            get {
                return ResourceManager.GetString("CONTEXT_E_ABORTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no MTS object context.
        /// </summary>
        internal static string CONTEXT_E_NOCONTEXT {
            get {
                return ResourceManager.GetString("CONTEXT_E_NOCONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation requires that JIT be in the current context and it is not.
        /// </summary>
        internal static string CONTEXT_E_NOJIT {
            get {
                return ResourceManager.GetString("CONTEXT_E_NOJIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation requires that the current context have a Transaction, and it does not.
        /// </summary>
        internal static string CONTEXT_E_NOTRANSACTION {
            get {
                return ResourceManager.GetString("CONTEXT_E_NOTRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You made a method call on a COM+ component that has a transaction that has already committed or aborted..
        /// </summary>
        internal static string CONTEXT_E_OLDREF {
            get {
                return ResourceManager.GetString("CONTEXT_E_OLDREF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified role was not configured for the application.
        /// </summary>
        internal static string CONTEXT_E_ROLENOTFOUND {
            get {
                return ResourceManager.GetString("CONTEXT_E_ROLENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component is configured to use synchronization and a thread has timed out waiting to enter the context..
        /// </summary>
        internal static string CONTEXT_E_SYNCH_TIMEOUT {
            get {
                return ResourceManager.GetString("CONTEXT_E_SYNCH_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ was unable to talk to the Microsoft Distributed Transaction Coordinator.
        /// </summary>
        internal static string CONTEXT_E_TMNOTAVAILABLE {
            get {
                return ResourceManager.GetString("CONTEXT_E_TMNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component is configured to use synchronization and this method call would cause a deadlock to occur..
        /// </summary>
        internal static string CONTEXT_E_WOULD_DEADLOCK {
            get {
                return ResourceManager.GetString("CONTEXT_E_WOULD_DEADLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in a Windows GDI call while converting the bitmap to a DIB.
        /// </summary>
        internal static string CONVERT10_E_OLESTREAM_BITMAP_TO_DIB {
            get {
                return ResourceManager.GetString("CONVERT10_E_OLESTREAM_BITMAP_TO_DIB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contents of the OLESTREAM not in correct format.
        /// </summary>
        internal static string CONVERT10_E_OLESTREAM_FMT {
            get {
                return ResourceManager.GetString("CONVERT10_E_OLESTREAM_FMT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLESTREAM Get method failed.
        /// </summary>
        internal static string CONVERT10_E_OLESTREAM_GET {
            get {
                return ResourceManager.GetString("CONVERT10_E_OLESTREAM_GET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLESTREAM Put method failed.
        /// </summary>
        internal static string CONVERT10_E_OLESTREAM_PUT {
            get {
                return ResourceManager.GetString("CONVERT10_E_OLESTREAM_PUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in a Windows GDI call while converting the DIB to a bitmap..
        /// </summary>
        internal static string CONVERT10_E_STG_DIB_TO_BITMAP {
            get {
                return ResourceManager.GetString("CONVERT10_E_STG_DIB_TO_BITMAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contents of the IStorage not in correct format.
        /// </summary>
        internal static string CONVERT10_E_STG_FMT {
            get {
                return ResourceManager.GetString("CONVERT10_E_STG_FMT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contents of IStorage is missing one of the standard streams.
        /// </summary>
        internal static string CONVERT10_E_STG_NO_STD_STREAM {
            get {
                return ResourceManager.GetString("CONVERT10_E_STG_NO_STD_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to convert OLESTREAM to IStorage.
        /// </summary>
        internal static string CONVERT10_S_NO_PRESENTATION {
            get {
                return ResourceManager.GetString("CONVERT10_S_NO_PRESENTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wait completed due to an abandoned mutex..
        /// </summary>
        internal static string COR_E_ABANDONEDMUTEX {
            get {
                return ResourceManager.GetString("COR_E_ABANDONEDMUTEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fail to access a CCW because the corresponding managed object is already collected..
        /// </summary>
        internal static string COR_E_ACCESSING_CCW {
            get {
                return ResourceManager.GetString("COR_E_ACCESSING_CCW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous implementation found..
        /// </summary>
        internal static string COR_E_AMBIGUOUSIMPLEMENTATION {
            get {
                return ResourceManager.GetString("COR_E_AMBIGUOUSIMPLEMENTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to While late binding to a method via reflection, could not resolve between..
        /// </summary>
        internal static string COR_E_AMBIGUOUSMATCH {
            get {
                return ResourceManager.GetString("COR_E_AMBIGUOUSMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to access an unloaded appdomain..
        /// </summary>
        internal static string COR_E_APPDOMAINUNLOADED {
            get {
                return ResourceManager.GetString("COR_E_APPDOMAINUNLOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application exception.
        /// </summary>
        internal static string COR_E_APPLICATION {
            get {
                return ResourceManager.GetString("COR_E_APPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter is incorrect..
        /// </summary>
        internal static string COR_E_ARGUMENT {
            get {
                return ResourceManager.GetString("COR_E_ARGUMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An argument was out of its legal range..
        /// </summary>
        internal static string COR_E_ARGUMENTOUTOFRANGE {
            get {
                return ResourceManager.GetString("COR_E_ARGUMENTOUTOFRANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arithmetic result exceeded 32 bits..
        /// </summary>
        internal static string COR_E_ARITHMETIC {
            get {
                return ResourceManager.GetString("COR_E_ARITHMETIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to store an object of the wrong type in an array..
        /// </summary>
        internal static string COR_E_ARRAYTYPEMISMATCH {
            get {
                return ResourceManager.GetString("COR_E_ARRAYTYPEMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The module was expected to contain an assembly manifest..
        /// </summary>
        internal static string COR_E_ASSEMBLYEXPECTED {
            get {
                return ResourceManager.GetString("COR_E_ASSEMBLYEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to load a program with an incorrect format..
        /// </summary>
        internal static string COR_E_BADIMAGEFORMAT {
            get {
                return ResourceManager.GetString("COR_E_BADIMAGEFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while unloading appdomain..
        /// </summary>
        internal static string COR_E_CANNOTUNLOADAPPDOMAIN {
            get {
                return ResourceManager.GetString("COR_E_CANNOTUNLOADAPPDOMAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A managed code contract (ie, precondition, postcondition, invariant, or assert) failed..
        /// </summary>
        internal static string COR_E_CODECONTRACTFAILED {
            get {
                return ResourceManager.GetString("COR_E_CODECONTRACTFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to marshal an object across a context boundary..
        /// </summary>
        internal static string COR_E_CONTEXTMARSHAL {
            get {
                return ResourceManager.GetString("COR_E_CONTEXTMARSHAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom attribute has invalid format..
        /// </summary>
        internal static string COR_E_CUSTOMATTRIBUTEFORMAT {
            get {
                return ResourceManager.GetString("COR_E_CUSTOMATTRIBUTEFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid data..
        /// </summary>
        internal static string COR_E_DATA {
            get {
                return ResourceManager.GetString("COR_E_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A datatype misalignment was detected in a load or store instruction..
        /// </summary>
        internal static string COR_E_DATAMISALIGNED {
            get {
                return ResourceManager.GetString("COR_E_DATAMISALIGNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot find the path specified..
        /// </summary>
        internal static string COR_E_DIRECTORYNOTFOUND {
            get {
                return ResourceManager.GetString("COR_E_DIRECTORYNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Division by zero..
        /// </summary>
        internal static string COR_E_DIVIDEBYZERO {
            get {
                return ResourceManager.GetString("COR_E_DIVIDEBYZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the specified DllImport Dll..
        /// </summary>
        internal static string COR_E_DLLNOTFOUND {
            get {
                return ResourceManager.GetString("COR_E_DLLNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object appears more than once in the wait objects array..
        /// </summary>
        internal static string COR_E_DUPLICATEWAITOBJECT {
            get {
                return ResourceManager.GetString("COR_E_DUPLICATEWAITOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reached the end of the file..
        /// </summary>
        internal static string COR_E_ENDOFSTREAM {
            get {
                return ResourceManager.GetString("COR_E_ENDOFSTREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the specified DllImport entrypoint..
        /// </summary>
        internal static string COR_E_ENTRYPOINTNOTFOUND {
            get {
                return ResourceManager.GetString("COR_E_ENTRYPOINTNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General Exception.
        /// </summary>
        internal static string COR_E_EXCEPTION {
            get {
                return ResourceManager.GetString("COR_E_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal CLR error..
        /// </summary>
        internal static string COR_E_EXECUTIONENGINE {
            get {
                return ResourceManager.GetString("COR_E_EXECUTIONENGINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runtime operation halted by call to System.Environment.FailFast()..
        /// </summary>
        internal static string COR_E_FAILFAST {
            get {
                return ResourceManager.GetString("COR_E_FAILFAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to this field is denied..
        /// </summary>
        internal static string COR_E_FIELDACCESS {
            get {
                return ResourceManager.GetString("COR_E_FIELDACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find or load a specific file..
        /// </summary>
        internal static string COR_E_FILELOAD {
            get {
                return ResourceManager.GetString("COR_E_FILELOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot find the file specified..
        /// </summary>
        internal static string COR_E_FILENOTFOUND {
            get {
                return ResourceManager.GetString("COR_E_FILENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to load an unverifiable executable with fixups (IAT with more than 2 sections or a TLS section.).
        /// </summary>
        internal static string COR_E_FIXUPSINEXE {
            get {
                return ResourceManager.GetString("COR_E_FIXUPSINEXE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of one argument does not meet the contract of the method..
        /// </summary>
        internal static string COR_E_FORMAT {
            get {
                return ResourceManager.GetString("COR_E_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host has forbidden this operation..
        /// </summary>
        internal static string COR_E_HOSTPROTECTION {
            get {
                return ResourceManager.GetString("COR_E_HOSTPROTECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to call into managed code when executing inside a low level extensibility point..
        /// </summary>
        internal static string COR_E_ILLEGAL_REENTRANCY {
            get {
                return ResourceManager.GetString("COR_E_ILLEGAL_REENTRANCY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array subscript out of range..
        /// </summary>
        internal static string COR_E_INDEXOUTOFRANGE {
            get {
                return ResourceManager.GetString("COR_E_INDEXOUTOFRANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient stack to continue executing the program safely. This can happen from having too many functions on the call stack or function on the stack using too much stack space..
        /// </summary>
        internal static string COR_E_INSUFFICIENTEXECUTIONSTACK {
            get {
                return ResourceManager.GetString("COR_E_INSUFFICIENTEXECUTIONSTACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory was available for an operation..
        /// </summary>
        internal static string COR_E_INSUFFICIENTMEMORY {
            get {
                return ResourceManager.GetString("COR_E_INSUFFICIENTMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No such interface supported.
        /// </summary>
        internal static string COR_E_INVALIDCAST {
            get {
                return ResourceManager.GetString("COR_E_INVALIDCAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid __ComObject has been used..
        /// </summary>
        internal static string COR_E_INVALIDCOMOBJECT {
            get {
                return ResourceManager.GetString("COR_E_INVALIDCOMOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given filter criteria does not match the filter content..
        /// </summary>
        internal static string COR_E_INVALIDFILTERCRITERIA {
            get {
                return ResourceManager.GetString("COR_E_INVALIDFILTERCRITERIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE Variant has an invalid type..
        /// </summary>
        internal static string COR_E_INVALIDOLEVARIANTTYPE {
            get {
                return ResourceManager.GetString("COR_E_INVALIDOLEVARIANTTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation is not legal in the current state..
        /// </summary>
        internal static string COR_E_INVALIDOPERATION {
            get {
                return ResourceManager.GetString("COR_E_INVALIDOPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid IL or CLR metadata..
        /// </summary>
        internal static string COR_E_INVALIDPROGRAM {
            get {
                return ResourceManager.GetString("COR_E_INVALIDPROGRAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error during managed I/O..
        /// </summary>
        internal static string COR_E_IO {
            get {
                return ResourceManager.GetString("COR_E_IO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given key was not present in the dictionary..
        /// </summary>
        internal static string COR_E_KEYNOTFOUND {
            get {
                return ResourceManager.GetString("COR_E_KEYNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference assemblies cannot be loaded for execution..
        /// </summary>
        internal static string COR_E_LOADING_REFERENCE_ASSEMBLY {
            get {
                return ResourceManager.GetString("COR_E_LOADING_REFERENCE_ASSEMBLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract Windows Runtime assemblies cannot be loaded for execution. Make sure your application only contains non-contract Windows Runtime assemblies..
        /// </summary>
        internal static string COR_E_LOADING_WINMD_REFERENCE_ASSEMBLY {
            get {
                return ResourceManager.GetString("COR_E_LOADING_WINMD_REFERENCE_ASSEMBLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid marshaling directives..
        /// </summary>
        internal static string COR_E_MARSHALDIRECTIVE {
            get {
                return ResourceManager.GetString("COR_E_MARSHALDIRECTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to this member is denied..
        /// </summary>
        internal static string COR_E_MEMBERACCESS {
            get {
                return ResourceManager.GetString("COR_E_MEMBERACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to this method is denied..
        /// </summary>
        internal static string COR_E_METHODACCESS {
            get {
                return ResourceManager.GetString("COR_E_METHODACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field does not exist..
        /// </summary>
        internal static string COR_E_MISSINGFIELD {
            get {
                return ResourceManager.GetString("COR_E_MISSINGFIELD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expected resource in the assembly manifest was missing..
        /// </summary>
        internal static string COR_E_MISSINGMANIFESTRESOURCE {
            get {
                return ResourceManager.GetString("COR_E_MISSINGMANIFESTRESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member does not exist..
        /// </summary>
        internal static string COR_E_MISSINGMEMBER {
            get {
                return ResourceManager.GetString("COR_E_MISSINGMEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method does not exist..
        /// </summary>
        internal static string COR_E_MISSINGMETHOD {
            get {
                return ResourceManager.GetString("COR_E_MISSINGMETHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expected satellite assembly containing the ultimate fallback resources for a given culture was not found or could not be loaded..
        /// </summary>
        internal static string COR_E_MISSINGSATELLITEASSEMBLY {
            get {
                return ResourceManager.GetString("COR_E_MISSINGSATELLITEASSEMBLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The check of the module&apos;s hash failed..
        /// </summary>
        internal static string COR_E_MODULE_HASH_CHECK_FAILED {
            get {
                return ResourceManager.GetString("COR_E_MODULE_HASH_CHECK_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to combine delegates that are not multicast..
        /// </summary>
        internal static string COR_E_MULTICASTNOTSUPPORTED {
            get {
                return ResourceManager.GetString("COR_E_MULTICASTNOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The module cannot be loaded because only single file assemblies are supported..
        /// </summary>
        internal static string COR_E_MULTIMODULEASSEMBLIESDIALLOWED {
            get {
                return ResourceManager.GetString("COR_E_MULTIMODULEASSEMBLIESDIALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This assembly is built by a runtime newer than the currently loaded runtime and cannot be loaded..
        /// </summary>
        internal static string COR_E_NEWER_RUNTIME {
            get {
                return ResourceManager.GetString("COR_E_NEWER_RUNTIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The native image could not be loaded, because it was generated for use by a different version of the runtime..
        /// </summary>
        internal static string COR_E_NI_AND_RUNTIME_VERSION_MISMATCH {
            get {
                return ResourceManager.GetString("COR_E_NI_AND_RUNTIME_VERSION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a Number..
        /// </summary>
        internal static string COR_E_NOTFINITENUMBER {
            get {
                return ResourceManager.GetString("COR_E_NOTFINITENUMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation is not supported..
        /// </summary>
        internal static string COR_E_NOTSUPPORTED {
            get {
                return ResourceManager.GetString("COR_E_NOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid pointer.
        /// </summary>
        internal static string COR_E_NULLREFERENCE {
            get {
                return ResourceManager.GetString("COR_E_NULLREFERENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object has already been disposed..
        /// </summary>
        internal static string COR_E_OBJECTDISPOSED {
            get {
                return ResourceManager.GetString("COR_E_OBJECTDISPOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation was cancelled..
        /// </summary>
        internal static string COR_E_OPERATIONCANCELED {
            get {
                return ResourceManager.GetString("COR_E_OPERATIONCANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory resources are available to complete this operation..
        /// </summary>
        internal static string COR_E_OUTOFMEMORY {
            get {
                return ResourceManager.GetString("COR_E_OUTOFMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arithmetic, casting or conversion operation overflowed or underflowed..
        /// </summary>
        internal static string COR_E_OVERFLOW {
            get {
                return ResourceManager.GetString("COR_E_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filename or extension is too long..
        /// </summary>
        internal static string COR_E_PATHTOOLONG {
            get {
                return ResourceManager.GetString("COR_E_PATHTOOLONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation is not supported on this platform..
        /// </summary>
        internal static string COR_E_PLATFORMNOTSUPPORTED {
            get {
                return ResourceManager.GetString("COR_E_PLATFORMNOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array has the wrong number of dimensions for a particular operation..
        /// </summary>
        internal static string COR_E_RANK {
            get {
                return ResourceManager.GetString("COR_E_RANK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find or load a specific class that was requested through Reflection..
        /// </summary>
        internal static string COR_E_REFLECTIONTYPELOAD {
            get {
                return ResourceManager.GetString("COR_E_REFLECTIONTYPELOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error relating to remoting occurred..
        /// </summary>
        internal static string COR_E_REMOTING {
            get {
                return ResourceManager.GetString("COR_E_REMOTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object that does not derive from {System.Exception} has been wrapped in a {RuntimeWrappedException}..
        /// </summary>
        internal static string COR_E_RUNTIMEWRAPPED {
            get {
                return ResourceManager.GetString("COR_E_RUNTIMEWRAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mismatch has occurred between the runtime rank of the array and the rank recorded in the metadata..
        /// </summary>
        internal static string COR_E_SAFEARRAYRANKMISMATCH {
            get {
                return ResourceManager.GetString("COR_E_SAFEARRAYRANKMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mismatch has occurred between the runtime type of the array and the sub type recorded in the metadata..
        /// </summary>
        internal static string COR_E_SAFEARRAYTYPEMISMATCH {
            get {
                return ResourceManager.GetString("COR_E_SAFEARRAYTYPEMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error relating to security occurred..
        /// </summary>
        internal static string COR_E_SECURITY {
            get {
                return ResourceManager.GetString("COR_E_SECURITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reached maximum count for semaphore..
        /// </summary>
        internal static string COR_E_SEMAPHOREFULL {
            get {
                return ResourceManager.GetString("COR_E_SEMAPHOREFULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error relating to serialization occurred..
        /// </summary>
        internal static string COR_E_SERIALIZATION {
            get {
                return ResourceManager.GetString("COR_E_SERIALIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error relating to remoting occurred..
        /// </summary>
        internal static string COR_E_SERVER {
            get {
                return ResourceManager.GetString("COR_E_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recursion too deep; the stack overflowed..
        /// </summary>
        internal static string COR_E_STACKOVERFLOW {
            get {
                return ResourceManager.GetString("COR_E_STACKOVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation must be called from a synchronized block..
        /// </summary>
        internal static string COR_E_SYNCHRONIZATIONLOCK {
            get {
                return ResourceManager.GetString("COR_E_SYNCHRONIZATIONLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System.Exception.
        /// </summary>
        internal static string COR_E_SYSTEM {
            get {
                return ResourceManager.GetString("COR_E_SYSTEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to invoke non-static method with a null Object..
        /// </summary>
        internal static string COR_E_TARGET {
            get {
                return ResourceManager.GetString("COR_E_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uncaught exception thrown by method called through Reflection..
        /// </summary>
        internal static string COR_E_TARGETINVOCATION {
            get {
                return ResourceManager.GetString("COR_E_TARGETINVOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid number of parameters..
        /// </summary>
        internal static string COR_E_TARGETPARAMCOUNT {
            get {
                return ResourceManager.GetString("COR_E_TARGETPARAMCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread has aborted..
        /// </summary>
        internal static string COR_E_THREADABORTED {
            get {
                return ResourceManager.GetString("COR_E_THREADABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread was interrupted from a waiting state..
        /// </summary>
        internal static string COR_E_THREADINTERRUPTED {
            get {
                return ResourceManager.GetString("COR_E_THREADINTERRUPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that a user thread fails to start..
        /// </summary>
        internal static string COR_E_THREADSTART {
            get {
                return ResourceManager.GetString("COR_E_THREADSTART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread is in an invalid state for this operation..
        /// </summary>
        internal static string COR_E_THREADSTATE {
            get {
                return ResourceManager.GetString("COR_E_THREADSTATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread is stopping..
        /// </summary>
        internal static string COR_E_THREADSTOP {
            get {
                return ResourceManager.GetString("COR_E_THREADSTOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation timed out..
        /// </summary>
        internal static string COR_E_TIMEOUT {
            get {
                return ResourceManager.GetString("COR_E_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to this type is denied..
        /// </summary>
        internal static string COR_E_TYPEACCESS {
            get {
                return ResourceManager.GetString("COR_E_TYPEACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uncaught exception during type initialization..
        /// </summary>
        internal static string COR_E_TYPEINITIALIZATION {
            get {
                return ResourceManager.GetString("COR_E_TYPEINITIALIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find or load a type..
        /// </summary>
        internal static string COR_E_TYPELOAD {
            get {
                return ResourceManager.GetString("COR_E_TYPELOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type has been unloaded..
        /// </summary>
        internal static string COR_E_TYPEUNLOADED {
            get {
                return ResourceManager.GetString("COR_E_TYPEUNLOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied..
        /// </summary>
        internal static string COR_E_UNAUTHORIZEDACCESS {
            get {
                return ResourceManager.GetString("COR_E_UNAUTHORIZEDACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A verification failure has occurred..
        /// </summary>
        internal static string COR_E_VERIFICATION {
            get {
                return ResourceManager.GetString("COR_E_VERIFICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No semaphore of the given name exists..
        /// </summary>
        internal static string COR_E_WAITHANDLECANNOTBEOPENED {
            get {
                return ResourceManager.GetString("COR_E_WAITHANDLECANNOTBEOPENED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A supplied object or type belongs to the wrong AppDomain..
        /// </summary>
        internal static string CORDBG_E_APPDOMAIN_MISMATCH {
            get {
                return ResourceManager.GetString("CORDBG_E_APPDOMAIN_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DBG: The operation is not supported because assembly updates have been applied..
        /// </summary>
        internal static string CORDBG_E_ASSEMBLY_UPDATES_APPLIED {
            get {
                return ResourceManager.GetString("CORDBG_E_ASSEMBLY_UPDATES_APPLIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference value was found to be bad during dereferencing..
        /// </summary>
        internal static string CORDBG_E_BAD_REFERENCE_VALUE {
            get {
                return ResourceManager.GetString("CORDBG_E_BAD_REFERENCE_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The state of the thread is invalid..
        /// </summary>
        internal static string CORDBG_E_BAD_THREAD_STATE {
            get {
                return ResourceManager.GetString("CORDBG_E_BAD_THREAD_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested operation cannot be performed during an attach operation..
        /// </summary>
        internal static string CORDBG_E_CANNOT_BE_ON_ATTACH {
            get {
                return ResourceManager.GetString("CORDBG_E_CANNOT_BE_ON_ATTACH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugging fiber mode managed process is not supported..
        /// </summary>
        internal static string CORDBG_E_CANNOT_DEBUG_FIBER_PROCESS {
            get {
                return ResourceManager.GetString("CORDBG_E_CANNOT_DEBUG_FIBER_PROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We failed to resolve assembly given an AssemblyRef token. Assembly may be not loaded yet or not a valid token..
        /// </summary>
        internal static string CORDBG_E_CANNOT_RESOLVE_ASSEMBLY {
            get {
                return ResourceManager.GetString("CORDBG_E_CANNOT_RESOLVE_ASSEMBLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use the API on this thread..
        /// </summary>
        internal static string CORDBG_E_CANT_CALL_ON_THIS_THREAD {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_CALL_ON_THIS_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JIT settings for ZAP modules cannot be changed..
        /// </summary>
        internal static string CORDBG_E_CANT_CHANGE_JIT_SETTING_FOR_ZAP_MODULE {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_CHANGE_JIT_SETTING_FOR_ZAP_MODULE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot have an ICorDebugStepper do a native step-out..
        /// </summary>
        internal static string CORDBG_E_CANT_INTEROP_STEP_OUT {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_INTEROP_STEP_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP is not possible, because SetIP would move EIP from outside of an exception handling catch clause to a point inside of one..
        /// </summary>
        internal static string CORDBG_E_CANT_SET_IP_INTO_CATCH {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SET_IP_INTO_CATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP is not possible because SetIP would move EIP from outside of an exception handling finally clause to a point inside of one..
        /// </summary>
        internal static string CORDBG_E_CANT_SET_IP_INTO_FINALLY {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SET_IP_INTO_FINALLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP is not possible because it would move EIP from within a catch clause to a point outside of one on this platforms..
        /// </summary>
        internal static string CORDBG_E_CANT_SET_IP_OUT_OF_CATCH_ON_WIN64 {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SET_IP_OUT_OF_CATCH_ON_WIN64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP is not possible because it would move EIP from within an exception handling finally clause to a point outside of one..
        /// </summary>
        internal static string CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP is not possible because it would move EIP from within a finally clause to a point outside of one on this platforms..
        /// </summary>
        internal static string CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY_ON_WIN64 {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY_ON_WIN64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use JMC on this code (likely wrong JIT settings)..
        /// </summary>
        internal static string CORDBG_E_CANT_SET_TO_JMC {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SET_TO_JMC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP cannot leave or enter a filter..
        /// </summary>
        internal static string CORDBG_E_CANT_SETIP_INTO_OR_OUT_OF_FILTER {
            get {
                return ResourceManager.GetString("CORDBG_E_CANT_SETIP_INTO_OR_OUT_OF_FILTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class is not loaded..
        /// </summary>
        internal static string CORDBG_E_CLASS_NOT_LOADED {
            get {
                return ResourceManager.GetString("CORDBG_E_CLASS_NOT_LOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is currently unavailable..
        /// </summary>
        internal static string CORDBG_E_CODE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_CODE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thread&apos;s context is not available..
        /// </summary>
        internal static string CORDBG_E_CONTEXT_UNVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_CONTEXT_UNVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address provided does not point to a valid managed object..
        /// </summary>
        internal static string CORDBG_E_CORRUPT_OBJECT {
            get {
                return ResourceManager.GetString("CORDBG_E_CORRUPT_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept the current exception at the specified frame..
        /// </summary>
        internal static string CORDBG_E_CURRENT_EXCEPTION_IS_OUTSIDE_CURRENT_EXECUTION_SCOPE {
            get {
                return ResourceManager.GetString("CORDBG_E_CURRENT_EXCEPTION_IS_OUTSIDE_CURRENT_EXECUTION_SCOPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure when calling a data target method..
        /// </summary>
        internal static string CORDBG_E_DATA_TARGET_ERROR {
            get {
                return ResourceManager.GetString("CORDBG_E_DATA_TARGET_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A debug component is not installed..
        /// </summary>
        internal static string CORDBG_E_DEBUG_COMPONENT_MISSING {
            get {
                return ResourceManager.GetString("CORDBG_E_DEBUG_COMPONENT_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This process has already been attached..
        /// </summary>
        internal static string CORDBG_E_DEBUGGER_ALREADY_ATTACHED {
            get {
                return ResourceManager.GetString("CORDBG_E_DEBUGGER_ALREADY_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the debugging has been disabled.
        /// </summary>
        internal static string CORDBG_E_DEBUGGING_DISABLED {
            get {
                return ResourceManager.GetString("CORDBG_E_DEBUGGING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugging is not possible due to an incompatibility within the CLR implementation..
        /// </summary>
        internal static string CORDBG_E_DEBUGGING_NOT_POSSIBLE {
            get {
                return ResourceManager.GetString("CORDBG_E_DEBUGGING_NOT_POSSIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detach is illegal after an Edit and Continue on a module..
        /// </summary>
        internal static string CORDBG_E_DETACH_FAILED_ON_ENC {
            get {
                return ResourceManager.GetString("CORDBG_E_DETACH_FAILED_ON_ENC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All outstanding breakpoints have not been closed, detaching is not allowed at this time..
        /// </summary>
        internal static string CORDBG_E_DETACH_FAILED_OUTSTANDING_BREAKPOINTS {
            get {
                return ResourceManager.GetString("CORDBG_E_DETACH_FAILED_OUTSTANDING_BREAKPOINTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All outstanding func-evals have not completed, detaching is not allowed at this time..
        /// </summary>
        internal static string CORDBG_E_DETACH_FAILED_OUTSTANDING_EVALS {
            get {
                return ResourceManager.GetString("CORDBG_E_DETACH_FAILED_OUTSTANDING_EVALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All outstanding steppers have not been closed, detaching is not allowed at this time..
        /// </summary>
        internal static string CORDBG_E_DETACH_FAILED_OUTSTANDING_STEPPERS {
            get {
                return ResourceManager.GetString("CORDBG_E_DETACH_FAILED_OUTSTANDING_STEPPERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detach failed because there are outstanding resources in the target..
        /// </summary>
        internal static string CORDBG_E_DETACH_FAILED_OUTSTANDING_TARGET_RESOURCES {
            get {
                return ResourceManager.GetString("CORDBG_E_DETACH_FAILED_OUTSTANDING_TARGET_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding a field to a value or layout class is prohibited..
        /// </summary>
        internal static string CORDBG_E_ENC_CANT_ADD_FIELD_TO_VALUE_OR_LAYOUT_CLASS {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_CANT_ADD_FIELD_TO_VALUE_OR_LAYOUT_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to perform unsupported edit..
        /// </summary>
        internal static string CORDBG_E_ENC_EDIT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_EDIT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field was added via Edit and Continue after the class was loaded..
        /// </summary>
        internal static string CORDBG_E_ENC_HANGING_FIELD {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_HANGING_FIELD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is in a callable handler/filter. Cannot increase stack..
        /// </summary>
        internal static string CORDBG_E_ENC_IN_FUNCLET {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_IN_FUNCLET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method was not JIT&apos;d in EnC mode..
        /// </summary>
        internal static string CORDBG_E_ENC_INFOLESS_METHOD {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_INFOLESS_METHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Runtime Error while doing Edit-and-Continue..
        /// </summary>
        internal static string CORDBG_E_ENC_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The JIT is unable to update the method..
        /// </summary>
        internal static string CORDBG_E_ENC_JIT_CANT_UPDATE {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_JIT_CANT_UPDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tried to do Edit and Continue on a module that was not started in Edit and Continue mode..
        /// </summary>
        internal static string CORDBG_E_ENC_MODULE_NOT_ENC_ENABLED {
            get {
                return ResourceManager.GetString("CORDBG_E_ENC_MODULE_NOT_ENC_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A field in a class is not available, because the runtime optimized it away..
        /// </summary>
        internal static string CORDBG_E_FIELD_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_FIELD_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returned if someone tries to call GetStaticFieldValue on a non-instance field..
        /// </summary>
        internal static string CORDBG_E_FIELD_NOT_INSTANCE {
            get {
                return ResourceManager.GetString("CORDBG_E_FIELD_NOT_INSTANCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetStaticFieldValue called on a non-static field..
        /// </summary>
        internal static string CORDBG_E_FIELD_NOT_STATIC {
            get {
                return ResourceManager.GetString("CORDBG_E_FIELD_NOT_STATIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Func eval cannot work. Bad starting point..
        /// </summary>
        internal static string CORDBG_E_FUNC_EVAL_BAD_START_POINT {
            get {
                return ResourceManager.GetString("CORDBG_E_FUNC_EVAL_BAD_START_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Func eval cannot update a variable stored in a register on a non-leaf frame.  The most likely cause is that such a variable is passed as a ref/out argument..
        /// </summary>
        internal static string CORDBG_E_FUNC_EVAL_CANNOT_UPDATE_REGISTER_IN_NONLEAF_FRAME {
            get {
                return ResourceManager.GetString("CORDBG_E_FUNC_EVAL_CANNOT_UPDATE_REGISTER_IN_NONLEAF_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CordbEval::GetResult called before func eval has finished..
        /// </summary>
        internal static string CORDBG_E_FUNC_EVAL_NOT_COMPLETE {
            get {
                return ResourceManager.GetString("CORDBG_E_FUNC_EVAL_NOT_COMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to get a ICorDebugFunction for a function that is not IL..
        /// </summary>
        internal static string CORDBG_E_FUNCTION_NOT_IL {
            get {
                return ResourceManager.GetString("CORDBG_E_FUNCTION_NOT_IL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GC heap structures are not in a valid state for traversal..
        /// </summary>
        internal static string CORDBG_E_GC_STRUCTURES_INVALID {
            get {
                return ResourceManager.GetString("CORDBG_E_GC_STRUCTURES_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handle has been disposed..
        /// </summary>
        internal static string CORDBG_E_HANDLE_HAS_BEEN_DISPOSED {
            get {
                return ResourceManager.GetString("CORDBG_E_HANDLE_HAS_BEEN_DISPOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger helper thread cannot obtain the locks it needs to perform this operation..
        /// </summary>
        internal static string CORDBG_E_HELPER_MAY_DEADLOCK {
            get {
                return ResourceManager.GetString("CORDBG_E_HELPER_MAY_DEADLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IL variable is not available at the current native IP..
        /// </summary>
        internal static string CORDBG_E_IL_VAR_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_IL_VAR_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because it is a GC unsafe point..
        /// </summary>
        internal static string CORDBG_E_ILLEGAL_AT_GC_UNSAFE_POINT {
            get {
                return ResourceManager.GetString("CORDBG_E_ILLEGAL_AT_GC_UNSAFE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the thread is in native code..
        /// </summary>
        internal static string CORDBG_E_ILLEGAL_IN_NATIVE_CODE {
            get {
                return ResourceManager.GetString("CORDBG_E_ILLEGAL_IN_NATIVE_CODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the thread is in optimized code..
        /// </summary>
        internal static string CORDBG_E_ILLEGAL_IN_OPTIMIZED_CODE {
            get {
                return ResourceManager.GetString("CORDBG_E_ILLEGAL_IN_OPTIMIZED_CODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the thread is in the prolog..
        /// </summary>
        internal static string CORDBG_E_ILLEGAL_IN_PROLOG {
            get {
                return ResourceManager.GetString("CORDBG_E_ILLEGAL_IN_PROLOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is illegal because of a stack overflow..
        /// </summary>
        internal static string CORDBG_E_ILLEGAL_IN_STACK_OVERFLOW {
            get {
                return ResourceManager.GetString("CORDBG_E_ILLEGAL_IN_STACK_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trying to shutdown out of order..
        /// </summary>
        internal static string CORDBG_E_ILLEGAL_SHUTDOWN_ORDER {
            get {
                return ResourceManager.GetString("CORDBG_E_ILLEGAL_SHUTDOWN_ORDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger&apos;s protocol is incompatible with the debuggee..
        /// </summary>
        internal static string CORDBG_E_INCOMPATIBLE_PROTOCOL {
            get {
                return ResourceManager.GetString("CORDBG_E_INCOMPATIBLE_PROTOCOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The intercept frame for this exception has already been set..
        /// </summary>
        internal static string CORDBG_E_INTERCEPT_FRAME_ALREADY_SET {
            get {
                return ResourceManager.GetString("CORDBG_E_INTERCEPT_FRAME_ALREADY_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interop debugging is not supported..
        /// </summary>
        internal static string CORDBG_E_INTEROP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("CORDBG_E_INTEROP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This object value is no longer valid..
        /// </summary>
        internal static string CORDBG_E_INVALID_OBJECT {
            get {
                return ResourceManager.GetString("CORDBG_E_INVALID_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified IL offset or opcode is not supported for this operation..
        /// </summary>
        internal static string CORDBG_E_INVALID_OPCODE {
            get {
                return ResourceManager.GetString("CORDBG_E_INVALID_OPCODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A kernel debugger is enabled on the system.  User-mode debugging will trap to the kernel debugger..
        /// </summary>
        internal static string CORDBG_E_KERNEL_DEBUGGER_ENABLED {
            get {
                return ResourceManager.GetString("CORDBG_E_KERNEL_DEBUGGER_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A kernel debugger is present on the system.  User-mode debugging will trap to the kernel debugger..
        /// </summary>
        internal static string CORDBG_E_KERNEL_DEBUGGER_PRESENT {
            get {
                return ResourceManager.GetString("CORDBG_E_KERNEL_DEBUGGER_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ICLRDebuggingLibraryProvider callback returned an error or did not provide a valid handle..
        /// </summary>
        internal static string CORDBG_E_LIBRARY_PROVIDER_ERROR {
            get {
                return ResourceManager.GetString("CORDBG_E_LIBRARY_PROVIDER_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of clr.dll in the target does not match the one mscordacwks.dll was built for..
        /// </summary>
        internal static string CORDBG_E_MISMATCHED_CORWKS_AND_DACWKS_DLLS {
            get {
                return ResourceManager.GetString("CORDBG_E_MISMATCHED_CORWKS_AND_DACWKS_DLLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided data target does not implement the required interfaces for this version of the runtime.
        /// </summary>
        internal static string CORDBG_E_MISSING_DATA_TARGET_INTERFACE {
            get {
                return ResourceManager.GetString("CORDBG_E_MISSING_DATA_TARGET_INTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debuggee memory space does not have the expected debugging export table..
        /// </summary>
        internal static string CORDBG_E_MISSING_DEBUGGER_EXPORTS {
            get {
                return ResourceManager.GetString("CORDBG_E_MISSING_DEBUGGER_EXPORTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the debugger could not get the metadata..
        /// </summary>
        internal static string CORDBG_E_MISSING_METADATA {
            get {
                return ResourceManager.GetString("CORDBG_E_MISSING_METADATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symbols are not supplied for modules loaded from disk..
        /// </summary>
        internal static string CORDBG_E_MODULE_LOADED_FROM_DISK {
            get {
                return ResourceManager.GetString("CORDBG_E_MODULE_LOADED_FROM_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module not loaded..
        /// </summary>
        internal static string CORDBG_E_MODULE_NOT_LOADED {
            get {
                return ResourceManager.GetString("CORDBG_E_MODULE_NOT_LOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be in context of CreateProcess callback to perform requested operation..
        /// </summary>
        internal static string CORDBG_E_MUST_BE_IN_CREATE_PROCESS {
            get {
                return ResourceManager.GetString("CORDBG_E_MUST_BE_IN_CREATE_PROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be in context of LoadModule callback to perform requested operation..
        /// </summary>
        internal static string CORDBG_E_MUST_BE_IN_LOAD_MODULE {
            get {
                return ResourceManager.GetString("CORDBG_E_MUST_BE_IN_LOAD_MODULE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This API is only allowed when interop debugging..
        /// </summary>
        internal static string CORDBG_E_MUST_BE_INTEROP_DEBUGGING {
            get {
                return ResourceManager.GetString("CORDBG_E_MUST_BE_INTEROP_DEBUGGING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a native patch at the address..
        /// </summary>
        internal static string CORDBG_E_NATIVE_PATCH_ALREADY_AT_ADDR {
            get {
                return ResourceManager.GetString("CORDBG_E_NATIVE_PATCH_ALREADY_AT_ADDR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NGEN is not supported..
        /// </summary>
        internal static string CORDBG_E_NGEN_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("CORDBG_E_NGEN_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal frame markers have no associated context..
        /// </summary>
        internal static string CORDBG_E_NO_CONTEXT_FOR_INTERNAL_FRAME {
            get {
                return ResourceManager.GetString("CORDBG_E_NO_CONTEXT_FOR_INTERNAL_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t find a native image..
        /// </summary>
        internal static string CORDBG_E_NO_IMAGE_AVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_NO_IMAGE_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no native patch at the given address..
        /// </summary>
        internal static string CORDBG_E_NO_NATIVE_PATCH_AT_ADDR {
            get {
                return ResourceManager.GetString("CORDBG_E_NO_NATIVE_PATCH_AT_ADDR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call RemapFunction until have received RemapBreakpoint..
        /// </summary>
        internal static string CORDBG_E_NO_REMAP_BREAKPIONT {
            get {
                return ResourceManager.GetString("CORDBG_E_NO_REMAP_BREAKPIONT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided CONTEXT does not match the specified thread..
        /// </summary>
        internal static string CORDBG_E_NON_MATCHING_CONTEXT {
            get {
                return ResourceManager.GetString("CORDBG_E_NON_MATCHING_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Native-frame-only&apos; operation on non-native frame..
        /// </summary>
        internal static string CORDBG_E_NON_NATIVE_FRAME {
            get {
                return ResourceManager.GetString("CORDBG_E_NON_NATIVE_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept this exception..
        /// </summary>
        internal static string CORDBG_E_NONINTERCEPTABLE_EXCEPTION {
            get {
                return ResourceManager.GetString("CORDBG_E_NONINTERCEPTABLE_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current frame is not a child frame..
        /// </summary>
        internal static string CORDBG_E_NOT_CHILD_FRAME {
            get {
                return ResourceManager.GetString("CORDBG_E_NOT_CHILD_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The module at the base address indicated was not recognized as a CLR.
        /// </summary>
        internal static string CORDBG_E_NOT_CLR {
            get {
                return ResourceManager.GetString("CORDBG_E_NOT_CLR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LS is not in a good spot to perform the requested operation..
        /// </summary>
        internal static string CORDBG_E_NOTREADY {
            get {
                return ResourceManager.GetString("CORDBG_E_NOTREADY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is in a zombie state..
        /// </summary>
        internal static string CORDBG_E_OBJECT_NEUTERED {
            get {
                return ResourceManager.GetString("CORDBG_E_OBJECT_NEUTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stackwalker is now past the end of stack.  No information is available..
        /// </summary>
        internal static string CORDBG_E_PAST_END_OF_STACK {
            get {
                return ResourceManager.GetString("CORDBG_E_PAST_END_OF_STACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process has been detached..
        /// </summary>
        internal static string CORDBG_E_PROCESS_DETACHED {
            get {
                return ResourceManager.GetString("CORDBG_E_PROCESS_DETACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process not synchronized..
        /// </summary>
        internal static string CORDBG_E_PROCESS_NOT_SYNCHRONIZED {
            get {
                return ResourceManager.GetString("CORDBG_E_PROCESS_NOT_SYNCHRONIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process was terminated..
        /// </summary>
        internal static string CORDBG_E_PROCESS_TERMINATED {
            get {
                return ResourceManager.GetString("CORDBG_E_PROCESS_TERMINATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call into a ReadVirtual implementation returned failure.
        /// </summary>
        internal static string CORDBG_E_READVIRTUAL_FAILURE {
            get {
                return ResourceManager.GetString("CORDBG_E_READVIRTUAL_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP is not allowed..
        /// </summary>
        internal static string CORDBG_E_SET_IP_IMPOSSIBLE {
            get {
                return ResourceManager.GetString("CORDBG_E_SET_IP_IMPOSSIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP cannot be done on any exception..
        /// </summary>
        internal static string CORDBG_E_SET_IP_NOT_ALLOWED_ON_EXCEPTION {
            get {
                return ResourceManager.GetString("CORDBG_E_SET_IP_NOT_ALLOWED_ON_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetIP cannot be done on any frame except the leaf frame..
        /// </summary>
        internal static string CORDBG_E_SET_IP_NOT_ALLOWED_ON_NONLEAF_FRAME {
            get {
                return ResourceManager.GetString("CORDBG_E_SET_IP_NOT_ALLOWED_ON_NONLEAF_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot perfrom SetValue on non-leaf frames..
        /// </summary>
        internal static string CORDBG_E_SET_VALUE_NOT_ALLOWED_ON_NONLEAF_FRAME {
            get {
                return ResourceManager.GetString("CORDBG_E_SET_VALUE_NOT_ALLOWED_ON_NONLEAF_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static variable is not available because it has not been initialized yet..
        /// </summary>
        internal static string CORDBG_E_STATIC_VAR_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_STATIC_VAR_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returned from a call to Continue that was not matched with a stopping event..
        /// </summary>
        internal static string CORDBG_E_SUPERFLOUS_CONTINUE {
            get {
                return ResourceManager.GetString("CORDBG_E_SUPERFLOUS_CONTINUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application did not supply symbols when it loaded or created this module, or they are not yet available..
        /// </summary>
        internal static string CORDBG_E_SYMBOLS_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("CORDBG_E_SYMBOLS_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debuggee is in a corrupt state..
        /// </summary>
        internal static string CORDBG_E_TARGET_INCONSISTENT {
            get {
                return ResourceManager.GetString("CORDBG_E_TARGET_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debuggee is read-only..
        /// </summary>
        internal static string CORDBG_E_TARGET_READONLY {
            get {
                return ResourceManager.GetString("CORDBG_E_TARGET_READONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread is not scheduled. Thus we may not have OSThreadId, handle, or context..
        /// </summary>
        internal static string CORDBG_E_THREAD_NOT_SCHEDULED {
            get {
                return ResourceManager.GetString("CORDBG_E_THREAD_NOT_SCHEDULED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A wait timed out, likely an indication of deadlock..
        /// </summary>
        internal static string CORDBG_E_TIMEOUT {
            get {
                return ResourceManager.GetString("CORDBG_E_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger can only handle a finite number of debuggees..
        /// </summary>
        internal static string CORDBG_E_TOO_MANY_PROCESSES {
            get {
                return ResourceManager.GetString("CORDBG_E_TOO_MANY_PROCESSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot set a breakpoint here..
        /// </summary>
        internal static string CORDBG_E_UNABLE_TO_SET_BREAKPOINT {
            get {
                return ResourceManager.GetString("CORDBG_E_UNABLE_TO_SET_BREAKPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because debuggee and debugger are on incompatible platforms..
        /// </summary>
        internal static string CORDBG_E_UNCOMPATIBLE_PLATFORMS {
            get {
                return ResourceManager.GetString("CORDBG_E_UNCOMPATIBLE_PLATFORMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecoverable API error..
        /// </summary>
        internal static string CORDBG_E_UNRECOVERABLE_ERROR {
            get {
                return ResourceManager.GetString("CORDBG_E_UNRECOVERABLE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified action is unsupported by this version of the runtime..
        /// </summary>
        internal static string CORDBG_E_UNSUPPORTED {
            get {
                return ResourceManager.GetString("CORDBG_E_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This debugging model is unsupported by the specified runtime.
        /// </summary>
        internal static string CORDBG_E_UNSUPPORTED_DEBUGGING_MODEL {
            get {
                return ResourceManager.GetString("CORDBG_E_UNSUPPORTED_DEBUGGING_MODEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegate contains a delegate currently not supported by the API..
        /// </summary>
        internal static string CORDBG_E_UNSUPPORTED_DELEGATE {
            get {
                return ResourceManager.GetString("CORDBG_E_UNSUPPORTED_DELEGATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger is not designed to support the version of the CLR the debuggee is using..
        /// </summary>
        internal static string CORDBG_E_UNSUPPORTED_FORWARD_COMPAT {
            get {
                return ResourceManager.GetString("CORDBG_E_UNSUPPORTED_FORWARD_COMPAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version struct has an unrecognized value for wStructVersion.
        /// </summary>
        internal static string CORDBG_E_UNSUPPORTED_VERSION_STRUCT {
            get {
                return ResourceManager.GetString("CORDBG_E_UNSUPPORTED_VERSION_STRUCT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Debugging API doesn&apos;t support dereferencing function pointers..
        /// </summary>
        internal static string CORDBG_E_VALUE_POINTS_TO_FUNCTION {
            get {
                return ResourceManager.GetString("CORDBG_E_VALUE_POINTS_TO_FUNCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;variable&apos; does not exist because it is a literal optimized away by the compiler..
        /// </summary>
        internal static string CORDBG_E_VARIABLE_IS_ACTUALLY_LITERAL {
            get {
                return ResourceManager.GetString("CORDBG_E_VARIABLE_IS_ACTUALLY_LITERAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stack walk has reached the end of the stack.  There are no more frames to walk..
        /// </summary>
        internal static string CORDBG_S_AT_END_OF_STACK {
            get {
                return ResourceManager.GetString("CORDBG_S_AT_END_OF_STACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DBG: Attempt to {SetIP} when not going to a sequence point. If both this and {CORDBG_E_BAD_START_SEQUENCE_POINT} are true, only {CORDBG_E_BAD_START_SEQUENCE_POINT} will be reported..
        /// </summary>
        internal static string CORDBG_S_BAD_END_SEQUENCE_POINT {
            get {
                return ResourceManager.GetString("CORDBG_S_BAD_END_SEQUENCE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DBG: Attempt to {SetIP} not at a sequence point sequence point..
        /// </summary>
        internal static string CORDBG_S_BAD_START_SEQUENCE_POINT {
            get {
                return ResourceManager.GetString("CORDBG_S_BAD_START_SEQUENCE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DBG: The func eval completed, but was aborted..
        /// </summary>
        internal static string CORDBG_S_FUNC_EVAL_ABORTED {
            get {
                return ResourceManager.GetString("CORDBG_S_FUNC_EVAL_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DBG: Some func evals will lack a return value..
        /// </summary>
        internal static string CORDBG_S_FUNC_EVAL_HAS_NO_RESULT {
            get {
                return ResourceManager.GetString("CORDBG_S_FUNC_EVAL_HAS_NO_RESULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested operation cannot be performed during an attach operation..
        /// </summary>
        internal static string CORDBG_S_NOT_ALL_BITS_SET {
            get {
                return ResourceManager.GetString("CORDBG_S_NOT_ALL_BITS_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DBG: The Debugging API doesn&apos;t support dereferencing void pointers..
        /// </summary>
        internal static string CORDBG_S_VALUE_POINTS_TO_VOID {
            get {
                return ResourceManager.GetString("CORDBG_S_VALUE_POINTS_TO_VOID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DIAG: The runtime was unable to decode the Header or Payload..
        /// </summary>
        internal static string CORDIAGIPC_E_BAD_ENCODING {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_BAD_ENCODING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DIAG: The specified {CommandSet} or {CommandId} is unknown..
        /// </summary>
        internal static string CORDIAGIPC_E_UNKNOWN_COMMAND {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_UNKNOWN_COMMAND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DIAG: An unknown error occurred in the Diagnpostics IPC Server..
        /// </summary>
        internal static string CORDIAGIPC_E_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DIAG: The magic version of Diagnostics IPC is unknown..
        /// </summary>
        internal static string CORDIAGIPC_E_UNKNOWN_MAGIC {
            get {
                return ResourceManager.GetString("CORDIAGIPC_E_UNKNOWN_MAGIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: A legal asynchronous call was made at an unsafe time (e.g., CLR locks are held)..
        /// </summary>
        internal static string CORPROF_E_ASYNCHRONOUS_UNSAFE {
            get {
                return ResourceManager.GetString("CORPROF_E_ASYNCHRONOUS_UNSAFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function may only be called during profiler initialization..
        /// </summary>
        internal static string CORPROF_E_CALL_ONLY_FROM_INIT {
            get {
                return ResourceManager.GetString("CORPROF_E_CALL_ONLY_FROM_INIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Profiler must implement {ICorProfilerCallback3} interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK3_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK3_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Profiler must implement {ICorProfilerCallback4} interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK4_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK4_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Profiler must implement {ICorProfilerCallback6} interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK6_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK6_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Profiler must implement {ICorProfilerCallback7} interface for this call to be supported..
        /// </summary>
        internal static string CORPROF_E_CALLBACK7_REQUIRED {
            get {
                return ResourceManager.GetString("CORPROF_E_CALLBACK7_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The specified {ClassID} cannot be inspected by this function because it is an array..
        /// </summary>
        internal static string CORPROF_E_CLASSID_IS_ARRAY {
            get {
                return ResourceManager.GetString("CORPROF_E_CLASSID_IS_ARRAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The specified {ClassID} is a non-array composite type (e.g., ref) and cannot be inspected..
        /// </summary>
        internal static string CORPROF_E_CLASSID_IS_COMPOSITE {
            get {
                return ResourceManager.GetString("CORPROF_E_CLASSID_IS_COMPOSITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Concurrent GC mode is enabled, which prevents use of {COR_PRF_MONITOR_GC}..
        /// </summary>
        internal static string CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE {
            get {
                return ResourceManager.GetString("CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID is not fully loaded/defined yet..
        /// </summary>
        internal static string CORPROF_E_DATAINCOMPLETE {
            get {
                return ResourceManager.GetString("CORPROF_E_DATAINCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: This functionality requires {CoreCLR} debugging to be enabled..
        /// </summary>
        internal static string CORPROF_E_DEBUGGING_DISABLED {
            get {
                return ResourceManager.GetString("CORPROF_E_DEBUGGING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The specified function is instantiated into a collectible assembly, and is thus not supported by this API method..
        /// </summary>
        internal static string CORPROF_E_FUNCTION_IS_COLLECTIBLE {
            get {
                return ResourceManager.GetString("CORPROF_E_FUNCTION_IS_COLLECTIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given function is a generic and cannot be used with this method..
        /// </summary>
        internal static string CORPROF_E_FUNCTION_IS_PARAMETERIZED {
            get {
                return ResourceManager.GetString("CORPROF_E_FUNCTION_IS_PARAMETERIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function not yet compiled..
        /// </summary>
        internal static string CORPROF_E_FUNCTION_NOT_COMPILED {
            get {
                return ResourceManager.GetString("CORPROF_E_FUNCTION_NOT_COMPILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Method has no associated IL..
        /// </summary>
        internal static string CORPROF_E_FUNCTION_NOT_IL {
            get {
                return ResourceManager.GetString("CORPROF_E_FUNCTION_NOT_IL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Detach is impossible because immutable flags were set by the profiler at startup. Detach was not attempted; the profiler is still fully attached..
        /// </summary>
        internal static string CORPROF_E_IMMUTABLE_FLAGS_SET {
            get {
                return ResourceManager.GetString("CORPROF_E_IMMUTABLE_FLAGS_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The profiler called a function that first requires additional flags to be set in the event mask. This {HRESULT} may also indicate that the profiler called a function that first requires that some of the flags currently set in the event mask be reset..
        /// </summary>
        internal static string CORPROF_E_INCONSISTENT_WITH_FLAGS {
            get {
                return ResourceManager.GetString("CORPROF_E_INCONSISTENT_WITH_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: {AttachProfiler} encountered an error while communicating on the pipe to the target profilee. This is often caused by a target profilee that is shutting down or killed while {AttachProfiler} is reading or writing the pipe..
        /// </summary>
        internal static string CORPROF_E_IPC_FAILED {
            get {
                return ResourceManager.GetString("CORPROF_E_IPC_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Detach is impossible because the profiler has either instrumented IL or inserted enter/leave hooks. Detach was not attempted; the profiler is still fully attached..
        /// </summary>
        internal static string CORPROF_E_IRREVERSIBLE_INSTRUMENTATION_PRESENT {
            get {
                return ResourceManager.GetString("CORPROF_E_IRREVERSIBLE_INSTRUMENTATION_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Returned when asked for the address of a static that is a literal..
        /// </summary>
        internal static string CORPROF_E_LITERALS_HAVE_NO_ADDRESS {
            get {
                return ResourceManager.GetString("CORPROF_E_LITERALS_HAVE_NO_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The specified module was dynamically generated (e.g., via {Reflection.Emit} API), and is thus not supported by this API method..
        /// </summary>
        internal static string CORPROF_E_MODULE_IS_DYNAMIC {
            get {
                return ResourceManager.GetString("CORPROF_E_MODULE_IS_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thread has never run managed code before..
        /// </summary>
        internal static string CORPROF_E_NOT_MANAGED_THREAD {
            get {
                return ResourceManager.GetString("CORPROF_E_NOT_MANAGED_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested information is not yet available..
        /// </summary>
        internal static string CORPROF_E_NOT_YET_AVAILABLE {
            get {
                return ResourceManager.GetString("CORPROF_E_NOT_YET_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Unable to request a profiler attach because the target profilee&apos;s runtime is of a version incompatible with the current process calling {AttachProfiler}..
        /// </summary>
        internal static string CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: {AttachProfiler} was unable to find a profilee with the specified process ID..
        /// </summary>
        internal static string CORPROF_E_PROFILEE_PROCESS_NOT_FOUND {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILEE_PROCESS_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The request to attach a profiler was denied because a profiler is already loaded..
        /// </summary>
        internal static string CORPROF_E_PROFILER_ALREADY_ACTIVE {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_ALREADY_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The profiler has requested that the CLR instance not load the profiler into this process..
        /// </summary>
        internal static string CORPROF_E_PROFILER_CANCEL_ACTIVATION {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_CANCEL_ACTIVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The profiler&apos;s call into the CLR is disallowed because the profiler is attempting to detach..
        /// </summary>
        internal static string CORPROF_E_PROFILER_DETACHING {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_DETACHING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The profiler does not support attaching to a live process..
        /// </summary>
        internal static string CORPROF_E_PROFILER_NOT_ATTACHABLE {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_NOT_ATTACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The profiler called a function that cannot complete because the profiler is not yet fully initialized..
        /// </summary>
        internal static string CORPROF_E_PROFILER_NOT_YET_INITIALIZED {
            get {
                return ResourceManager.GetString("CORPROF_E_PROFILER_NOT_YET_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The runtime&apos;s tracking of inlined methods for {ReJIT} is not enabled..
        /// </summary>
        internal static string CORPROF_E_REJIT_INLINING_DISABLED {
            get {
                return ResourceManager.GetString("CORPROF_E_REJIT_INLINING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: This call is not supported unless {ReJIT} is first enabled during initialization by setting {COR_PRF_ENABLE_REJIT} via {SetEventMask}..
        /// </summary>
        internal static string CORPROF_E_REJIT_NOT_ENABLED {
            get {
                return ResourceManager.GetString("CORPROF_E_REJIT_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The profiler called a function that cannot complete because the CLR is not yet fully initialized. The profiler may try again once the CLR has fully started..
        /// </summary>
        internal static string CORPROF_E_RUNTIME_UNINITIALIZED {
            get {
                return ResourceManager.GetString("CORPROF_E_RUNTIME_UNINITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Stackwalking callback requested the walk to abort..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_ABORTED {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: A profiler tried to walk the stack of an invalid thread..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: A profiler can not walk a thread that is currently executing unmanaged code..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_UNMANAGED_CTX {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_UNMANAGED_CTX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: A stackwalk at this point may cause dead locks or data corruption..
        /// </summary>
        internal static string CORPROF_E_STACKSNAPSHOT_UNSAFE {
            get {
                return ResourceManager.GetString("CORPROF_E_STACKSNAPSHOT_UNSAFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The runtime cannot be suspened since a suspension is already in progress..
        /// </summary>
        internal static string CORPROF_E_SUSPENSION_IN_PROGRESS {
            get {
                return ResourceManager.GetString("CORPROF_E_SUSPENSION_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: Timed out on waiting for concurrent GC to finish during attach..
        /// </summary>
        internal static string CORPROF_E_TIMEOUT_WAITING_FOR_CONCURRENT_GC {
            get {
                return ResourceManager.GetString("CORPROF_E_TIMEOUT_WAITING_FOR_CONCURRENT_GC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type is a generic and cannot be used with this method..
        /// </summary>
        internal static string CORPROF_E_TYPE_IS_PARAMETERIZED {
            get {
                return ResourceManager.GetString("CORPROF_E_TYPE_IS_PARAMETERIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: The message sent on the profiling API attach pipe is in an unrecognized format..
        /// </summary>
        internal static string CORPROF_E_UNRECOGNIZED_PIPE_MSG_FORMAT {
            get {
                return ResourceManager.GetString("CORPROF_E_UNRECOGNIZED_PIPE_MSG_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: A call was made at an unsupported time. Examples include illegally calling a profiling API method asynchronously, calling a method that might trigger a GC at an unsafe time, and calling a method at a time that could cause locks to be taken out of order..
        /// </summary>
        internal static string CORPROF_E_UNSUPPORTED_CALL_SEQUENCE {
            get {
                return ResourceManager.GetString("CORPROF_E_UNSUPPORTED_CALL_SEQUENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROF: This call was attempted by a profiler that attached to the process after startup, but this call is only supported by profilers that are loaded into the process on startup..
        /// </summary>
        internal static string CORPROF_E_UNSUPPORTED_FOR_ATTACHING_PROFILER {
            get {
                return ResourceManager.GetString("CORPROF_E_UNSUPPORTED_FOR_ATTACHING_PROFILER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure during Cryptographic operation..
        /// </summary>
        internal static string CORSEC_E_CRYPTO {
            get {
                return ResourceManager.GetString("CORSEC_E_CRYPTO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected Cryptographic operation..
        /// </summary>
        internal static string CORSEC_E_CRYPTO_UNEX_OPER {
            get {
                return ResourceManager.GetString("CORSEC_E_CRYPTO_UNEX_OPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid assembly file format..
        /// </summary>
        internal static string CORSEC_E_INVALID_IMAGE_FORMAT {
            get {
                return ResourceManager.GetString("CORSEC_E_INVALID_IMAGE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid assembly public key..
        /// </summary>
        internal static string CORSEC_E_INVALID_PUBLICKEY {
            get {
                return ResourceManager.GetString("CORSEC_E_INVALID_PUBLICKEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strong name validation failed..
        /// </summary>
        internal static string CORSEC_E_INVALID_STRONGNAME {
            get {
                return ResourceManager.GetString("CORSEC_E_INVALID_STRONGNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to grant minimum permission requests..
        /// </summary>
        internal static string CORSEC_E_MIN_GRANT_FAIL {
            get {
                return ResourceManager.GetString("CORSEC_E_MIN_GRANT_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly is not strong named..
        /// </summary>
        internal static string CORSEC_E_MISSING_STRONGNAME {
            get {
                return ResourceManager.GetString("CORSEC_E_MISSING_STRONGNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to grant permission to execute..
        /// </summary>
        internal static string CORSEC_E_NO_EXEC_PERM {
            get {
                return ResourceManager.GetString("CORSEC_E_NO_EXEC_PERM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PolicyException thrown..
        /// </summary>
        internal static string CORSEC_E_POLICY_EXCEPTION {
            get {
                return ResourceManager.GetString("CORSEC_E_POLICY_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature size mismatch..
        /// </summary>
        internal static string CORSEC_E_SIGNATURE_MISMATCH {
            get {
                return ResourceManager.GetString("CORSEC_E_SIGNATURE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML Syntax error..
        /// </summary>
        internal static string CORSEC_E_XMLSYNTAX {
            get {
                return ResourceManager.GetString("CORSEC_E_XMLSYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid security action code..
        /// </summary>
        internal static string CORSECATTR_E_BAD_ACTION {
            get {
                return ResourceManager.GetString("CORSECATTR_E_BAD_ACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content of the cryptographic message has already been decrypted..
        /// </summary>
        internal static string CRYPT_E_ALREADY_DECRYPTED {
            get {
                return ResourceManager.GetString("CRYPT_E_ALREADY_DECRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad arguments to function call..
        /// </summary>
        internal static string CRYPT_E_ASN1_BADARGS {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_BADARGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 function not supported for this PDU..
        /// </summary>
        internal static string CRYPT_E_ASN1_BADPDU {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_BADPDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad real value..
        /// </summary>
        internal static string CRYPT_E_ASN1_BADREAL {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_BADREAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad tag value met..
        /// </summary>
        internal static string CRYPT_E_ASN1_BADTAG {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_BADTAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad choice value..
        /// </summary>
        internal static string CRYPT_E_ASN1_CHOICE {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_CHOICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 constraint violated..
        /// </summary>
        internal static string CRYPT_E_ASN1_CONSTRAINT {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_CONSTRAINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 corrupted data..
        /// </summary>
        internal static string CRYPT_E_ASN1_CORRUPT {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 unexpected end of data..
        /// </summary>
        internal static string CRYPT_E_ASN1_EOD {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_EOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 Certificate encode/decode error code base. The ASN1 error values are offset by CRYPT_E_ASN1_ERROR..
        /// </summary>
        internal static string CRYPT_E_ASN1_ERROR {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 skipped unknown extension(s)..
        /// </summary>
        internal static string CRYPT_E_ASN1_EXTENDED {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_EXTENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 internal encode or decode error..
        /// </summary>
        internal static string CRYPT_E_ASN1_INTERNAL {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_INTERNAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 value too large..
        /// </summary>
        internal static string CRYPT_E_ASN1_LARGE {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 out of memory..
        /// </summary>
        internal static string CRYPT_E_ASN1_MEMORY {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 end of data expected.
        /// </summary>
        internal static string CRYPT_E_ASN1_NOEOD {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_NOEOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 not yet implemented..
        /// </summary>
        internal static string CRYPT_E_ASN1_NYI {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_NYI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 buffer overflow..
        /// </summary>
        internal static string CRYPT_E_ASN1_OVERFLOW {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad PDU type..
        /// </summary>
        internal static string CRYPT_E_ASN1_PDU_TYPE {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_PDU_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad encoding rule..
        /// </summary>
        internal static string CRYPT_E_ASN1_RULE {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_RULE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASN1 bad unicode (UTF8)..
        /// </summary>
        internal static string CRYPT_E_ASN1_UTF8 {
            get {
                return ResourceManager.GetString("CRYPT_E_ASN1_UTF8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic message does not contain all of the requested attributes..
        /// </summary>
        internal static string CRYPT_E_ATTRIBUTES_MISSING {
            get {
                return ResourceManager.GetString("CRYPT_E_ATTRIBUTES_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic message does not contain an expected authenticated attribute..
        /// </summary>
        internal static string CRYPT_E_AUTH_ATTR_MISSING {
            get {
                return ResourceManager.GetString("CRYPT_E_AUTH_ATTR_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred during encode or decode operation..
        /// </summary>
        internal static string CRYPT_E_BAD_ENCODE {
            get {
                return ResourceManager.GetString("CRYPT_E_BAD_ENCODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length specified for the output data was insufficient..
        /// </summary>
        internal static string CRYPT_E_BAD_LEN {
            get {
                return ResourceManager.GetString("CRYPT_E_BAD_LEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a cryptographic message or the cryptographic message is not formatted correctly..
        /// </summary>
        internal static string CRYPT_E_BAD_MSG {
            get {
                return ResourceManager.GetString("CRYPT_E_BAD_MSG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid control type..
        /// </summary>
        internal static string CRYPT_E_CONTROL_TYPE {
            get {
                return ResourceManager.GetString("CRYPT_E_CONTROL_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The previous certificate or CRL context was deleted..
        /// </summary>
        internal static string CRYPT_E_DELETED_PREV {
            get {
                return ResourceManager.GetString("CRYPT_E_DELETED_PREV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object or property already exists..
        /// </summary>
        internal static string CRYPT_E_EXISTS {
            get {
                return ResourceManager.GetString("CRYPT_E_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while reading or writing to a file..
        /// </summary>
        internal static string CRYPT_E_FILE_ERROR {
            get {
                return ResourceManager.GetString("CRYPT_E_FILE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Put operation cannot continue. The file needs to be resized. However, there is already a signature present. A complete signing operation must be done..
        /// </summary>
        internal static string CRYPT_E_FILERESIZED {
            get {
                return ResourceManager.GetString("CRYPT_E_FILERESIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hash value is not correct..
        /// </summary>
        internal static string CRYPT_E_HASH_VALUE {
            get {
                return ResourceManager.GetString("CRYPT_E_HASH_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string contains a character not in the 7 bit ASCII character set..
        /// </summary>
        internal static string CRYPT_E_INVALID_IA5_STRING {
            get {
                return ResourceManager.GetString("CRYPT_E_INVALID_IA5_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index value is not valid..
        /// </summary>
        internal static string CRYPT_E_INVALID_INDEX {
            get {
                return ResourceManager.GetString("CRYPT_E_INVALID_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid cryptographic message type..
        /// </summary>
        internal static string CRYPT_E_INVALID_MSG_TYPE {
            get {
                return ResourceManager.GetString("CRYPT_E_INVALID_MSG_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string contains a non-numeric character..
        /// </summary>
        internal static string CRYPT_E_INVALID_NUMERIC_STRING {
            get {
                return ResourceManager.GetString("CRYPT_E_INVALID_NUMERIC_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string contains a non-printable character..
        /// </summary>
        internal static string CRYPT_E_INVALID_PRINTABLE_STRING {
            get {
                return ResourceManager.GetString("CRYPT_E_INVALID_PRINTABLE_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string contains an invalid X500 name attribute key, oid, value or delimiter..
        /// </summary>
        internal static string CRYPT_E_INVALID_X500_STRING {
            get {
                return ResourceManager.GetString("CRYPT_E_INVALID_X500_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid issuer and/or serial number..
        /// </summary>
        internal static string CRYPT_E_ISSUER_SERIALNUMBER {
            get {
                return ResourceManager.GetString("CRYPT_E_ISSUER_SERIALNUMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public key&apos;s algorithm parameters are missing..
        /// </summary>
        internal static string CRYPT_E_MISSING_PUBKEY_PARA {
            get {
                return ResourceManager.GetString("CRYPT_E_MISSING_PUBKEY_PARA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while performing an operation on a cryptographic message..
        /// </summary>
        internal static string CRYPT_E_MSG_ERROR {
            get {
                return ResourceManager.GetString("CRYPT_E_MSG_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the certificate and private key to use for decryption..
        /// </summary>
        internal static string CRYPT_E_NO_DECRYPT_CERT {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_DECRYPT_CERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the certificate and private key for decryption..
        /// </summary>
        internal static string CRYPT_E_NO_KEY_PROPERTY {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_KEY_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the requested object..
        /// </summary>
        internal static string CRYPT_E_NO_MATCH {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No provider was specified for the store or object..
        /// </summary>
        internal static string CRYPT_E_NO_PROVIDER {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_PROVIDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation function was unable to check revocation for the certificate..
        /// </summary>
        internal static string CRYPT_E_NO_REVOCATION_CHECK {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_REVOCATION_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Dll or exported function was found to verify revocation..
        /// </summary>
        internal static string CRYPT_E_NO_REVOCATION_DLL {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_REVOCATION_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signed cryptographic message does not have a signer for the specified signer index..
        /// </summary>
        internal static string CRYPT_E_NO_SIGNER {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_SIGNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the signers of the cryptographic message or certificate trust list is trusted..
        /// </summary>
        internal static string CRYPT_E_NO_TRUSTED_SIGNER {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_TRUSTED_SIGNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The called function was unable to do a usage check on the subject..
        /// </summary>
        internal static string CRYPT_E_NO_VERIFY_USAGE_CHECK {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_VERIFY_USAGE_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No DLL or exported function was found to verify subject usage..
        /// </summary>
        internal static string CRYPT_E_NO_VERIFY_USAGE_DLL {
            get {
                return ResourceManager.GetString("CRYPT_E_NO_VERIFY_USAGE_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dwValueType for the CERT_NAME_VALUE is not one of the character strings. Most likely it is either a CERT_RDN_ENCODED_BLOB or CERT_RDN_OCTET_STRING..
        /// </summary>
        internal static string CRYPT_E_NOT_CHAR_STRING {
            get {
                return ResourceManager.GetString("CRYPT_E_NOT_CHAR_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content of the cryptographic message has not been decrypted yet..
        /// </summary>
        internal static string CRYPT_E_NOT_DECRYPTED {
            get {
                return ResourceManager.GetString("CRYPT_E_NOT_DECRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find object or property..
        /// </summary>
        internal static string CRYPT_E_NOT_FOUND {
            get {
                return ResourceManager.GetString("CRYPT_E_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subject was not found in a Certificate Trust List (CTL)..
        /// </summary>
        internal static string CRYPT_E_NOT_IN_CTL {
            get {
                return ResourceManager.GetString("CRYPT_E_NOT_IN_CTL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate is not in the revocation server&apos;s database..
        /// </summary>
        internal static string CRYPT_E_NOT_IN_REVOCATION_DATABASE {
            get {
                return ResourceManager.GetString("CRYPT_E_NOT_IN_REVOCATION_DATABASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object identifier is poorly formatted..
        /// </summary>
        internal static string CRYPT_E_OID_FORMAT {
            get {
                return ResourceManager.GetString("CRYPT_E_OID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS Certificate encode/decode error code base  See asn1code.h for a definition of the OSS runtime errors. The OSS error values are offset by CRYPT_E_OSS_ERROR..
        /// </summary>
        internal static string CRYPT_E_OSS_ERROR {
            get {
                return ResourceManager.GetString("CRYPT_E_OSS_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Final closure is pending until additional frees or closes..
        /// </summary>
        internal static string CRYPT_E_PENDING_CLOSE {
            get {
                return ResourceManager.GetString("CRYPT_E_PENDING_CLOSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enveloped-data message does not contain the specified recipient..
        /// </summary>
        internal static string CRYPT_E_RECIPIENT_NOT_FOUND {
            get {
                return ResourceManager.GetString("CRYPT_E_RECIPIENT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation function was unable to check revocation because the revocation server was offline..
        /// </summary>
        internal static string CRYPT_E_REVOCATION_OFFLINE {
            get {
                return ResourceManager.GetString("CRYPT_E_REVOCATION_OFFLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate is revoked..
        /// </summary>
        internal static string CRYPT_E_REVOKED {
            get {
                return ResourceManager.GetString("CRYPT_E_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic operation failed due to a local security option setting..
        /// </summary>
        internal static string CRYPT_E_SECURITY_SETTINGS {
            get {
                return ResourceManager.GetString("CRYPT_E_SECURITY_SETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified certificate is self signed..
        /// </summary>
        internal static string CRYPT_E_SELF_SIGNED {
            get {
                return ResourceManager.GetString("CRYPT_E_SELF_SIGNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the original signer..
        /// </summary>
        internal static string CRYPT_E_SIGNER_NOT_FOUND {
            get {
                return ResourceManager.GetString("CRYPT_E_SIGNER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The streamed cryptographic message requires more data to complete the decode operation..
        /// </summary>
        internal static string CRYPT_E_STREAM_INSUFFICIENT_DATA {
            get {
                return ResourceManager.GetString("CRYPT_E_STREAM_INSUFFICIENT_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The streamed cryptographic message is not ready to return data..
        /// </summary>
        internal static string CRYPT_E_STREAM_MSG_NOT_READY {
            get {
                return ResourceManager.GetString("CRYPT_E_STREAM_MSG_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected cryptographic message encoding..
        /// </summary>
        internal static string CRYPT_E_UNEXPECTED_ENCODING {
            get {
                return ResourceManager.GetString("CRYPT_E_UNEXPECTED_ENCODING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate does not have a property that references a private key..
        /// </summary>
        internal static string CRYPT_E_UNEXPECTED_MSG_TYPE {
            get {
                return ResourceManager.GetString("CRYPT_E_UNEXPECTED_MSG_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown cryptographic algorithm..
        /// </summary>
        internal static string CRYPT_E_UNKNOWN_ALGO {
            get {
                return ResourceManager.GetString("CRYPT_E_UNKNOWN_ALGO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since the server was offline, the called function was unable to complete the usage check..
        /// </summary>
        internal static string CRYPT_E_VERIFY_USAGE_OFFLINE {
            get {
                return ResourceManager.GetString("CRYPT_E_VERIFY_USAGE_OFFLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protected data needs to be re-protected..
        /// </summary>
        internal static string CRYPT_I_NEW_PROTECTION_REQUIRED {
            get {
                return ResourceManager.GetString("CRYPT_I_NEW_PROTECTION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of this object exceeds the maximum size set by the Administrator..
        /// </summary>
        internal static string CS_E_ADMIN_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("CS_E_ADMIN_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CLSID was not found in the software installation data in the Active Directory..
        /// </summary>
        internal static string CS_E_CLASS_NOTFOUND {
            get {
                return ResourceManager.GetString("CS_E_CLASS_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred in the software installation data in the Active Directory..
        /// </summary>
        internal static string CS_E_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("CS_E_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to the software installation data in the Active Directory is not correct..
        /// </summary>
        internal static string CS_E_INVALID_PATH {
            get {
                return ResourceManager.GetString("CS_E_INVALID_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The software installation data in the Active Directory is corrupt..
        /// </summary>
        internal static string CS_E_INVALID_VERSION {
            get {
                return ResourceManager.GetString("CS_E_INVALID_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A network error interrupted the operation..
        /// </summary>
        internal static string CS_E_NETWORK_ERROR {
            get {
                return ResourceManager.GetString("CS_E_NETWORK_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no software installation data in the Active Directory..
        /// </summary>
        internal static string CS_E_NO_CLASSSTORE {
            get {
                return ResourceManager.GetString("CS_E_NO_CLASSSTORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deleting this will break the referential integrity of the software installation data in the Active Directory..
        /// </summary>
        internal static string CS_E_NOT_DELETABLE {
            get {
                return ResourceManager.GetString("CS_E_NOT_DELETABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The software installation data object in the Active Directory already exists..
        /// </summary>
        internal static string CS_E_OBJECT_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("CS_E_OBJECT_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no software installation data object in the Active Directory..
        /// </summary>
        internal static string CS_E_OBJECT_NOTFOUND {
            get {
                return ResourceManager.GetString("CS_E_OBJECT_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No package in the software installation data in the Active Directory meets this criteria..
        /// </summary>
        internal static string CS_E_PACKAGE_NOTFOUND {
            get {
                return ResourceManager.GetString("CS_E_PACKAGE_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The schema for the software installation data in the Active Directory does not match the required schema..
        /// </summary>
        internal static string CS_E_SCHEMA_MISMATCH {
            get {
                return ResourceManager.GetString("CS_E_SCHEMA_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I/O error occurred..
        /// </summary>
        internal static string CTL_E_DEVICEIOERROR {
            get {
                return ResourceManager.GetString("CTL_E_DEVICEIOERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to divide by zero..
        /// </summary>
        internal static string CTL_E_DIVISIONBYZERO {
            get {
                return ResourceManager.GetString("CTL_E_DIVISIONBYZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find the specified file..
        /// </summary>
        internal static string CTL_E_FILENOTFOUND {
            get {
                return ResourceManager.GetString("CTL_E_FILENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient memory to continue the execution of the program..
        /// </summary>
        internal static string CTL_E_OUTOFMEMORY {
            get {
                return ResourceManager.GetString("CTL_E_OUTOFMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation caused a stack overflow..
        /// </summary>
        internal static string CTL_E_OUTOFSTACKSPACE {
            get {
                return ResourceManager.GetString("CTL_E_OUTOFSTACKSPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result is too large to be represented in function&apos;s return type..
        /// </summary>
        internal static string CTL_E_OVERFLOW {
            get {
                return ResourceManager.GetString("CTL_E_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to perform an unauthorized operation..
        /// </summary>
        internal static string CTL_E_PATHFILEACCESSERROR {
            get {
                return ResourceManager.GetString("CTL_E_PATHFILEACCESSERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to access a path that is not on the disk..
        /// </summary>
        internal static string CTL_E_PATHNOTFOUND {
            get {
                return ResourceManager.GetString("CTL_E_PATHNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Permission denied..
        /// </summary>
        internal static string CTL_E_PERMISSIONDENIED {
            get {
                return ResourceManager.GetString("CTL_E_PERMISSIONDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data has same FORMATETC.
        /// </summary>
        internal static string DATA_S_SAMEFORMATETC {
            get {
                return ResourceManager.GetString("DATA_S_SAMEFORMATETC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unspecified cryptographic failure..
        /// </summary>
        internal static string DIGSIG_E_CRYPTO {
            get {
                return ResourceManager.GetString("DIGSIG_E_CRYPTO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error due to problem in ASN.1 decoding process..
        /// </summary>
        internal static string DIGSIG_E_DECODE {
            get {
                return ResourceManager.GetString("DIGSIG_E_DECODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error due to problem in ASN.1 encoding process..
        /// </summary>
        internal static string DIGSIG_E_ENCODE {
            get {
                return ResourceManager.GetString("DIGSIG_E_ENCODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading / writing Extensions where Attributes are appropriate, and vice versa..
        /// </summary>
        internal static string DIGSIG_E_EXTENSIBILITY {
            get {
                return ResourceManager.GetString("DIGSIG_E_EXTENSIBILITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memory is locked..
        /// </summary>
        internal static string DISP_E_ARRAYISLOCKED {
            get {
                return ResourceManager.GetString("DISP_E_ARRAYISLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid callee..
        /// </summary>
        internal static string DISP_E_BADCALLEE {
            get {
                return ResourceManager.GetString("DISP_E_BADCALLEE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid index..
        /// </summary>
        internal static string DISP_E_BADINDEX {
            get {
                return ResourceManager.GetString("DISP_E_BADINDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid number of parameters..
        /// </summary>
        internal static string DISP_E_BADPARAMCOUNT {
            get {
                return ResourceManager.GetString("DISP_E_BADPARAMCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad variable type..
        /// </summary>
        internal static string DISP_E_BADVARTYPE {
            get {
                return ResourceManager.GetString("DISP_E_BADVARTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer too small.
        /// </summary>
        internal static string DISP_E_BUFFERTOOSMALL {
            get {
                return ResourceManager.GetString("DISP_E_BUFFERTOOSMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Division by zero..
        /// </summary>
        internal static string DISP_E_DIVBYZERO {
            get {
                return ResourceManager.GetString("DISP_E_DIVBYZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception occurred..
        /// </summary>
        internal static string DISP_E_EXCEPTION {
            get {
                return ResourceManager.GetString("DISP_E_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member not found..
        /// </summary>
        internal static string DISP_E_MEMBERNOTFOUND {
            get {
                return ResourceManager.GetString("DISP_E_MEMBERNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No named arguments..
        /// </summary>
        internal static string DISP_E_NONAMEDARGS {
            get {
                return ResourceManager.GetString("DISP_E_NONAMEDARGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Does not support a collection..
        /// </summary>
        internal static string DISP_E_NOTACOLLECTION {
            get {
                return ResourceManager.GetString("DISP_E_NOTACOLLECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Out of present range..
        /// </summary>
        internal static string DISP_E_OVERFLOW {
            get {
                return ResourceManager.GetString("DISP_E_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter not found..
        /// </summary>
        internal static string DISP_E_PARAMNOTFOUND {
            get {
                return ResourceManager.GetString("DISP_E_PARAMNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter not optional..
        /// </summary>
        internal static string DISP_E_PARAMNOTOPTIONAL {
            get {
                return ResourceManager.GetString("DISP_E_PARAMNOTOPTIONAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type mismatch..
        /// </summary>
        internal static string DISP_E_TYPEMISMATCH {
            get {
                return ResourceManager.GetString("DISP_E_TYPEMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown interface..
        /// </summary>
        internal static string DISP_E_UNKNOWNINTERFACE {
            get {
                return ResourceManager.GetString("DISP_E_UNKNOWNINTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown language..
        /// </summary>
        internal static string DISP_E_UNKNOWNLCID {
            get {
                return ResourceManager.GetString("DISP_E_UNKNOWNLCID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown name..
        /// </summary>
        internal static string DISP_E_UNKNOWNNAME {
            get {
                return ResourceManager.GetString("DISP_E_UNKNOWNNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This window has already been registered as a drop target.
        /// </summary>
        internal static string DRAGDROP_E_ALREADYREGISTERED {
            get {
                return ResourceManager.GetString("DRAGDROP_E_ALREADYREGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid window handle.
        /// </summary>
        internal static string DRAGDROP_E_INVALIDHWND {
            get {
                return ResourceManager.GetString("DRAGDROP_E_INVALIDHWND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trying to revoke a drop target that has not been registered.
        /// </summary>
        internal static string DRAGDROP_E_NOTREGISTERED {
            get {
                return ResourceManager.GetString("DRAGDROP_E_NOTREGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drag-drop operation canceled.
        /// </summary>
        internal static string DRAGDROP_S_CANCEL {
            get {
                return ResourceManager.GetString("DRAGDROP_S_CANCEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successful drop took place.
        /// </summary>
        internal static string DRAGDROP_S_DROP {
            get {
                return ResourceManager.GetString("DRAGDROP_S_DROP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the default cursor.
        /// </summary>
        internal static string DRAGDROP_S_USEDEFAULTCURSORS {
            get {
                return ResourceManager.GetString("DRAGDROP_S_USEDEFAULTCURSORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid clipboard format.
        /// </summary>
        internal static string DV_E_CLIPFORMAT {
            get {
                return ResourceManager.GetString("DV_E_CLIPFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid aspect(s).
        /// </summary>
        internal static string DV_E_DVASPECT {
            get {
                return ResourceManager.GetString("DV_E_DVASPECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid DVTARGETDEVICE structure.
        /// </summary>
        internal static string DV_E_DVTARGETDEVICE {
            get {
                return ResourceManager.GetString("DV_E_DVTARGETDEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tdSize parameter of the DVTARGETDEVICE structure is invalid.
        /// </summary>
        internal static string DV_E_DVTARGETDEVICE_SIZE {
            get {
                return ResourceManager.GetString("DV_E_DVTARGETDEVICE_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid FORMATETC structure.
        /// </summary>
        internal static string DV_E_FORMATETC {
            get {
                return ResourceManager.GetString("DV_E_FORMATETC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid lindex.
        /// </summary>
        internal static string DV_E_LINDEX {
            get {
                return ResourceManager.GetString("DV_E_LINDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object doesn&apos;t support IViewObject interface.
        /// </summary>
        internal static string DV_E_NOIVIEWOBJECT {
            get {
                return ResourceManager.GetString("DV_E_NOIVIEWOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid STATDATA structure.
        /// </summary>
        internal static string DV_E_STATDATA {
            get {
                return ResourceManager.GetString("DV_E_STATDATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid STDGMEDIUM structure.
        /// </summary>
        internal static string DV_E_STGMEDIUM {
            get {
                return ResourceManager.GetString("DV_E_STGMEDIUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid tymed.
        /// </summary>
        internal static string DV_E_TYMED {
            get {
                return ResourceManager.GetString("DV_E_TYMED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Desktop composition is disabled} The operation could not be completed because desktop composition is disabled..
        /// </summary>
        internal static string DWM_E_COMPOSITIONDISABLED {
            get {
                return ResourceManager.GetString("DWM_E_COMPOSITIONDISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No DWM redirection surface is available} The DWM was unable to provide a redirection surface to complete the DirectX present..
        /// </summary>
        internal static string DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE {
            get {
                return ResourceManager.GetString("DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {DWM is not queuing presents for the specified window} The window specified is not currently using queued presents..
        /// </summary>
        internal static string DWM_E_NOT_QUEUING_PRESENTS {
            get {
                return ResourceManager.GetString("DWM_E_NOT_QUEUING_PRESENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Some desktop composition APIs are not supported while remoting} The operation is not supported while running in a remote session..
        /// </summary>
        internal static string DWM_E_REMOTING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("DWM_E_REMOTING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen mode could not be achieved because the specified output was already in use..
        /// </summary>
        internal static string DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE {
            get {
                return ResourceManager.GetString("DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation aborted.
        /// </summary>
        internal static string E_ABORT {
            get {
                return ResourceManager.GetString("E_ABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied..
        /// </summary>
        internal static string E_ACCESSDENIED {
            get {
                return ResourceManager.GetString("E_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unspecified error.
        /// </summary>
        internal static string E_FAIL {
            get {
                return ResourceManager.GetString("E_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter is incorrect..
        /// </summary>
        internal static string E_INVALIDARG {
            get {
                return ResourceManager.GetString("E_INVALIDARG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No such interface supported.
        /// </summary>
        internal static string E_NOINTERFACE {
            get {
                return ResourceManager.GetString("E_NOINTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not implemented.
        /// </summary>
        internal static string E_NOTIMPL {
            get {
                return ResourceManager.GetString("E_NOTIMPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory resources are available to complete this operation..
        /// </summary>
        internal static string E_OUTOFMEMORY {
            get {
                return ResourceManager.GetString("E_OUTOFMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data necessary to complete this operation is not yet available..
        /// </summary>
        internal static string E_PENDING {
            get {
                return ResourceManager.GetString("E_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid pointer.
        /// </summary>
        internal static string E_POINTER {
            get {
                return ResourceManager.GetString("E_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catastrophic failure.
        /// </summary>
        internal static string E_UNEXPECTED {
            get {
                return ResourceManager.GetString("E_UNEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SID filtering operation removed all SIDs..
        /// </summary>
        internal static string ERROR_ALL_SIDS_FILTERED {
            get {
                return ResourceManager.GetString("ERROR_ALL_SIDS_FILTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified event is currently not being audited..
        /// </summary>
        internal static string ERROR_AUDITING_DISABLED {
            get {
                return ResourceManager.GetString("ERROR_AUDITING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %1 is not a valid Win32 application..
        /// </summary>
        internal static string ERROR_BAD_EXE_FORMAT {
            get {
                return ResourceManager.GetString("ERROR_BAD_EXE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network name cannot be found..
        /// </summary>
        internal static string ERROR_BAD_NET_NAME {
            get {
                return ResourceManager.GetString("ERROR_BAD_NET_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network path was not found..
        /// </summary>
        internal static string ERROR_BAD_NETPATH {
            get {
                return ResourceManager.GetString("ERROR_BAD_NETPATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Business rule scripts are disabled for the calling application..
        /// </summary>
        internal static string ERROR_BIZRULES_NOT_ENABLED {
            get {
                return ResourceManager.GetString("ERROR_BIZRULES_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested credential requires confirmation..
        /// </summary>
        internal static string ERROR_CRED_REQUIRES_CONFIRMATION {
            get {
                return ResourceManager.GetString("ERROR_CRED_REQUIRES_CONFIRMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The disk structure is corrupted and unreadable..
        /// </summary>
        internal static string ERROR_DISK_CORRUPT {
            get {
                return ResourceManager.GetString("ERROR_DISK_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not enough space on the disk..
        /// </summary>
        internal static string ERROR_DISK_FULL {
            get {
                return ResourceManager.GetString("ERROR_DISK_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A dynamic link library (DLL) initialization routine failed..
        /// </summary>
        internal static string ERROR_DLL_INIT_FAILED {
            get {
                return ResourceManager.GetString("ERROR_DLL_INIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system cannot run %1..
        /// </summary>
        internal static string ERROR_EXE_MARKED_INVALID {
            get {
                return ResourceManager.GetString("ERROR_EXE_MARKED_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file or directory is corrupted and unreadable..
        /// </summary>
        internal static string ERROR_FILE_CORRUPT {
            get {
                return ResourceManager.GetString("ERROR_FILE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume for a file has been externally altered so that the opened file is no longer valid..
        /// </summary>
        internal static string ERROR_FILE_INVALID {
            get {
                return ResourceManager.GetString("ERROR_FILE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified Transaction Context is already enlisted in a transaction.
        /// </summary>
        internal static string ERROR_FLT_ALREADY_ENLISTED {
            get {
                return ResourceManager.GetString("ERROR_FLT_ALREADY_ENLISTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback data queue has been disabled..
        /// </summary>
        internal static string ERROR_FLT_CBDQ_DISABLED {
            get {
                return ResourceManager.GetString("ERROR_FLT_CBDQ_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No registered context allocation definition was found for the given request..
        /// </summary>
        internal static string ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A context is already defined for this object..
        /// </summary>
        internal static string ERROR_FLT_CONTEXT_ALREADY_DEFINED {
            get {
                return ResourceManager.GetString("ERROR_FLT_CONTEXT_ALREADY_DEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified context is already attached to another object.
        /// </summary>
        internal static string ERROR_FLT_CONTEXT_ALREADY_LINKED {
            get {
                return ResourceManager.GetString("ERROR_FLT_CONTEXT_ALREADY_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object specified for this action is in the process of being deleted, therefore the action requested cannot be completed at this time..
        /// </summary>
        internal static string ERROR_FLT_DELETING_OBJECT {
            get {
                return ResourceManager.GetString("ERROR_FLT_DELETING_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disallow the Fast IO path for this operation..
        /// </summary>
        internal static string ERROR_FLT_DISALLOW_FAST_IO {
            get {
                return ResourceManager.GetString("ERROR_FLT_DISALLOW_FAST_IO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not attach the filter to the volume at this time..
        /// </summary>
        internal static string ERROR_FLT_DO_NOT_ATTACH {
            get {
                return ResourceManager.GetString("ERROR_FLT_DO_NOT_ATTACH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not detach the filter from the volume at this time..
        /// </summary>
        internal static string ERROR_FLT_DO_NOT_DETACH {
            get {
                return ResourceManager.GetString("ERROR_FLT_DO_NOT_DETACH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A duplicate handler definition has been provided for an operation..
        /// </summary>
        internal static string ERROR_FLT_DUPLICATE_ENTRY {
            get {
                return ResourceManager.GetString("ERROR_FLT_DUPLICATE_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not find the filter specified..
        /// </summary>
        internal static string ERROR_FLT_FILTER_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_FLT_FILTER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter is not ready for attachment to volumes because it has not finished initializing (FltStartFiltering has not been called)..
        /// </summary>
        internal static string ERROR_FLT_FILTER_NOT_READY {
            get {
                return ResourceManager.GetString("ERROR_FLT_FILTER_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance already exists at this altitude on the volume specified..
        /// </summary>
        internal static string ERROR_FLT_INSTANCE_ALTITUDE_COLLISION {
            get {
                return ResourceManager.GetString("ERROR_FLT_INSTANCE_ALTITUDE_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance already exists with this name on the volume specified..
        /// </summary>
        internal static string ERROR_FLT_INSTANCE_NAME_COLLISION {
            get {
                return ResourceManager.GetString("ERROR_FLT_INSTANCE_NAME_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not find the instance specified..
        /// </summary>
        internal static string ERROR_FLT_INSTANCE_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_FLT_INSTANCE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Filter Manager had an internal error from which it cannot recover, therefore the operation has been failed. This is usually the result of a filter returning an invalid value from a pre-operation callback..
        /// </summary>
        internal static string ERROR_FLT_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("ERROR_FLT_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous requests are not valid for this operation..
        /// </summary>
        internal static string ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST {
            get {
                return ResourceManager.GetString("ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was specified during context registration..
        /// </summary>
        internal static string ERROR_FLT_INVALID_CONTEXT_REGISTRATION {
            get {
                return ResourceManager.GetString("ERROR_FLT_INVALID_CONTEXT_REGISTRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid name request was made. The name requested cannot be retrieved at this time..
        /// </summary>
        internal static string ERROR_FLT_INVALID_NAME_REQUEST {
            get {
                return ResourceManager.GetString("ERROR_FLT_INVALID_NAME_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IO was completed by a filter..
        /// </summary>
        internal static string ERROR_FLT_IO_COMPLETE {
            get {
                return ResourceManager.GetString("ERROR_FLT_IO_COMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-paged pool must be used for this type of context..
        /// </summary>
        internal static string ERROR_FLT_MUST_BE_NONPAGED_POOL {
            get {
                return ResourceManager.GetString("ERROR_FLT_MUST_BE_NONPAGED_POOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name requested was not found in Filter Manager&apos;s name cache and could not be retrieved from the file system..
        /// </summary>
        internal static string ERROR_FLT_NAME_CACHE_MISS {
            get {
                return ResourceManager.GetString("ERROR_FLT_NAME_CACHE_MISS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested device object does not exist for the given volume..
        /// </summary>
        internal static string ERROR_FLT_NO_DEVICE_OBJECT {
            get {
                return ResourceManager.GetString("ERROR_FLT_NO_DEVICE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A handler was not defined by the filter for this operation..
        /// </summary>
        internal static string ERROR_FLT_NO_HANDLER_DEFINED {
            get {
                return ResourceManager.GetString("ERROR_FLT_NO_HANDLER_DEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No waiter is present for the filter&apos;s reply to this message..
        /// </summary>
        internal static string ERROR_FLT_NO_WAITER_FOR_REPLY {
            get {
                return ResourceManager.GetString("ERROR_FLT_NO_WAITER_FOR_REPLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Filter Manager was not initialized when a filter tried to register. Make sure that the Filter Manager is getting loaded as a driver..
        /// </summary>
        internal static string ERROR_FLT_NOT_INITIALIZED {
            get {
                return ResourceManager.GetString("ERROR_FLT_NOT_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Posting this operation to a worker thread for further processing is not safe at this time because it could lead to a system deadlock..
        /// </summary>
        internal static string ERROR_FLT_NOT_SAFE_TO_POST_OPERATION {
            get {
                return ResourceManager.GetString("ERROR_FLT_NOT_SAFE_TO_POST_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter must cleanup any operation specific context at this time because it is being removed from the system before the operation is completed by the lower drivers..
        /// </summary>
        internal static string ERROR_FLT_POST_OPERATION_CLEANUP {
            get {
                return ResourceManager.GetString("ERROR_FLT_POST_OPERATION_CLEANUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified volume is already mounted..
        /// </summary>
        internal static string ERROR_FLT_VOLUME_ALREADY_MOUNTED {
            get {
                return ResourceManager.GetString("ERROR_FLT_VOLUME_ALREADY_MOUNTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not find the volume specified..
        /// </summary>
        internal static string ERROR_FLT_VOLUME_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_FLT_VOLUME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation is being attempted that requires the display adapter to be in a quiescent state..
        /// </summary>
        internal static string ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chain of linked adapters is not ready to start because of an unknown failure..
        /// </summary>
        internal static string ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display adapter must have at least one video present source..
        /// </summary>
        internal static string ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display adapter must have at least one video present target..
        /// </summary>
        internal static string ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified display adapter and all of its state has been reset..
        /// </summary>
        internal static string ERROR_GRAPHICS_ADAPTER_WAS_RESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ADAPTER_WAS_RESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation is currently busy..
        /// </summary>
        internal static string ERROR_GRAPHICS_ALLOCATION_BUSY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ALLOCATION_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation being referenced has been closed permanently..
        /// </summary>
        internal static string ERROR_GRAPHICS_ALLOCATION_CLOSED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ALLOCATION_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified allocation lost its content..
        /// </summary>
        internal static string ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_ALLOCATION_INVALID {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ALLOCATION_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Miniport requested that augmentation be cancelled for the specified source of the specified VidPN&apos;s topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to present with color conversion.
        /// </summary>
        internal static string ERROR_GRAPHICS_CANNOTCOLORCONVERT {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CANNOTCOLORCONVERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN is active and cannot be accessed..
        /// </summary>
        internal static string ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request failed because a pinned allocation can&apos;t be evicted..
        /// </summary>
        internal static string ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t probe and lock the underlying memory of an allocation..
        /// </summary>
        internal static string ERROR_GRAPHICS_CANT_LOCK_MEMORY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CANT_LOCK_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A locked allocation can&apos;t be used in the current command buffer..
        /// </summary>
        internal static string ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some chain adapters in a linked configuration were not enumerated yet..
        /// </summary>
        internal static string ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to power up a lead link display adapter when the chain links were powered down..
        /// </summary>
        internal static string ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to start a lead link display adapter when the chain links were not started yet..
        /// </summary>
        internal static string ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified display adapter child device does not support descriptor exposure..
        /// </summary>
        internal static string ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client VidPN is not set on this adapter (e.g. no user mode initiated mode changes took place on this adapter yet)..
        /// </summary>
        internal static string ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver does not support COPP..
        /// </summary>
        internal static string ERROR_GRAPHICS_COPP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_COPP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified data set (e.g. mode set, frequency range set, descriptor set, topology, etc.) is empty..
        /// </summary>
        internal static string ERROR_GRAPHICS_DATASET_IS_EMPTY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DATASET_IS_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A continuous VCP code&apos;s current value is greater than its maximum value. This error code indicates that a monitor returned an invalid value..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data received from the monitor is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_INVALID_DATA {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred because the checksum field in a DDC/CI message did not match the message&apos;s computed checksum value. This error implies that the data was corrupted while it was being transmitted from a monitor to a computer..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation failed because a DDC/CI message had an invalid value in its command field..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred because the field length of a DDC/CI message contained an invalid value..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because a monitor returned an invalid Timing Status byte when the operating system used the DDC/CI Get Timing Report &amp; Timing Message command to get a timing report from a monitor..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor does not support the specified VCP code..
        /// </summary>
        internal static string ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We can depend on the child device presence returned by the driver..
        /// </summary>
        internal static string ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the specified GDI display device was not attached to the Windows desktop..
        /// </summary>
        internal static string ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The kernel driver detected a version mismatch between it and the user mode driver..
        /// </summary>
        internal static string ERROR_GRAPHICS_DRIVER_MISMATCH {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_DRIVER_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System failed to determine a mode that is supported by both the display adapter and the monitor connected to it..
        /// </summary>
        internal static string ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified frequency range is already in the specified monitor frequency range set..
        /// </summary>
        internal static string ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified frequency range is not in the specified monitor frequency range set..
        /// </summary>
        internal static string ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified gamma ramp is not supported on the respective VidPN present path..
        /// </summary>
        internal static string ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GPU exception is detected on the given device. The device is not able to be scheduled..
        /// </summary>
        internal static string ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No device on the I2C bus has the specified address..
        /// </summary>
        internal static string ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while receiving data from the device on the I2C bus..
        /// </summary>
        internal static string ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while transmitting data to the device on the I2C bus..
        /// </summary>
        internal static string ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor connected to the specified video output does not have an I2C bus..
        /// </summary>
        internal static string ERROR_GRAPHICS_I2C_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_I2C_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified primary surface has a different private format attribute than the current primary surface.
        /// </summary>
        internal static string ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The adapter link was found to be in an inconsistent state. Not all adapters are in an expected PNP/Power state..
        /// </summary>
        internal static string ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notifying indirect display UMDF class driver to abandon current swapchain..
        /// </summary>
        internal static string ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notifying indirect display UMDF class driver that indirect display device has been stopped..
        /// </summary>
        internal static string ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver needs more DMA buffer space in order to complete the requested operation..
        /// </summary>
        internal static string ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error caused an operation to fail..
        /// </summary>
        internal static string ERROR_GRAPHICS_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video signal active region is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_ACTIVE_REGION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_ACTIVE_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid allocation handle is being referenced..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid allocation instance is being referenced..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation can&apos;t be used from its current segment location for the specified operation..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified client type was not recognized..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_CLIENT_TYPE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_CLIENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified color basis is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_COLORBASIS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_COLORBASIS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN present path copy protection type is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified display adapter handle is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver stack doesn&apos;t match the expected driver model..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_DRIVER_MODEL {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_DRIVER_MODEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video signal frequency is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_FREQUENCY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_FREQUENCY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified gamma ramp is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_GAMMA_RAMP {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_GAMMA_RAMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified mode pruning algorithm is invalid.
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor capability origin is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor frequency range is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor frequency range constraint is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor frequency range set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor source mode is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor source mode set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor descriptor is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified monitor descriptor set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN present path content geometry transformation is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN present path content type is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN present path importance ordinal is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because an invalid monitor handle was passed to it..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified pixel format is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PIXELFORMAT {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PIXELFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified pixel value access mode is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because an invalid pointer parameter was passed to it. A pointer parameter is invalid if it is NULL, points to an invalid address, points to a kernel mode address, or is not correctly aligned..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_POINTER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified primary surface size is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified scanline ordering type is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified stride is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_STRIDE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_STRIDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video signal total region is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_TOTAL_REGION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_TOTAL_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present source is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present source mode is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present target is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present target mode is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present source set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present target set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN handle is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN present path is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN source mode set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present target subset type is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN target mode set is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN topology is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN topology recommendation reason is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified visible region size is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lead adapter in a linked configuration was not enumerated yet..
        /// </summary>
        internal static string ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting the leadlink adapter has been deferred temporarily..
        /// </summary>
        internal static string ERROR_GRAPHICS_LEADLINK_START_DEFERRED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_LEADLINK_START_DEFERRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum supported number of present paths has been reached..
        /// </summary>
        internal static string ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal Monitor Configuration API error occurred..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor returned a DDC/CI capabilities string which did not comply with the ACCESS.bus 3.0, DDC/CI 1.1, or MCCS 2 Revision 1 specification..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor returned an invalid monitor technology type. CRT, Plasma and LCD (TFT) are examples of monitor technology types. This error implies that the monitor violated the MCCS 2.0 or MCCS 2.0 Revision 1 specification..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor&apos;s VCP Version (0xDF) VCP code returned an invalid version value..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MCCS version in a monitor&apos;s mccs_ver capability does not match the MCCS version the monitor reports when the VCP Version (0xDF) VCP code is used..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor does not comply with the MCCS specification it claims to support..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SetMonitorColorTemperature()&apos;s caller passed a color temperature to it which the current monitor did not support. This error implies that the monitor violated the MCCS 2.0 or MCCS 2.0 Revision 1 specification..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Monitor Configuration API only works with monitors which support the MCCS 1.0 specification, MCCS 2.0 specification or the MCCS 2.0 Revision 1 specification..
        /// </summary>
        internal static string ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function does not support GDI mirroring display devices because GDI mirroring display devices do not have any physical monitors associated with them..
        /// </summary>
        internal static string ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified mode is already in the mode set..
        /// </summary>
        internal static string ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID of the specified mode is already used by another mode in the set..
        /// </summary>
        internal static string ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified mode is not in the specified mode set..
        /// </summary>
        internal static string ERROR_GRAPHICS_MODE_NOT_IN_MODESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MODE_NOT_IN_MODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mode is pinned on the specified VidPN source/target..
        /// </summary>
        internal static string ERROR_GRAPHICS_MODE_NOT_PINNED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MODE_NOT_PINNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Newly arrived monitor could not be associated with a display adapter..
        /// </summary>
        internal static string ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system asynchronously destroyed the monitor which corresponds to this handle because the operating system&apos;s state changed. This error typically occurs because the monitor PDO associated with this handle was removed, the monitor PDO associated with this handle was stopped, or a display mode change occurred. A display mode change occurs when windows sends a WM_DISPLAYCHANGE windows message to applications..
        /// </summary>
        internal static string ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no monitor connected on the specified video present target..
        /// </summary>
        internal static string ERROR_GRAPHICS_MONITOR_NOT_CONNECTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MONITOR_NOT_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified descriptor is already in the specified monitor descriptor set..
        /// </summary>
        internal static string ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID of the specified monitor descriptor is already used by another descriptor in the set..
        /// </summary>
        internal static string ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified descriptor is not in the specified monitor descriptor set..
        /// </summary>
        internal static string ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-sampling is not supported on the respective VidPN present path..
        /// </summary>
        internal static string ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VidPN manager of the display adapter in question does not have an active VidPN..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_ACTIVE_VIDPN {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_ACTIVE_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All available importance ordinals are already used in specified topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN source cannot be used because there is no available VidPN target to connect it to..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function cannot find an actual GDI display device which corresponds to the specified GDI display device name..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to acquire display mode management interface..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the specified GDI device did not have any monitors associated with it..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified data set (e.g. mode set, frequency range set, descriptor set, topology, etc.) does not contain any more elements..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified mode set does not specify preference for one of its modes..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_PREFERRED_MODE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_PREFERRED_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Miniport does not have any recommendation regarding the request to provide a functional VidPN given the current display adapter configuration..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Miniport has no recommendation for augmentation of the specified VidPN&apos;s topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough video memory available to complete the operation..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_VIDEO_MEMORY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_VIDEO_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display adapter in question does not have an associated VidPN manager..
        /// </summary>
        internal static string ERROR_GRAPHICS_NO_VIDPNMGR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NO_VIDPNMGR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter is not linked to any other adapters..
        /// </summary>
        internal static string ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exclusive mode ownership is needed to create unmanaged primary allocation..
        /// </summary>
        internal static string ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver trying to start is not the same as the driver for the POSTed display adapter..
        /// </summary>
        internal static string ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function can only be used if a program is running in the local console session. It cannot be used if the program is running on a remote desktop session or on a terminal server session..
        /// </summary>
        internal static string ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IOPMVideoOutput::Configure method cannot enable HDCP because the display adapter&apos;s HDCP hardware is already being used by other physical outputs..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method failed because an unexpected error occurred inside of a display driver..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IOPMVideoOutput::GetInformation method cannot return the version of the SRM being used because the application never successfully passed an SRM to the video output..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error caused this operation to fail..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IOPMVideoOutput::Configure function returns this error code if the passed in sequence number is not the expected sequence number or the passed in OMAC value is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified encrypted parameters are invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the caller passed in an invalid OPM user mode handle..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IOPMVideoOutput::GetInformation and IOPMVideoOutput::COPPCompatibleGetInformation methods return this error if the passed in sequence number is not the expected sequence number or the passed in OMAC value is invalid..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because an invalid pointer parameter was passed to it. A pointer parameter is invalid if it is null, it points to an invalid address, it points to a kernel mode address, or it is not correctly aligned..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INVALID_POINTER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INVALID_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HDCP System Renewability Message passed to this function did not comply with section 5 of the HDCP 1.1 specification..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_INVALID_SRM {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_INVALID_SRM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GDI display device passed to this function does not have any active video outputs..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver does not support OPM..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video output cannot enable Analogue Copy Protection (ACP) because it does not support ACP..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video output cannot enable the Content Generation Management System Analogue (CGMS-A) protection technology because it does not support CGMS-A..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video output cannot enable the High-bandwidth Digital Content Protection (HDCP) System because it does not support HDCP..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array passed to a function cannot hold all of the data that the function wants to put in it..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_PARAMETER_ARRAY_TOO_SMALL {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_PARAMETER_ARRAY_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IOPMVideoOutput::Configure method cannot enable the specified output protection technology because the output&apos;s screen resolution is too high..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system asynchronously destroyed this OPM video output because the operating system&apos;s state changed. This error typically occurs because the monitor PDO associated with this video output was removed, the monitor PDO associated with this video output was stopped, the video output&apos;s session became a non-console session or the video output&apos;s desktop became an inactive desktop..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IOPMVideoOutput::COPPCompatibleGetInformation or IOPMVideoOutput::Configure method failed because the display driver does not support the OPM_GET_ACP_AND_CGMSA_SIGNALING and OPM_SET_ACP_AND_CGMSA_SIGNALING GUIDs..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A video output could not be created because the frame buffer is in spanning mode..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A video output could not be created because the frame buffer is in theater mode..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either the IOPMVideoOutput::COPPCompatibleGetInformation, IOPMVideoOutput::GetInformation, or IOPMVideoOutput::Configure method failed. This error is returned when the caller tries to use a COPP specific command while the video output has OPM semantics only..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either the IOPMVideoOutput::COPPCompatibleGetInformation, IOPMVideoOutput::GetInformation, or IOPMVideoOutput::Configure method failed. This error is returned when the caller tries to use an OPM specific command while the video output has COPP semantics only..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system asynchronously destroyed this OPM video output because the operating system&apos;s state changed. This error typically occurs because the monitor physical device object (PDO) associated with this video output was removed, the monitor PDO associated with this video output was stopped, the video output&apos;s session became a nonconsole session or the video output&apos;s desktop became an inactive desktop..
        /// </summary>
        internal static string ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array passed to the function cannot hold all of the data that the function must copy into the array..
        /// </summary>
        internal static string ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified buffer is not big enough to contain entire requested dataset. Partial data populated up to the size of the buffer. Caller needs to provide buffer of size as specified in the partially populated buffer&apos;s content (interface specific)..
        /// </summary>
        internal static string ERROR_GRAPHICS_PARTIAL_DATA_POPULATED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PARTIAL_DATA_POPULATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present path is already in VidPN&apos;s topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified content transformation is not pinned on the specified VidPN present path..
        /// </summary>
        internal static string ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified content geometry transformation is not supported on the respective VidPN present path..
        /// </summary>
        internal static string ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified present path is not in VidPN&apos;s topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pinned mode must remain in the set on VidPN&apos;s cofunctional modality enumeration..
        /// </summary>
        internal static string ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Direct3D (D3D) device&apos;s GDI display device no longer exists, is not attached to the desktop, or is a mirroring display device..
        /// </summary>
        internal static string ERROR_GRAPHICS_PMEA_INVALID_D3D_DEVICE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PMEA_INVALID_D3D_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HMONITOR no longer exists, is not attached to the desktop, or corresponds to a mirroring device..
        /// </summary>
        internal static string ERROR_GRAPHICS_PMEA_INVALID_MONITOR {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PMEA_INVALID_MONITOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter is being polled for children too frequently at the same polling level..
        /// </summary>
        internal static string ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No buffer is bound to composition surface.
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to present due to denial of desktop access.
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_DENIED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Window handle is invalid.
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_INVALID_WINDOW {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_INVALID_WINDOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Present happened but ended up into the changed desktop mode.
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_MODE_CHANGED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_MODE_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing to present due to desktop occlusion.
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_OCCLUDED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_OCCLUDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Present redirection is disabled (desktop windowing management subsystem is off)..
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous exclusive VidPn source owner has released its ownership.
        /// </summary>
        internal static string ERROR_GRAPHICS_PRESENT_UNOCCLUDED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PRESENT_UNOCCLUDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because the GDI display device passed to it was not attached to the Windows desktop..
        /// </summary>
        internal static string ERROR_GRAPHICS_PVP_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PVP_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the display adapter&apos;s Hardware Functionality Scan failed to validate the graphics hardware..
        /// </summary>
        internal static string ERROR_GRAPHICS_PVP_HFS_FAILED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PVP_HFS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate could not be returned because the certificate buffer passed to the function was too small..
        /// </summary>
        internal static string ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVP does not support mirroring display devices because they do not have video outputs..
        /// </summary>
        internal static string ERROR_GRAPHICS_PVP_MIRRORING_DEVICES_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PVP_MIRRORING_DEVICES_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protected video path (PVP) cannot find an actual GDI display device that corresponds to the passed-in GDI display device name..
        /// </summary>
        internal static string ERROR_GRAPHICS_PVP_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PVP_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because the GDI device passed to it did not have any monitors associated with it..
        /// </summary>
        internal static string ERROR_GRAPHICS_PVP_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_PVP_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two or more of the specified resources are not related to each other, as defined by the interface semantics..
        /// </summary>
        internal static string ERROR_GRAPHICS_RESOURCES_NOT_RELATED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_RESOURCES_NOT_RELATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the current session is changing its type. This function cannot be called when the current session is changing its type. There are currently three types of sessions: console, disconnected and remote..
        /// </summary>
        internal static string ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip preparation of allocations referenced by the DMA buffer..
        /// </summary>
        internal static string ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present source is already in the video present source set..
        /// </summary>
        internal static string ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID of the specified video present source is already used by another source in the set..
        /// </summary>
        internal static string ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified source is not part of the specified VidPN&apos;s topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified display adapter child device already has an external device connected to it..
        /// </summary>
        internal static string ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified mode set is stale. Please reacquire the new mode set..
        /// </summary>
        internal static string ERROR_GRAPHICS_STALE_MODESET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_STALE_MODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN topology is stale. Please reacquire the new topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting the adapter has been deferred temporarily..
        /// </summary>
        internal static string ERROR_GRAPHICS_START_DEFERRED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_START_DEFERRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified video present target is already in the video present target set..
        /// </summary>
        internal static string ERROR_GRAPHICS_TARGET_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TARGET_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID of the specified video present target is already used by another target in the set..
        /// </summary>
        internal static string ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified target is not part of the specified VidPN&apos;s topology..
        /// </summary>
        internal static string ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object being referenced has reach the maximum reference count already and can&apos;t be reference further..
        /// </summary>
        internal static string ERROR_GRAPHICS_TOO_MANY_REFERENCES {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TOO_MANY_REFERENCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Topology changes are not allowed for the specified VidPN..
        /// </summary>
        internal static string ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem couldn&apos;t be solved due to some currently existing condition. The problem should be tried again later..
        /// </summary>
        internal static string ERROR_GRAPHICS_TRY_AGAIN_LATER {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TRY_AGAIN_LATER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem couldn&apos;t be solved due to some currently existing condition. The problem should be tried again immediately..
        /// </summary>
        internal static string ERROR_GRAPHICS_TRY_AGAIN_NOW {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_TRY_AGAIN_NOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver does not support UAB..
        /// </summary>
        internal static string ERROR_GRAPHICS_UAB_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_UAB_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more than one unassigned mode set can exist at any given time for a given VidPN source/target..
        /// </summary>
        internal static string ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Child device presence was not reliably detected..
        /// </summary>
        internal static string ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more unswizzling aperture are currently available..
        /// </summary>
        internal static string ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current allocation can&apos;t be unswizzled by an aperture..
        /// </summary>
        internal static string ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send Create Vail Super Wet Ink message..
        /// </summary>
        internal static string ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send Destroy Vail Super Wet Ink message..
        /// </summary>
        internal static string ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vail state has been changed.
        /// </summary>
        internal static string ERROR_GRAPHICS_VAIL_STATE_CHANGED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VAIL_STATE_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of video present targets must be greater than or equal to the number of video present sources..
        /// </summary>
        internal static string ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN modality is not supported (e.g. at least two of the pinned modes are not cofunctional)..
        /// </summary>
        internal static string ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN source is already owned by a DMM client and cannot be used until that client releases it..
        /// </summary>
        internal static string ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN topology is valid but is not supported by the display adapter at this time, due to current allocation of its resources..
        /// </summary>
        internal static string ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified VidPN topology is valid but is not supported by this model of the display adapter..
        /// </summary>
        internal static string ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Window DC is not available for presentation.
        /// </summary>
        internal static string ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windowless present is disabled (desktop windowing management subsystem is off)..
        /// </summary>
        internal static string ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation being referenced doesn&apos;t belong to the current device..
        /// </summary>
        internal static string ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE {
            get {
                return ResourceManager.GetString("ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Display Driver Stopped Responding} The %hs display driver has stopped working normally. Save your work and reboot the system to restore full display functionality. The next time you reboot the machine a dialog will be displayed giving you a chance to report this failure to Microsoft..
        /// </summary>
        internal static string ERROR_HUNG_DISPLAY_DRIVER_THREAD {
            get {
                return ResourceManager.GetString("ERROR_HUNG_DISPLAY_DRIVER_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filename, directory name, or volume label syntax is incorrect..
        /// </summary>
        internal static string ERROR_INVALID_NAME {
            get {
                return ResourceManager.GetString("ERROR_INVALID_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the file because another process has locked a portion of the file..
        /// </summary>
        internal static string ERROR_LOCK_VIOLATION {
            get {
                return ResourceManager.GetString("ERROR_LOCK_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified module could not be found..
        /// </summary>
        internal static string ERROR_MOD_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_MOD_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checksum of the obtained monitor descriptor is invalid..
        /// </summary>
        internal static string ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Monitor descriptor contains an invalid detailed timing block..
        /// </summary>
        internal static string ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provided monitor descriptor block is either corrupted or does not contain monitor&apos;s detailed serial number..
        /// </summary>
        internal static string ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Monitor descriptor contains an invalid standard timing block..
        /// </summary>
        internal static string ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provided monitor descriptor block is either corrupted or does not contain monitor&apos;s user friendly name..
        /// </summary>
        internal static string ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Monitor descriptor could not be obtained..
        /// </summary>
        internal static string ERROR_MONITOR_NO_DESCRIPTOR {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_NO_DESCRIPTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no monitor descriptor data at the specified (offset, size) region..
        /// </summary>
        internal static string ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Format of the obtained monitor descriptor is not supported by this release..
        /// </summary>
        internal static string ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WMI data block registration failed for one of the MSMonitorClass WMI subclasses..
        /// </summary>
        internal static string ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED {
            get {
                return ResourceManager.GetString("ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to find the network interface or network interface is not ready..
        /// </summary>
        internal static string ERROR_NDIS_ADAPTER_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_NDIS_ADAPTER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network interface is not ready to complete this operation..
        /// </summary>
        internal static string ERROR_NDIS_ADAPTER_NOT_READY {
            get {
                return ResourceManager.GetString("ERROR_NDIS_ADAPTER_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface has been removed..
        /// </summary>
        internal static string ERROR_NDIS_ADAPTER_REMOVED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_ADAPTER_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to map a file that is alreay mapped..
        /// </summary>
        internal static string ERROR_NDIS_ALREADY_MAPPED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_ALREADY_MAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid characteristics table was used..
        /// </summary>
        internal static string ERROR_NDIS_BAD_CHARACTERISTICS {
            get {
                return ResourceManager.GetString("ERROR_NDIS_BAD_CHARACTERISTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid version was specified..
        /// </summary>
        internal static string ERROR_NDIS_BAD_VERSION {
            get {
                return ResourceManager.GetString("ERROR_NDIS_BAD_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of buffer submitted for this operation is too small..
        /// </summary>
        internal static string ERROR_NDIS_BUFFER_TOO_SHORT {
            get {
                return ResourceManager.GetString("ERROR_NDIS_BUFFER_TOO_SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network interface has encountered an internal unrecoverable failure..
        /// </summary>
        internal static string ERROR_NDIS_DEVICE_FAILED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_DEVICE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wireless local area network interface is in auto configuration mode and doesn&apos;t support the requested parameter change operation..
        /// </summary>
        internal static string ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wireless local area network interface is busy and can not perform the requested operation..
        /// </summary>
        internal static string ERROR_NDIS_DOT11_MEDIA_IN_USE {
            get {
                return ResourceManager.GetString("ERROR_NDIS_DOT11_MEDIA_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wireless local area network interface is powered down and doesn&apos;t support the requested operation..
        /// </summary>
        internal static string ERROR_NDIS_DOT11_POWER_STATE_INVALID {
            get {
                return ResourceManager.GetString("ERROR_NDIS_DOT11_POWER_STATE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while NDIS tried to map the file..
        /// </summary>
        internal static string ERROR_NDIS_ERROR_READING_FILE {
            get {
                return ResourceManager.GetString("ERROR_NDIS_ERROR_READING_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to map a file that can not be found..
        /// </summary>
        internal static string ERROR_NDIS_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_NDIS_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to remove a token ring group address that is in use by other components..
        /// </summary>
        internal static string ERROR_NDIS_GROUP_ADDRESS_IN_USE {
            get {
                return ResourceManager.GetString("ERROR_NDIS_GROUP_ADDRESS_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request will be completed later by NDIS status indication..
        /// </summary>
        internal static string ERROR_NDIS_INDICATION_REQUIRED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INDICATION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding to the network interface is being closed..
        /// </summary>
        internal static string ERROR_NDIS_INTERFACE_CLOSING {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INTERFACE_CLOSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network interface was not found..
        /// </summary>
        internal static string ERROR_NDIS_INTERFACE_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INTERFACE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network address used in the request is invalid..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_ADDRESS {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data used for this operation is not valid..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_DATA {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified request is not a valid operation for the target device..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_DEVICE_REQUEST {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_DEVICE_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the buffer submitted for this operation is not valid..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_LENGTH {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network interface does not support this OID (Object Identifier).
        /// </summary>
        internal static string ERROR_NDIS_INVALID_OID {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_OID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to send an invalid packet on a network interface..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_PACKET {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_PACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port does not exist on this network interface..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_PORT {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_PORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current state of the specified port on this network interface does not support the requested operation..
        /// </summary>
        internal static string ERROR_NDIS_INVALID_PORT_STATE {
            get {
                return ResourceManager.GetString("ERROR_NDIS_INVALID_PORT_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I/O operation failed because network media is disconnected or wireless access point is out of range..
        /// </summary>
        internal static string ERROR_NDIS_MEDIA_DISCONNECTED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_MEDIA_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to add a duplicate multicast address to the list..
        /// </summary>
        internal static string ERROR_NDIS_MULTICAST_EXISTS {
            get {
                return ResourceManager.GetString("ERROR_NDIS_MULTICAST_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The multicast list on the network interface is full..
        /// </summary>
        internal static string ERROR_NDIS_MULTICAST_FULL {
            get {
                return ResourceManager.GetString("ERROR_NDIS_MULTICAST_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At attempt was made to remove a multicast address that was never added..
        /// </summary>
        internal static string ERROR_NDIS_MULTICAST_NOT_FOUND {
            get {
                return ResourceManager.GetString("ERROR_NDIS_MULTICAST_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netword interface does not support this request..
        /// </summary>
        internal static string ERROR_NDIS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to open the network interface..
        /// </summary>
        internal static string ERROR_NDIS_OPEN_FAILED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The offload operation on the network interface has been paused..
        /// </summary>
        internal static string ERROR_NDIS_PAUSED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netowork interface aborted the request..
        /// </summary>
        internal static string ERROR_NDIS_REQUEST_ABORTED {
            get {
                return ResourceManager.GetString("ERROR_NDIS_REQUEST_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network interface can not process the request because it is being reset..
        /// </summary>
        internal static string ERROR_NDIS_RESET_IN_PROGRESS {
            get {
                return ResourceManager.GetString("ERROR_NDIS_RESET_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to allocate a hardware resource failed because the resource is used by another component..
        /// </summary>
        internal static string ERROR_NDIS_RESOURCE_CONFLICT {
            get {
                return ResourceManager.GetString("ERROR_NDIS_RESOURCE_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network interface does not support this media type..
        /// </summary>
        internal static string ERROR_NDIS_UNSUPPORTED_MEDIA {
            get {
                return ResourceManager.GetString("ERROR_NDIS_UNSUPPORTED_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revision number specified in the structure is not supported..
        /// </summary>
        internal static string ERROR_NDIS_UNSUPPORTED_REVISION {
            get {
                return ResourceManager.GetString("ERROR_NDIS_UNSUPPORTED_REVISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is not ready..
        /// </summary>
        internal static string ERROR_NOT_READY {
            get {
                return ResourceManager.GetString("ERROR_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is not supported..
        /// </summary>
        internal static string ERROR_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("ERROR_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot open the device or file specified..
        /// </summary>
        internal static string ERROR_OPEN_FAILED {
            get {
                return ResourceManager.GetString("ERROR_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the file because it is being used by another process..
        /// </summary>
        internal static string ERROR_SHARING_VIOLATION {
            get {
                return ResourceManager.GetString("ERROR_SHARING_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot open the file..
        /// </summary>
        internal static string ERROR_TOO_MANY_OPEN_FILES {
            get {
                return ResourceManager.GetString("ERROR_TOO_MANY_OPEN_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume does not contain a recognized file system. Please make sure that all required file system drivers are loaded and that the volume is not corrupted..
        /// </summary>
        internal static string ERROR_UNRECOGNIZED_VOLUME {
            get {
                return ResourceManager.GetString("ERROR_UNRECOGNIZED_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target account name is incorrect..
        /// </summary>
        internal static string ERROR_WRONG_TARGET_NAME {
            get {
                return ResourceManager.GetString("ERROR_WRONG_TARGET_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An event was unable to invoke any of the subscribers.
        /// </summary>
        internal static string EVENT_E_ALL_SUBSCRIBERS_FAILED {
            get {
                return ResourceManager.GetString("EVENT_E_ALL_SUBSCRIBERS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify or delete an object that was added using the COM+ Admin SDK.
        /// </summary>
        internal static string EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT {
            get {
                return ResourceManager.GetString("EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify or delete an object that was not added using the COM+ Admin SDK.
        /// </summary>
        internal static string EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT {
            get {
                return ResourceManager.GetString("EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COM+ is required for this operation, but is not installed.
        /// </summary>
        internal static string EVENT_E_COMPLUS_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("EVENT_E_COMPLUS_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected internal error was detected.
        /// </summary>
        internal static string EVENT_E_INTERNALERROR {
            get {
                return ResourceManager.GetString("EVENT_E_INTERNALERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected exception was raised.
        /// </summary>
        internal static string EVENT_E_INTERNALEXCEPTION {
            get {
                return ResourceManager.GetString("EVENT_E_INTERNALEXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event class for this subscription is in an invalid partition.
        /// </summary>
        internal static string EVENT_E_INVALID_EVENT_CLASS_PARTITION {
            get {
                return ResourceManager.GetString("EVENT_E_INVALID_EVENT_CLASS_PARTITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The owner SID on a per-user subscription doesn&apos;t exist.
        /// </summary>
        internal static string EVENT_E_INVALID_PER_USER_SID {
            get {
                return ResourceManager.GetString("EVENT_E_INVALID_PER_USER_SID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A subscription cannot be stored unless its event class already exists.
        /// </summary>
        internal static string EVENT_E_MISSING_EVENTCLASS {
            get {
                return ResourceManager.GetString("EVENT_E_MISSING_EVENTCLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all the objects requested could be removed.
        /// </summary>
        internal static string EVENT_E_NOT_ALL_REMOVED {
            get {
                return ResourceManager.GetString("EVENT_E_NOT_ALL_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The owner of the PerUser subscription is not logged on to the system specified.
        /// </summary>
        internal static string EVENT_E_PER_USER_SID_NOT_LOGGED_ON {
            get {
                return ResourceManager.GetString("EVENT_E_PER_USER_SID_NOT_LOGGED_ON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid field name was used in a query string.
        /// </summary>
        internal static string EVENT_E_QUERYFIELD {
            get {
                return ResourceManager.GetString("EVENT_E_QUERYFIELD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A syntax error occurred trying to evaluate a query string.
        /// </summary>
        internal static string EVENT_E_QUERYSYNTAX {
            get {
                return ResourceManager.GetString("EVENT_E_QUERYSYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interface has too many methods to fire events from.
        /// </summary>
        internal static string EVENT_E_TOO_MANY_METHODS {
            get {
                return ResourceManager.GetString("EVENT_E_TOO_MANY_METHODS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A user-supplied component or subscriber raised an exception.
        /// </summary>
        internal static string EVENT_E_USER_EXCEPTION {
            get {
                return ResourceManager.GetString("EVENT_E_USER_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An event was delivered but there were no subscribers.
        /// </summary>
        internal static string EVENT_S_NOSUBSCRIBERS {
            get {
                return ResourceManager.GetString("EVENT_S_NOSUBSCRIBERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An event was able to invoke some but not all of the subscribers.
        /// </summary>
        internal static string EVENT_S_SOME_SUBSCRIBERS_FAILED {
            get {
                return ResourceManager.GetString("EVENT_S_SOME_SUBSCRIBERS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested assembly version conflicts with what is already bound in the app domain or specified in the manifest..
        /// </summary>
        internal static string FUSION_E_APP_DOMAIN_LOCKED {
            get {
                return ResourceManager.GetString("FUSION_E_APP_DOMAIN_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A module specified in the manifest was not found..
        /// </summary>
        internal static string FUSION_E_ASM_MODULE_MISSING {
            get {
                return ResourceManager.GetString("FUSION_E_ASM_MODULE_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to add file to AppDomain cache..
        /// </summary>
        internal static string FUSION_E_CACHEFILE_FAILED {
            get {
                return ResourceManager.GetString("FUSION_E_CACHEFILE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP download of assemblies has been disabled for this appdomain..
        /// </summary>
        internal static string FUSION_E_CODE_DOWNLOAD_DISABLED {
            get {
                return ResourceManager.GetString("FUSION_E_CODE_DOWNLOAD_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested assembly name was neither found in the GAC nor in the manifest or the manifest&apos;s specified location is wrong..
        /// </summary>
        internal static string FUSION_E_CONFIGURATION_ERROR {
            get {
                return ResourceManager.GetString("FUSION_E_CONFIGURATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly in host store has a different signature than assembly in GAC..
        /// </summary>
        internal static string FUSION_E_HOST_GAC_ASM_MISMATCH {
            get {
                return ResourceManager.GetString("FUSION_E_HOST_GAC_ASM_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given assembly name was invalid..
        /// </summary>
        internal static string FUSION_E_INVALID_NAME {
            get {
                return ResourceManager.GetString("FUSION_E_INVALID_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The private assembly was located outside the appbase directory..
        /// </summary>
        internal static string FUSION_E_INVALID_PRIVATE_ASM_LOCATION {
            get {
                return ResourceManager.GetString("FUSION_E_INVALID_PRIVATE_ASM_LOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LoadFrom(), LoadFile(), Load(byte[]) and LoadModule() have been disabled by the host..
        /// </summary>
        internal static string FUSION_E_LOADFROM_BLOCKED {
            get {
                return ResourceManager.GetString("FUSION_E_LOADFROM_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected error while parsing the specified manifest..
        /// </summary>
        internal static string FUSION_E_MANIFEST_PARSE_ERROR {
            get {
                return ResourceManager.GetString("FUSION_E_MANIFEST_PARSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A strongly-named assembly is required..
        /// </summary>
        internal static string FUSION_E_PRIVATE_ASM_DISALLOWED {
            get {
                return ResourceManager.GetString("FUSION_E_PRIVATE_ASM_DISALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The located assembly&apos;s manifest definition does not match the assembly reference..
        /// </summary>
        internal static string FUSION_E_REF_DEF_MISMATCH {
            get {
                return ResourceManager.GetString("FUSION_E_REF_DEF_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strong name signature could not be verified. The assembly may have been tampered with, or it was delay signed but not fully signed with the correct private key..
        /// </summary>
        internal static string FUSION_E_SIGNATURE_CHECK_FAILED {
            get {
                return ResourceManager.GetString("FUSION_E_SIGNATURE_CHECK_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption cannot perform the requested action. This condition may occur when two requests are issued at the same time. Wait a few moments and then try the action again..
        /// </summary>
        internal static string FVE_E_ACTION_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("FVE_E_ACTION_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute was not set. Verify that you are logged on with a domain account that has the ability to write information to Active Directory objects..
        /// </summary>
        internal static string FVE_E_AD_ATTR_NOT_SET {
            get {
                return ResourceManager.GetString("FVE_E_AD_ATTR_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified attribute cannot be found in Active Directory Domain Services. Contact your domain administrator to verify that any required BitLocker Active Directory schema extensions have been installed..
        /// </summary>
        internal static string FVE_E_AD_GUID_NOT_FOUND {
            get {
                return ResourceManager.GetString("FVE_E_AD_GUID_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer supplied to a function was insufficient to contain the returned data. Increase the buffer size before running the function again..
        /// </summary>
        internal static string FVE_E_AD_INSUFFICIENT_BUFFER {
            get {
                return ResourceManager.GetString("FVE_E_AD_INSUFFICIENT_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the data obtained from Active Directory was not expected. The BitLocker recovery information may be missing or corrupted..
        /// </summary>
        internal static string FVE_E_AD_INVALID_DATASIZE {
            get {
                return ResourceManager.GetString("FVE_E_AD_INVALID_DATASIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the data obtained from Active Directory was not expected. The BitLocker recovery information may be missing or corrupted..
        /// </summary>
        internal static string FVE_E_AD_INVALID_DATATYPE {
            get {
                return ResourceManager.GetString("FVE_E_AD_INVALID_DATATYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute read from Active Directory does not contain any values. The BitLocker recovery information may be missing or corrupted..
        /// </summary>
        internal static string FVE_E_AD_NO_VALUES {
            get {
                return ResourceManager.GetString("FVE_E_AD_NO_VALUES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Active Directory Domain Services forest does not contain the required attributes and classes to host BitLocker Drive Encryption or Trusted Platform Module information. Contact your domain administrator to verify that any required BitLocker Active Directory schema extensions have been installed..
        /// </summary>
        internal static string FVE_E_AD_SCHEMA_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("FVE_E_AD_SCHEMA_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption cannot be turned off on the operating system drive until the auto unlock feature has been disabled for the fixed data drives and removable data drives associated with this computer..
        /// </summary>
        internal static string FVE_E_AUTOUNLOCK_ENABLED {
            get {
                return ResourceManager.GetString("FVE_E_AUTOUNLOCK_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data is not valid..
        /// </summary>
        internal static string FVE_E_BAD_DATA {
            get {
                return ResourceManager.GetString("FVE_E_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker metadata for the encrypted drive is not valid. You can attempt to repair the drive to restore access..
        /// </summary>
        internal static string FVE_E_BAD_INFORMATION {
            get {
                return ResourceManager.GetString("FVE_E_BAD_INFORMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption detected bootable media (CD or DVD) in the computer. Remove the media and restart the computer before configuring BitLocker..
        /// </summary>
        internal static string FVE_E_BOOTABLE_CDDVD {
            get {
                return ResourceManager.GetString("FVE_E_BOOTABLE_CDDVD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption cannot encrypt the specified drive because an encryption key is not available. Add a key protector to encrypt this drive..
        /// </summary>
        internal static string FVE_E_CANNOT_ENCRYPT_NO_KEY {
            get {
                return ResourceManager.GetString("FVE_E_CANNOT_ENCRYPT_NO_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive encryption algorithm and key cannot be set on a previously encrypted drive. To encrypt this drive with BitLocker Drive Encryption, remove the previous encryption and then turn on BitLocker..
        /// </summary>
        internal static string FVE_E_CANNOT_SET_FVEK_ENCRYPTED {
            get {
                return ResourceManager.GetString("FVE_E_CANNOT_SET_FVEK_ENCRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cluster configurations are not supported by BitLocker Drive Encryption..
        /// </summary>
        internal static string FVE_E_CLUSTERING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("FVE_E_CLUSTERING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A read operation failed while converting the drive. The drive was not converted. Please re-enable BitLocker..
        /// </summary>
        internal static string FVE_E_CONV_READ {
            get {
                return ResourceManager.GetString("FVE_E_CONV_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A write operation failed while converting the drive. The drive was not converted. Please re-enable BitLocker..
        /// </summary>
        internal static string FVE_E_CONV_WRITE {
            get {
                return ResourceManager.GetString("FVE_E_CONV_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive cannot be unlocked with the key provided. Confirm that you have provided the correct key and try again..
        /// </summary>
        internal static string FVE_E_FAILED_AUTHENTICATION {
            get {
                return ResourceManager.GetString("FVE_E_FAILED_AUTHENTICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file system size is larger than the partition size in the partition table. This drive may be corrupt or may have been tampered with. To use it with BitLocker, you must reformat the partition..
        /// </summary>
        internal static string FVE_E_FAILED_BAD_FS {
            get {
                return ResourceManager.GetString("FVE_E_FAILED_BAD_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive encryption algorithm cannot be used on this sector size..
        /// </summary>
        internal static string FVE_E_FAILED_SECTOR_SIZE {
            get {
                return ResourceManager.GetString("FVE_E_FAILED_SECTOR_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive cannot be encrypted because the file system is not supported..
        /// </summary>
        internal static string FVE_E_FAILED_WRONG_FS {
            get {
                return ResourceManager.GetString("FVE_E_FAILED_WRONG_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker cannot use the Trusted Platform Module (TPM) to protect a data drive. TPM protection can only be used with the operating system drive..
        /// </summary>
        internal static string FVE_E_FOREIGN_VOLUME {
            get {
                return ResourceManager.GetString("FVE_E_FOREIGN_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more BitLocker key protectors are required. You cannot delete the last key on this drive..
        /// </summary>
        internal static string FVE_E_KEY_REQUIRED {
            get {
                return ResourceManager.GetString("FVE_E_KEY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This drive is locked by BitLocker Drive Encryption. You must unlock this drive from Control Panel..
        /// </summary>
        internal static string FVE_E_LOCKED_VOLUME {
            get {
                return ResourceManager.GetString("FVE_E_LOCKED_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The boot sector of this drive is not compatible with BitLocker Drive Encryption. Use the Bootrec.exe tool in the Windows Recovery Environment to update or repair the boot manager (BOOTMGR)..
        /// </summary>
        internal static string FVE_E_NO_BOOTMGR_METRIC {
            get {
                return ResourceManager.GetString("FVE_E_NO_BOOTMGR_METRIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required TPM measurement is missing. If there is a bootable CD or DVD in your computer, remove it, restart the computer, and turn on BitLocker again. If the problem persists, ensure the master boot record is up to date..
        /// </summary>
        internal static string FVE_E_NO_BOOTSECTOR_METRIC {
            get {
                return ResourceManager.GetString("FVE_E_NO_BOOTSECTOR_METRIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BIOS did not correctly communicate with the master boot record (MBR). Contact the computer manufacturer for BIOS upgrade instructions..
        /// </summary>
        internal static string FVE_E_NO_MBR_METRIC {
            get {
                return ResourceManager.GetString("FVE_E_NO_MBR_METRIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BIOS did not correctly communicate with the Trusted Platform Module (TPM). Contact the computer manufacturer for BIOS upgrade instructions..
        /// </summary>
        internal static string FVE_E_NO_TPM_BIOS {
            get {
                return ResourceManager.GetString("FVE_E_NO_TPM_BIOS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption is not enabled on this drive. Turn on BitLocker..
        /// </summary>
        internal static string FVE_E_NOT_ACTIVATED {
            get {
                return ResourceManager.GetString("FVE_E_NOT_ACTIVATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation attempted cannot be performed on an operating system drive..
        /// </summary>
        internal static string FVE_E_NOT_DATA_VOLUME {
            get {
                return ResourceManager.GetString("FVE_E_NOT_DATA_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This drive is not encrypted..
        /// </summary>
        internal static string FVE_E_NOT_ENCRYPTED {
            get {
                return ResourceManager.GetString("FVE_E_NOT_ENCRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive specified is not the operating system drive..
        /// </summary>
        internal static string FVE_E_NOT_OS_VOLUME {
            get {
                return ResourceManager.GetString("FVE_E_NOT_OS_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This drive cannot be encrypted..
        /// </summary>
        internal static string FVE_E_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("FVE_E_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system drive is not protected by BitLocker Drive Encryption..
        /// </summary>
        internal static string FVE_E_OS_NOT_PROTECTED {
            get {
                return ResourceManager.GetString("FVE_E_OS_NOT_PROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker metadata for the encrypted drive cannot be updated because it was locked for updating by another process. Please try this process again..
        /// </summary>
        internal static string FVE_E_OVERLAPPED_UPDATE {
            get {
                return ResourceManager.GetString("FVE_E_OVERLAPPED_UPDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group Policy settings require that a recovery password be specified before encrypting the drive..
        /// </summary>
        internal static string FVE_E_POLICY_PASSWORD_REQUIRED {
            get {
                return ResourceManager.GetString("FVE_E_POLICY_PASSWORD_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption has been suspended on this drive. All BitLocker key protectors configured for this drive are effectively disabled, and the drive will be automatically unlocked using an unencrypted (clear) key..
        /// </summary>
        internal static string FVE_E_PROTECTION_DISABLED {
            get {
                return ResourceManager.GetString("FVE_E_PROTECTION_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This key protector cannot be added. Only one key protector of this type is allowed for this drive..
        /// </summary>
        internal static string FVE_E_PROTECTOR_EXISTS {
            get {
                return ResourceManager.GetString("FVE_E_PROTECTOR_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive you are attempting to lock does not have any key protectors available for encryption because BitLocker protection is currently suspended. Re-enable BitLocker to lock this drive..
        /// </summary>
        internal static string FVE_E_RECOVERY_KEY_REQUIRED {
            get {
                return ResourceManager.GetString("FVE_E_RECOVERY_KEY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recovery password file was not found because a relative path was specified. Recovery passwords must be saved to a fully qualified path. Environment variables configured on the computer can be used in the path..
        /// </summary>
        internal static string FVE_E_RELATIVE_PATH {
            get {
                return ResourceManager.GetString("FVE_E_RELATIVE_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one secure key protector is required for this operation to be performed..
        /// </summary>
        internal static string FVE_E_SECURE_KEY_REQUIRED {
            get {
                return ResourceManager.GetString("FVE_E_SECURE_KEY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive cannot be encrypted because it contains system boot information. Create a separate partition for use as the system drive that contains the boot information and a second partition for use as the operating system drive and then encrypt the operating system drive..
        /// </summary>
        internal static string FVE_E_SYSTEM_VOLUME {
            get {
                return ResourceManager.GetString("FVE_E_SYSTEM_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive cannot be encrypted because it does not have enough free space. Delete any unnecessary data on the drive to create additional free space and then try again..
        /// </summary>
        internal static string FVE_E_TOO_SMALL {
            get {
                return ResourceManager.GetString("FVE_E_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must initialize the Trusted Platform Module (TPM) before you can use BitLocker Drive Encryption..
        /// </summary>
        internal static string FVE_E_TPM_NOT_OWNED {
            get {
                return ResourceManager.GetString("FVE_E_TPM_NOT_OWNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authorization data for the storage root key (SRK) of the Trusted Platform Module (TPM) is not zero and is therefore incompatible with BitLocker. Please initialize the TPM before attempting to use it with BitLocker..
        /// </summary>
        internal static string FVE_E_TPM_SRK_AUTH_NOT_ZERO {
            get {
                return ResourceManager.GetString("FVE_E_TPM_SRK_AUTH_NOT_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive specified is already configured to be automatically unlocked on the current computer..
        /// </summary>
        internal static string FVE_E_VOLUME_BOUND_ALREADY {
            get {
                return ResourceManager.GetString("FVE_E_VOLUME_BOUND_ALREADY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data drive specified is not set to automatically unlock on the current computer and cannot be unlocked automatically..
        /// </summary>
        internal static string FVE_E_VOLUME_NOT_BOUND {
            get {
                return ResourceManager.GetString("FVE_E_VOLUME_NOT_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The boot manager of this operating system is not compatible with BitLocker Drive Encryption. Use the Bootrec.exe tool in the Windows Recovery Environment to update or repair the boot manager (BOOTMGR)..
        /// </summary>
        internal static string FVE_E_WRONG_BOOTMGR {
            get {
                return ResourceManager.GetString("FVE_E_WRONG_BOOTMGR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system partition boot sector does not perform Trusted Platform Module (TPM) measurements. Use the Bootrec.exe tool in the Windows Recovery Environment to update or repair the boot sector..
        /// </summary>
        internal static string FVE_E_WRONG_BOOTSECTOR {
            get {
                return ResourceManager.GetString("FVE_E_WRONG_BOOTSECTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption operating system drives must be formatted with the NTFS file system in order to be encrypted. Convert the drive to NTFS, and then turn on BitLocker..
        /// </summary>
        internal static string FVE_E_WRONG_SYSTEM_FS {
            get {
                return ResourceManager.GetString("FVE_E_WRONG_SYSTEM_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action type is not compatible with the layer..
        /// </summary>
        internal static string FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER {
            get {
                return ResourceManager.GetString("FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action type is not compatible with the sublayer..
        /// </summary>
        internal static string FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER {
            get {
                return ResourceManager.GetString("FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object with that GUID or LUID already exists..
        /// </summary>
        internal static string FWP_E_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("FWP_E_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is built in so cannot be deleted..
        /// </summary>
        internal static string FWP_E_BUILTIN_OBJECT {
            get {
                return ResourceManager.GetString("FWP_E_BUILTIN_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callout does not exist..
        /// </summary>
        internal static string FWP_E_CALLOUT_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_CALLOUT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The notification function for a callout returned an error..
        /// </summary>
        internal static string FWP_E_CALLOUT_NOTIFICATION_FAILED {
            get {
                return ResourceManager.GetString("FWP_E_CALLOUT_NOTIFICATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter condition does not exist..
        /// </summary>
        internal static string FWP_E_CONDITION_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_CONDITION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The raw context or the provider context is not compatible with the callout..
        /// </summary>
        internal static string FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT {
            get {
                return ResourceManager.GetString("FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The raw context or the provider context is not compatible with the layer..
        /// </summary>
        internal static string FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER {
            get {
                return ResourceManager.GetString("FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A filter cannot contain multiple conditions operating on a single field..
        /// </summary>
        internal static string FWP_E_DUPLICATE_CONDITION {
            get {
                return ResourceManager.GetString("FWP_E_DUPLICATE_CONDITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy cannot contain the same keying module more than once..
        /// </summary>
        internal static string FWP_E_DUPLICATE_KEYMOD {
            get {
                return ResourceManager.GetString("FWP_E_DUPLICATE_KEYMOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed from within a dynamic session..
        /// </summary>
        internal static string FWP_E_DYNAMIC_SESSION_IN_PROGRESS {
            get {
                return ResourceManager.GetString("FWP_E_DYNAMIC_SESSION_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IKE policy cannot contain an Extended Mode policy..
        /// </summary>
        internal static string FWP_E_EM_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("FWP_E_EM_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter does not exist..
        /// </summary>
        internal static string FWP_E_FILTER_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_FILTER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is referenced by other objects so cannot be deleted..
        /// </summary>
        internal static string FWP_E_IN_USE {
            get {
                return ResourceManager.GetString("FWP_E_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec authentication transform is not valid..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_AUTH_CONFIG {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_AUTH_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication method is not compatible with the policy type..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_AUTH_METHOD {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_AUTH_METHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec cipher transform is not valid..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_CIPHER_CONFIG {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_CIPHER_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Diffie-Hellman group is not compatible with the policy type..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_DH_GROUP {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_DH_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not supported by the specified layer..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_LAYER {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_LAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed for the current security association state..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_SA_STATE {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_SA_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed from within a read-only transaction..
        /// </summary>
        internal static string FWP_E_INCOMPATIBLE_TXN {
            get {
                return ResourceManager.GetString("FWP_E_INCOMPATIBLE_TXN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action type is not one of the allowed action types for a filter..
        /// </summary>
        internal static string FWP_E_INVALID_ACTION_TYPE {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_ACTION_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An enumerator is not valid..
        /// </summary>
        internal static string FWP_E_INVALID_ENUMERATOR {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_ENUMERATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The flags field contains an invalid value..
        /// </summary>
        internal static string FWP_E_INVALID_FLAGS {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval is not valid..
        /// </summary>
        internal static string FWP_E_INVALID_INTERVAL {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_INTERVAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A network mask is not valid..
        /// </summary>
        internal static string FWP_E_INVALID_NET_MASK {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_NET_MASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter is incorrect..
        /// </summary>
        internal static string FWP_E_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An FWP_RANGE is not valid..
        /// </summary>
        internal static string FWP_E_INVALID_RANGE {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter weight is not valid..
        /// </summary>
        internal static string FWP_E_INVALID_WEIGHT {
            get {
                return ResourceManager.GetString("FWP_E_INVALID_WEIGHT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is allowed for kernel-mode callers only..
        /// </summary>
        internal static string FWP_E_KM_CLIENTS_ONLY {
            get {
                return ResourceManager.GetString("FWP_E_KM_CLIENTS_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The layer does not exist..
        /// </summary>
        internal static string FWP_E_LAYER_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_LAYER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call tried to associate two objects with incompatible lifetimes..
        /// </summary>
        internal static string FWP_E_LIFETIME_MISMATCH {
            get {
                return ResourceManager.GetString("FWP_E_LIFETIME_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A filter condition contains a match type that is not compatible with the operands..
        /// </summary>
        internal static string FWP_E_MATCH_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("FWP_E_MATCH_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection of network diagnostic events is disabled..
        /// </summary>
        internal static string FWP_E_NET_EVENTS_DISABLED {
            get {
                return ResourceManager.GetString("FWP_E_NET_EVENTS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumeration template or subscription will never match any objects..
        /// </summary>
        internal static string FWP_E_NEVER_MATCH {
            get {
                return ResourceManager.GetString("FWP_E_NEVER_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call must be made from within an explicit transaction..
        /// </summary>
        internal static string FWP_E_NO_TXN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("FWP_E_NO_TXN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object does not exist..
        /// </summary>
        internal static string FWP_E_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A notification could not be delivered because a message queue is at its maximum capacity..
        /// </summary>
        internal static string FWP_E_NOTIFICATION_DROPPED {
            get {
                return ResourceManager.GetString("FWP_E_NOTIFICATION_DROPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The displayData.name field cannot be null..
        /// </summary>
        internal static string FWP_E_NULL_DISPLAY_NAME {
            get {
                return ResourceManager.GetString("FWP_E_NULL_DISPLAY_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required pointer is null..
        /// </summary>
        internal static string FWP_E_NULL_POINTER {
            get {
                return ResourceManager.GetString("FWP_E_NULL_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An integer value is outside the allowed range..
        /// </summary>
        internal static string FWP_E_OUT_OF_BOUNDS {
            get {
                return ResourceManager.GetString("FWP_E_OUT_OF_BOUNDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider context is of the wrong type..
        /// </summary>
        internal static string FWP_E_PROVIDER_CONTEXT_MISMATCH {
            get {
                return ResourceManager.GetString("FWP_E_PROVIDER_CONTEXT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider context does not exist..
        /// </summary>
        internal static string FWP_E_PROVIDER_CONTEXT_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_PROVIDER_CONTEXT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider does not exist..
        /// </summary>
        internal static string FWP_E_PROVIDER_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_PROVIDER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reserved field is non-zero..
        /// </summary>
        internal static string FWP_E_RESERVED {
            get {
                return ResourceManager.GetString("FWP_E_RESERVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session has been cancelled..
        /// </summary>
        internal static string FWP_E_SESSION_ABORTED {
            get {
                return ResourceManager.GetString("FWP_E_SESSION_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sublayer does not exist..
        /// </summary>
        internal static string FWP_E_SUBLAYER_NOT_FOUND {
            get {
                return ResourceManager.GetString("FWP_E_SUBLAYER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call timed out while waiting to acquire the transaction lock..
        /// </summary>
        internal static string FWP_E_TIMEOUT {
            get {
                return ResourceManager.GetString("FWP_E_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of callouts has been reached..
        /// </summary>
        internal static string FWP_E_TOO_MANY_BOOTTIME_FILTERS {
            get {
                return ResourceManager.GetString("FWP_E_TOO_MANY_BOOTTIME_FILTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of sublayers has been reached..
        /// </summary>
        internal static string FWP_E_TOO_MANY_SUBLAYERS {
            get {
                return ResourceManager.GetString("FWP_E_TOO_MANY_SUBLAYERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The traffic parameters do not match those for the security association context..
        /// </summary>
        internal static string FWP_E_TRAFFIC_MISMATCH {
            get {
                return ResourceManager.GetString("FWP_E_TRAFFIC_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The explicit transaction has been forcibly cancelled..
        /// </summary>
        internal static string FWP_E_TXN_ABORTED {
            get {
                return ResourceManager.GetString("FWP_E_TXN_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed from within an explicit transaction..
        /// </summary>
        internal static string FWP_E_TXN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("FWP_E_TXN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An FWP_VALUE or FWPM_CONDITION_VALUE is of the wrong type..
        /// </summary>
        internal static string FWP_E_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("FWP_E_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call was made from the wrong session so cannot be completed..
        /// </summary>
        internal static string FWP_E_WRONG_SESSION {
            get {
                return ResourceManager.GetString("FWP_E_WRONG_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array that must contain at least one element is zero length..
        /// </summary>
        internal static string FWP_E_ZERO_LENGTH_ARRAY {
            get {
                return ResourceManager.GetString("FWP_E_ZERO_LENGTH_ARRAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLR has been disabled due to unrecoverable error..
        /// </summary>
        internal static string HOST_E_CLRNOTAVAILABLE {
            get {
                return ResourceManager.GetString("HOST_E_CLRNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host detected a deadlock on a blocking operation..
        /// </summary>
        internal static string HOST_E_DEADLOCK {
            get {
                return ResourceManager.GetString("HOST_E_DEADLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process exited due to AD Unload escalation..
        /// </summary>
        internal static string HOST_E_EXITPROCESS_ADUNLOAD {
            get {
                return ResourceManager.GetString("HOST_E_EXITPROCESS_ADUNLOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process exited due to OutOfMemory escalation..
        /// </summary>
        internal static string HOST_E_EXITPROCESS_OUTOFMEMORY {
            get {
                return ResourceManager.GetString("HOST_E_EXITPROCESS_OUTOFMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process exited due to ThreadAbort escalation..
        /// </summary>
        internal static string HOST_E_EXITPROCESS_THREADABORT {
            get {
                return ResourceManager.GetString("HOST_E_EXITPROCESS_THREADABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process exited due to Timeout escalation..
        /// </summary>
        internal static string HOST_E_EXITPROCESS_TIMEOUT {
            get {
                return ResourceManager.GetString("HOST_E_EXITPROCESS_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid operation..
        /// </summary>
        internal static string HOST_E_INVALIDOPERATION {
            get {
                return ResourceManager.GetString("HOST_E_INVALIDOPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space for tools is not available.
        /// </summary>
        internal static string INPLACE_E_NOTOOLSPACE {
            get {
                return ResourceManager.GetString("INPLACE_E_NOTOOLSPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Undo is not available.
        /// </summary>
        internal static string INPLACE_E_NOTUNDOABLE {
            get {
                return ResourceManager.GetString("INPLACE_E_NOTUNDOABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message is too long; some of it had to be truncated before displaying.
        /// </summary>
        internal static string INPLACE_S_TRUNCATED {
            get {
                return ResourceManager.GetString("INPLACE_S_TRUNCATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {IsolatedStorage} operation failed..
        /// </summary>
        internal static string ISS_E_ISOSTORE {
            get {
                return ResourceManager.GetString("ISS_E_ISOSTORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key was not found in the registry..
        /// </summary>
        internal static string MCMADM_E_REGKEY_NOT_FOUND {
            get {
                return ResourceManager.GetString("MCMADM_E_REGKEY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event initialization failed, there will be no MCM events..
        /// </summary>
        internal static string MCMADM_I_NO_EVENTS {
            get {
                return ResourceManager.GetString("MCMADM_I_NO_EVENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An allocation chain contained an invalid link pointer.
        /// </summary>
        internal static string MEM_E_INVALID_LINK {
            get {
                return ResourceManager.GetString("MEM_E_INVALID_LINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid root block pointer was specified.
        /// </summary>
        internal static string MEM_E_INVALID_ROOT {
            get {
                return ResourceManager.GetString("MEM_E_INVALID_ROOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested allocation size was too large.
        /// </summary>
        internal static string MEM_E_INVALID_SIZE {
            get {
                return ResourceManager.GetString("MEM_E_INVALID_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad input parameters..
        /// </summary>
        internal static string META_E_BAD_INPUT_PARAMETER {
            get {
                return ResourceManager.GetString("META_E_BAD_INPUT_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad binary signature..
        /// </summary>
        internal static string META_E_BAD_SIGNATURE {
            get {
                return ResourceManager.GetString("META_E_BAD_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merge: Inconsistency in meta data import scope..
        /// </summary>
        internal static string META_E_BADMETADATA {
            get {
                return ResourceManager.GetString("META_E_BADMETADATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InternalsVisibleTo can&apos;t have a version, culture, or processor architecture..
        /// </summary>
        internal static string META_E_CA_BAD_FRIENDS_ARGS {
            get {
                return ResourceManager.GetString("META_E_CA_BAD_FRIENDS_ARGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A custom marshaler requires the custom marshaler type..
        /// </summary>
        internal static string META_E_CA_CUSTMARSH_TYPE_REQUIRED {
            get {
                return ResourceManager.GetString("META_E_CA_CUSTMARSH_TYPE_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fixed string requires a size..
        /// </summary>
        internal static string META_E_CA_FIXEDSTR_SIZE_REQUIRED {
            get {
                return ResourceManager.GetString("META_E_CA_FIXEDSTR_SIZE_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to META: Strong-name signed assemblies can only grant friend access to strong name-signed assemblies..
        /// </summary>
        internal static string META_E_CA_FRIENDS_SN_REQUIRED {
            get {
                return ResourceManager.GetString("META_E_CA_FRIENDS_SN_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known attribute parser found an argument that is invalid for the object it is applied to..
        /// </summary>
        internal static string META_E_CA_INVALID_ARG_FOR_TYPE {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_ARG_FOR_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known attribute parser only handles fields, not properties..
        /// </summary>
        internal static string META_E_CA_INVALID_ARGTYPE {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_ARGTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known custom attribute blob has bad format..
        /// </summary>
        internal static string META_E_CA_INVALID_BLOB {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_BLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MarshalAs attribute has fields set that are not valid for the specified unmanaged type..
        /// </summary>
        internal static string META_E_CA_INVALID_MARSHALAS_FIELDS {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_MARSHALAS_FIELDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known custom attribute on invalid target..
        /// </summary>
        internal static string META_E_CA_INVALID_TARGET {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of the UUID was invalid..
        /// </summary>
        internal static string META_E_CA_INVALID_UUID {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_UUID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known custom attribute had invalid value..
        /// </summary>
        internal static string META_E_CA_INVALID_VALUE {
            get {
                return ResourceManager.GetString("META_E_CA_INVALID_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constant size cannot be negative..
        /// </summary>
        internal static string META_E_CA_NEGATIVE_CONSTSIZE {
            get {
                return ResourceManager.GetString("META_E_CA_NEGATIVE_CONSTSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter index cannot be negative..
        /// </summary>
        internal static string META_E_CA_NEGATIVE_PARAMINDEX {
            get {
                return ResourceManager.GetString("META_E_CA_NEGATIVE_PARAMINDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified unmanaged type is only valid on fields..
        /// </summary>
        internal static string META_E_CA_NT_FIELDONLY {
            get {
                return ResourceManager.GetString("META_E_CA_NT_FIELDONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known custom attribute blob has repeated named argument..
        /// </summary>
        internal static string META_E_CA_REPEATED_ARG {
            get {
                return ResourceManager.GetString("META_E_CA_REPEATED_ARG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known attribute parser found unexpected type..
        /// </summary>
        internal static string META_E_CA_UNEXPECTED_TYPE {
            get {
                return ResourceManager.GetString("META_E_CA_UNEXPECTED_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Known custom attribute named argument not recognized..
        /// </summary>
        internal static string META_E_CA_UNKNOWN_ARGUMENT {
            get {
                return ResourceManager.GetString("META_E_CA_UNKNOWN_ARGUMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve typeref..
        /// </summary>
        internal static string META_E_CANNOTRESOLVETYPEREF {
            get {
                return ResourceManager.GetString("META_E_CANNOTRESOLVETYPEREF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unmark all has been called already..
        /// </summary>
        internal static string META_E_HAS_UNMARKALL {
            get {
                return ResourceManager.GetString("META_E_HAS_UNMARKALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A token of the wrong type passed to a metadata function..
        /// </summary>
        internal static string META_E_INVALID_TOKEN_TYPE {
            get {
                return ResourceManager.GetString("META_E_INVALID_TOKEN_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must call UnmarkAll first before marking..
        /// </summary>
        internal static string META_E_MUST_CALL_UNMARKALL {
            get {
                return ResourceManager.GetString("META_E_MUST_CALL_UNMARKALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SaveDelta was called without being in EnC mode..
        /// </summary>
        internal static string META_E_NOT_IN_ENC_MODE {
            get {
                return ResourceManager.GetString("META_E_NOT_IN_ENC_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No logical space left to create more user strings..
        /// </summary>
        internal static string META_E_STRINGSPACE_FULL {
            get {
                return ResourceManager.GetString("META_E_STRINGSPACE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to META: Attempt to define an object that already exists in valid scenerios..
        /// </summary>
        internal static string META_S_DUPLICATE {
            get {
                return ResourceManager.GetString("META_S_DUPLICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker cannot open file.
        /// </summary>
        internal static string MK_E_CANTOPENFILE {
            get {
                return ResourceManager.GetString("MK_E_CANTOPENFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker needs to be connected manually.
        /// </summary>
        internal static string MK_E_CONNECTMANUALLY {
            get {
                return ResourceManager.GetString("MK_E_CONNECTMANUALLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker could not be enumerated.
        /// </summary>
        internal static string MK_E_ENUMERATION_FAILED {
            get {
                return ResourceManager.GetString("MK_E_ENUMERATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation exceeded deadline.
        /// </summary>
        internal static string MK_E_EXCEEDEDDEADLINE {
            get {
                return ResourceManager.GetString("MK_E_EXCEEDEDDEADLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intermediate operation failed.
        /// </summary>
        internal static string MK_E_INTERMEDIATEINTERFACENOTSUPPORTED {
            get {
                return ResourceManager.GetString("MK_E_INTERMEDIATEINTERFACENOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad extension for file.
        /// </summary>
        internal static string MK_E_INVALIDEXTENSION {
            get {
                return ResourceManager.GetString("MK_E_INVALIDEXTENSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User input required for operation to succeed.
        /// </summary>
        internal static string MK_E_MUSTBOTHERUSER {
            get {
                return ResourceManager.GetString("MK_E_MUSTBOTHERUSER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker needs to be generic.
        /// </summary>
        internal static string MK_E_NEEDGENERIC {
            get {
                return ResourceManager.GetString("MK_E_NEEDGENERIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker path could not be normalized.
        /// </summary>
        internal static string MK_E_NO_NORMALIZED {
            get {
                return ResourceManager.GetString("MK_E_NO_NORMALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker class has no inverse.
        /// </summary>
        internal static string MK_E_NOINVERSE {
            get {
                return ResourceManager.GetString("MK_E_NOINVERSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No object for moniker.
        /// </summary>
        internal static string MK_E_NOOBJECT {
            get {
                return ResourceManager.GetString("MK_E_NOOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No common prefix.
        /// </summary>
        internal static string MK_E_NOPREFIX {
            get {
                return ResourceManager.GetString("MK_E_NOPREFIX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker does not refer to storage.
        /// </summary>
        internal static string MK_E_NOSTORAGE {
            get {
                return ResourceManager.GetString("MK_E_NOSTORAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker is not bindable.
        /// </summary>
        internal static string MK_E_NOTBINDABLE {
            get {
                return ResourceManager.GetString("MK_E_NOTBINDABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker is not bound.
        /// </summary>
        internal static string MK_E_NOTBOUND {
            get {
                return ResourceManager.GetString("MK_E_NOTBOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid syntax.
        /// </summary>
        internal static string MK_E_SYNTAX {
            get {
                return ResourceManager.GetString("MK_E_SYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation unavailable.
        /// </summary>
        internal static string MK_E_UNAVAILABLE {
            get {
                return ResourceManager.GetString("MK_E_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Common prefix is input moniker.
        /// </summary>
        internal static string MK_S_HIM {
            get {
                return ResourceManager.GetString("MK_S_HIM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Common prefix is this moniker.
        /// </summary>
        internal static string MK_S_ME {
            get {
                return ResourceManager.GetString("MK_S_ME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker is already registered in running object table.
        /// </summary>
        internal static string MK_S_MONIKERALREADYREGISTERED {
            get {
                return ResourceManager.GetString("MK_S_MONIKERALREADYREGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker reduced to itself.
        /// </summary>
        internal static string MK_S_REDUCED_TO_SELF {
            get {
                return ResourceManager.GetString("MK_S_REDUCED_TO_SELF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Common prefix is both monikers.
        /// </summary>
        internal static string MK_S_US {
            get {
                return ResourceManager.GetString("MK_S_US", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a duplicate resource of type Distributed Transaction Coordinator.
        /// </summary>
        internal static string MSDTC_E_DUPLICATE_RESOURCE {
            get {
                return ResourceManager.GetString("MSDTC_E_DUPLICATE_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly is still being loaded..
        /// </summary>
        internal static string MSEE_E_ASSEMBLYLOADINPROGRESS {
            get {
                return ResourceManager.GetString("MSEE_E_ASSEMBLYLOADINPROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to First table does not appear after header information..
        /// </summary>
        internal static string MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The magic number in the head table is incorrect..
        /// </summary>
        internal static string MSSIPOTF_E_BAD_MAGICNUMBER {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_BAD_MAGICNUMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The offset table has incorrect values..
        /// </summary>
        internal static string MSSIPOTF_E_BAD_OFFSET_TABLE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_BAD_OFFSET_TABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a bad version number in the file..
        /// </summary>
        internal static string MSSIPOTF_E_BADVERSION {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_BADVERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not retrieve an object from the file..
        /// </summary>
        internal static string MSSIPOTF_E_CANTGETOBJECT {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_CANTGETOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call to a CryptoAPI function failed..
        /// </summary>
        internal static string MSSIPOTF_E_CRYPT {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_CRYPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The structure of the DSIG table is incorrect..
        /// </summary>
        internal static string MSSIPOTF_E_DSIG_STRUCTURE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_DSIG_STRUCTURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file did not pass the hints check..
        /// </summary>
        internal static string MSSIPOTF_E_FAILED_HINTS_CHECK {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_FAILED_HINTS_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signature does not have the correct attributes for the policy..
        /// </summary>
        internal static string MSSIPOTF_E_FAILED_POLICY {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_FAILED_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed on a file operation (open, map, read, write)..
        /// </summary>
        internal static string MSSIPOTF_E_FILE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file checksum is incorrect..
        /// </summary>
        internal static string MSSIPOTF_E_FILE_CHECKSUM {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_FILE_CHECKSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File is too small to contain the last table..
        /// </summary>
        internal static string MSSIPOTF_E_FILETOOSMALL {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_FILETOOSMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the head table in the file..
        /// </summary>
        internal static string MSSIPOTF_E_NOHEADTABLE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_NOHEADTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is not an OpenType file..
        /// </summary>
        internal static string MSSIPOTF_E_NOT_OPENTYPE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_NOT_OPENTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tried to reference a part of the file outside the proper range..
        /// </summary>
        internal static string MSSIPOTF_E_OUTOFMEMRANGE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_OUTOFMEMRANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A check failed in a partially constant table..
        /// </summary>
        internal static string MSSIPOTF_E_PCONST_CHECK {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_PCONST_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some kind of structural error..
        /// </summary>
        internal static string MSSIPOTF_E_STRUCTURE {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_STRUCTURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A table checksum is incorrect..
        /// </summary>
        internal static string MSSIPOTF_E_TABLE_CHECKSUM {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_TABLE_CHECKSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A table does not start on a long word boundary..
        /// </summary>
        internal static string MSSIPOTF_E_TABLE_LONGWORD {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_TABLE_LONGWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many pad bytes between tables or pad bytes are not 0..
        /// </summary>
        internal static string MSSIPOTF_E_TABLE_PADBYTES {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_TABLE_PADBYTES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate table tags or tags out of alphabetical order..
        /// </summary>
        internal static string MSSIPOTF_E_TABLE_TAGORDER {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_TABLE_TAGORDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two or more tables overlap..
        /// </summary>
        internal static string MSSIPOTF_E_TABLES_OVERLAP {
            get {
                return ResourceManager.GetString("MSSIPOTF_E_TABLES_OVERLAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Migration Image already exists. Contact Microsoft product support..
        /// </summary>
        internal static string NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Digital Rights Management component is in use during license migration. Contact Microsoft product support..
        /// </summary>
        internal static string NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE {
            get {
                return ResourceManager.GetString("NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Licenses are being migrated to a machine running XP or downlevel OS. This operation can only be performed on Windows Vista or a later OS. Contact Microsoft product support..
        /// </summary>
        internal static string NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH {
            get {
                return ResourceManager.GetString("NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component during license migration. Contact Microsoft product support..
        /// </summary>
        internal static string NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID {
            get {
                return ResourceManager.GetString("NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot copy the files to the CD because they are 8-bit. Convert the files to 16-bit, 44-kHz stereo files by using Sound Recorder or another audio-processing program, and then try again..
        /// </summary>
        internal static string NS_E_8BIT_WAVE_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_8BIT_WAVE_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device used in the current active source for device control is no longer available..
        /// </summary>
        internal static string NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED {
            get {
                return ResourceManager.GetString("NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A capture device in the current active source is no longer available..
        /// </summary>
        internal static string NS_E_ACTIVE_SG_DEVICE_DISCONNECTED {
            get {
                return ResourceManager.GetString("NS_E_ACTIVE_SG_DEVICE_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not add all of the images to the file because the images exceeded the 7 megabyte (MB) limit..
        /// </summary>
        internal static string NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES {
            get {
                return ResourceManager.GetString("NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content cannot be streamed because all protocols have been disabled..
        /// </summary>
        internal static string NS_E_ALL_PROTOCOLS_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_ALL_PROTOCOLS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NetShow Video Server was unable to allocate a %1 block file named %2..
        /// </summary>
        internal static string NS_E_ALLOCATE_FILE_FAIL {
            get {
                return ResourceManager.GetString("NS_E_ALLOCATE_FILE_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network connection already exists..
        /// </summary>
        internal static string NS_E_ALREADY_CONNECTED {
            get {
                return ResourceManager.GetString("NS_E_ALREADY_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the level of protection required for analog video..
        /// </summary>
        internal static string NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive plug-in aborted because the source was from broadcast..
        /// </summary>
        internal static string NS_E_ARCHIVE_ABORT_DUE_TO_BCAST {
            get {
                return ResourceManager.GetString("NS_E_ARCHIVE_ABORT_DUE_TO_BCAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local archive file name was not set..
        /// </summary>
        internal static string NS_E_ARCHIVE_FILENAME_NOTSET {
            get {
                return ResourceManager.GetString("NS_E_ARCHIVE_FILENAME_NOTSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive plug-in detected an interrupt in the source..
        /// </summary>
        internal static string NS_E_ARCHIVE_GAP_DETECTED {
            get {
                return ResourceManager.GetString("NS_E_ARCHIVE_GAP_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive plug-in has reached its quota..
        /// </summary>
        internal static string NS_E_ARCHIVE_REACH_QUOTA {
            get {
                return ResourceManager.GetString("NS_E_ARCHIVE_REACH_QUOTA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive file has the same name as an input file. Change one of the names before continuing..
        /// </summary>
        internal static string NS_E_ARCHIVE_SAME_AS_INPUT {
            get {
                return ResourceManager.GetString("NS_E_ARCHIVE_SAME_AS_INPUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %1 failed in file %2 line %3..
        /// </summary>
        internal static string NS_E_ASSERT {
            get {
                return ResourceManager.GetString("NS_E_ASSERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of a REPEAT loop within the current playlist file is not valid..
        /// </summary>
        internal static string NS_E_ASX_INVALID_REPEAT_BLOCK {
            get {
                return ResourceManager.GetString("NS_E_ASX_INVALID_REPEAT_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the playlist because it is not valid..
        /// </summary>
        internal static string NS_E_ASX_INVALIDFORMAT {
            get {
                return ResourceManager.GetString("NS_E_ASX_INVALIDFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A later version of Windows Media Player might be required to play this playlist..
        /// </summary>
        internal static string NS_E_ASX_INVALIDVERSION {
            get {
                return ResourceManager.GetString("NS_E_ASX_INVALIDVERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot save the playlist because it does not contain any items..
        /// </summary>
        internal static string NS_E_ASX_NOTHING_TO_WRITE {
            get {
                return ResourceManager.GetString("NS_E_ASX_NOTHING_TO_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to add attribute that is not allowed for the given media type.
        /// </summary>
        internal static string NS_E_ATTRIBUTE_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("NS_E_ATTRIBUTE_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to add, modify, or delete a read only attribute.
        /// </summary>
        internal static string NS_E_ATTRIBUTE_READ_ONLY {
            get {
                return ResourceManager.GetString("NS_E_ATTRIBUTE_READ_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All streams with different languages in the same audience must have same properties..
        /// </summary>
        internal static string NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All audiences in the output tree must have the same content type..
        /// </summary>
        internal static string NS_E_AUDIENCE_CONTENTTYPE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_AUDIENCE_CONTENTTYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The audio bit rate for an audience with a higher total bit rate must be greater than one with a lower total bit rate..
        /// </summary>
        internal static string NS_E_AUDIO_BITRATE_STEPDOWN {
            get {
                return ResourceManager.GetString("NS_E_AUDIO_BITRATE_STEPDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred with the audio codec..
        /// </summary>
        internal static string NS_E_AUDIO_CODEC_ERROR {
            get {
                return ResourceManager.GetString("NS_E_AUDIO_CODEC_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested audio codec is not installed on this system..
        /// </summary>
        internal static string NS_E_AUDIO_CODEC_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("NS_E_AUDIO_CODEC_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The audio capture device does not support the specified audio format..
        /// </summary>
        internal static string NS_E_AUDIODEVICE_BADFORMAT {
            get {
                return ResourceManager.GetString("NS_E_AUDIODEVICE_BADFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to open the specified audio capture device because it is currently in use..
        /// </summary>
        internal static string NS_E_AUDIODEVICE_BUSY {
            get {
                return ResourceManager.GetString("NS_E_AUDIODEVICE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to open the specified audio capture device because an unexpected error has occurred..
        /// </summary>
        internal static string NS_E_AUDIODEVICE_UNEXPECTED {
            get {
                return ResourceManager.GetString("NS_E_AUDIODEVICE_UNEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot find the file specified..
        /// </summary>
        internal static string NS_E_AUTHORIZATION_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_AUTHORIZATION_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Data sent to Backup-Restore..
        /// </summary>
        internal static string NS_E_BACKUP_RESTORE_BAD_DATA {
            get {
                return ResourceManager.GetString("NS_E_BACKUP_RESTORE_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Request ID in Backup-Restore..
        /// </summary>
        internal static string NS_E_BACKUP_RESTORE_BAD_REQUEST_ID {
            get {
                return ResourceManager.GetString("NS_E_BACKUP_RESTORE_BAD_REQUEST_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure in Backup-Restore..
        /// </summary>
        internal static string NS_E_BACKUP_RESTORE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_BACKUP_RESTORE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many resets in Backup-Restore..
        /// </summary>
        internal static string NS_E_BACKUP_RESTORE_TOO_MANY_RESETS {
            get {
                return ResourceManager.GetString("NS_E_BACKUP_RESTORE_TOO_MANY_RESETS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified adapter address is invalid..
        /// </summary>
        internal static string NS_E_BAD_ADAPTER_ADDRESS {
            get {
                return ResourceManager.GetString("NS_E_BAD_ADAPTER_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified adapter name is invalid..
        /// </summary>
        internal static string NS_E_BAD_ADAPTER_NAME {
            get {
                return ResourceManager.GetString("NS_E_BAD_ADAPTER_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 has unrecognized control block version %2..
        /// </summary>
        internal static string NS_E_BAD_BLOCK0_VERSION {
            get {
                return ResourceManager.GetString("NS_E_BAD_BLOCK0_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The voice codec optimization definition file can not be found or is corrupted..
        /// </summary>
        internal static string NS_E_BAD_CONTENTEDL {
            get {
                return ResourceManager.GetString("NS_E_BAD_CONTENTEDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server received invalid data from the client on the control connection..
        /// </summary>
        internal static string NS_E_BAD_CONTROL_DATA {
            get {
                return ResourceManager.GetString("NS_E_BAD_CONTROL_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) has incorrect uid %3..
        /// </summary>
        internal static string NS_E_BAD_CUB_UID {
            get {
                return ResourceManager.GetString("NS_E_BAD_CUB_UID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified delivery mode is invalid..
        /// </summary>
        internal static string NS_E_BAD_DELIVERY_MODE {
            get {
                return ResourceManager.GetString("NS_E_BAD_DELIVERY_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 has incorrect uid %2..
        /// </summary>
        internal static string NS_E_BAD_DISK_UID {
            get {
                return ResourceManager.GetString("NS_E_BAD_DISK_UID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 has unsupported file system major version %2..
        /// </summary>
        internal static string NS_E_BAD_FSMAJOR_VERSION {
            get {
                return ResourceManager.GetString("NS_E_BAD_FSMAJOR_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mark-in time should be greater than 0 and less than the mark-out time..
        /// </summary>
        internal static string NS_E_BAD_MARKIN {
            get {
                return ResourceManager.GetString("NS_E_BAD_MARKIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mark-out time should be greater than the mark-in time and less than the file duration..
        /// </summary>
        internal static string NS_E_BAD_MARKOUT {
            get {
                return ResourceManager.GetString("NS_E_BAD_MARKOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified address is not a valid multicast address..
        /// </summary>
        internal static string NS_E_BAD_MULTICAST_ADDRESS {
            get {
                return ResourceManager.GetString("NS_E_BAD_MULTICAST_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request could not be understood by the server..
        /// </summary>
        internal static string NS_E_BAD_REQUEST {
            get {
                return ResourceManager.GetString("NS_E_BAD_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 has bad stamp number in control block..
        /// </summary>
        internal static string NS_E_BAD_STAMPNUMBER {
            get {
                return ResourceManager.GetString("NS_E_BAD_STAMPNUMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response from the media server could not be understood. This might be caused by an incompatible proxy server or media server..
        /// </summary>
        internal static string NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE {
            get {
                return ResourceManager.GetString("NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot perform a task because the Player is terminating the service. The task will be recovered when the Player restarts..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_CALLFUNCENDED {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_CALLFUNCENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot perform a task because the system has no resources to allocate..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_CALLFUNCFAILED {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_CALLFUNCFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot perform a task because the task took too long to run..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player tried to cancel a download that was already completed. The file will not be removed..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player tried to complete a download that was already canceled. The file will not be available..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot create a temporary file name. This might occur if the path is not valid or if the disk is full..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot start. This might occur if the system is out of resources..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_FAILEDINITIALIZE {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_FAILEDINITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot get the file name of the requested download. The requested download will be canceled..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_INVALID_FILE_NAME {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_INVALID_FILE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This download was not created by Windows Media Player..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is trying to access a download that is not valid..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_NOJOBPOINTER {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_NOJOBPOINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager plug-in cannot start. This might occur if the system is out of resources..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot move the file..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot expand a WMD file. The file will be deleted and the operation will not be completed successfully..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_WMDUNPACKFAILED {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_WMDUNPACKFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a download that has the wrong number of files. This might occur if another program is trying to create jobs with the same signature as the Player..
        /// </summary>
        internal static string NS_E_BKGDOWNLOAD_WRONG_NO_FILES {
            get {
                return ResourceManager.GetString("NS_E_BKGDOWNLOAD_WRONG_NO_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resource is in use..
        /// </summary>
        internal static string NS_E_BUSY {
            get {
                return ResourceManager.GetString("NS_E_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive request conflicts with other requests in progress..
        /// </summary>
        internal static string NS_E_CACHE_ARCHIVE_CONFLICT {
            get {
                return ResourceManager.GetString("NS_E_CACHE_ARCHIVE_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The internal code for HTTP status code 403 Forbidden due to not cacheable..
        /// </summary>
        internal static string NS_E_CACHE_CANNOT_BE_CACHED {
            get {
                return ResourceManager.GetString("NS_E_CACHE_CANNOT_BE_CACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The internal code for HTTP status code 412 Precondition Failed due to not broadcast type..
        /// </summary>
        internal static string NS_E_CACHE_NOT_BROADCAST {
            get {
                return ResourceManager.GetString("NS_E_CACHE_NOT_BROADCAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The internal code for HTTP status code 304 Not Modified..
        /// </summary>
        internal static string NS_E_CACHE_NOT_MODIFIED {
            get {
                return ResourceManager.GetString("NS_E_CACHE_NOT_MODIFIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified origin server cannot be found..
        /// </summary>
        internal static string NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified origin server is not responding..
        /// </summary>
        internal static string NS_E_CACHE_ORIGIN_SERVER_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_CACHE_ORIGIN_SERVER_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be purchased or downloaded. The file might not be available from the online store..
        /// </summary>
        internal static string NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot purchase or download content from multiple online stores..
        /// </summary>
        internal static string NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to establish a connection to the proxy server. Please check your proxy server configuration..
        /// </summary>
        internal static string NS_E_CANNOT_CONNECT_TO_PROXY {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_CONNECT_TO_PROXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to remove an active source while encoding..
        /// </summary>
        internal static string NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to generate the stream format file if you are using quality-based VBR encoding for the audio or video stream. Instead use the Windows Media file generated after encoding to create the announcement file..
        /// </summary>
        internal static string NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to pause encoding during a broadcast..
        /// </summary>
        internal static string NS_E_CANNOT_PAUSE_LIVEBROADCAST {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_PAUSE_LIVEBROADCAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read the contents of a playlist file from a media server..
        /// </summary>
        internal static string NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to remove the last instance of a type of plug-in..
        /// </summary>
        internal static string NS_E_CANNOT_REMOVE_PLUGIN {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_REMOVE_PLUGIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to remove a cache or proxy publishing point..
        /// </summary>
        internal static string NS_E_CANNOT_REMOVE_PUBLISHING_POINT {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_REMOVE_PUBLISHING_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to sync subscription files to this device..
        /// </summary>
        internal static string NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your device is operating slowly or is not responding. Until the device responds, it is not possible to sync again. To return the device to normal operation, try disconnecting it from the computer or resetting it..
        /// </summary>
        internal static string NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING {
            get {
                return ResourceManager.GetString("NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to establish a connection to the server..
        /// </summary>
        internal static string NS_E_CANNOTCONNECT {
            get {
                return ResourceManager.GetString("NS_E_CANNOTCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to establish a connection to the NetShow event monitor service..
        /// </summary>
        internal static string NS_E_CANNOTCONNECTEVENTS {
            get {
                return ResourceManager.GetString("NS_E_CANNOTCONNECTEVENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to destroy the title..
        /// </summary>
        internal static string NS_E_CANNOTDESTROYTITLE {
            get {
                return ResourceManager.GetString("NS_E_CANNOTDESTROYTITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to offline disk..
        /// </summary>
        internal static string NS_E_CANNOTOFFLINEDISK {
            get {
                return ResourceManager.GetString("NS_E_CANNOTOFFLINEDISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to online disk..
        /// </summary>
        internal static string NS_E_CANNOTONLINEDISK {
            get {
                return ResourceManager.GetString("NS_E_CANNOTONLINEDISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to rename the title..
        /// </summary>
        internal static string NS_E_CANNOTRENAMETITLE {
            get {
                return ResourceManager.GetString("NS_E_CANNOTRENAMETITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not use digital playback to play the CD. To switch to analog playback, Click Organize, click Options, and then click the Devices tab. Double-click the CD drive, and then in the Playback area, click Analog..
        /// </summary>
        internal static string NS_E_CANT_READ_DIGITAL {
            get {
                return ResourceManager.GetString("NS_E_CANT_READ_DIGITAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Content Servers failed to communicate..
        /// </summary>
        internal static string NS_E_CCLINK_DOWN {
            get {
                return ResourceManager.GetString("NS_E_CCLINK_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to directly burn tracks from one CD to another CD. You must first rip the tracks from the CD to your computer, and then burn the files to a blank CD..
        /// </summary>
        internal static string NS_E_CD_COPYTO_CD {
            get {
                return ResourceManager.GetString("NS_E_CD_COPYTO_CD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not use digital playback to play the CD. The Player has automatically switched the CD drive to analog playback. To switch back to digital CD playback, click Organize, click options, and use the Devices tab..
        /// </summary>
        internal static string NS_E_CD_DRIVER_PROBLEM {
            get {
                return ResourceManager.GetString("NS_E_CD_DRIVER_PROBLEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No CD track was specified for playback..
        /// </summary>
        internal static string NS_E_CD_EMPTY_TRACK_QUEUE {
            get {
                return ResourceManager.GetString("NS_E_CD_EMPTY_TRACK_QUEUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid ISRC code..
        /// </summary>
        internal static string NS_E_CD_ISRC_INVALID {
            get {
                return ResourceManager.GetString("NS_E_CD_ISRC_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Media Catalog Number..
        /// </summary>
        internal static string NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID {
            get {
                return ResourceManager.GetString("NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not use digital mode to read the CD. The Player has automatically switched the CD drive to analog mode. To switch back to digital mode, use the Devices tab..
        /// </summary>
        internal static string NS_E_CD_NO_BUFFERS_READ {
            get {
                return ResourceManager.GetString("NS_E_CD_NO_BUFFERS_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CD filter was not able to create the CD reader..
        /// </summary>
        internal static string NS_E_CD_NO_READER {
            get {
                return ResourceManager.GetString("NS_E_CD_NO_READER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot queue the CD track because queuing is not enabled..
        /// </summary>
        internal static string NS_E_CD_QUEUEING_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_CD_QUEUEING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot read the CD. The disc might be dirty or damaged or the CD drive might be malfunctioning..
        /// </summary>
        internal static string NS_E_CD_READ_ERROR {
            get {
                return ResourceManager.GetString("NS_E_CD_READ_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot read the CD. The disc might be dirty or damaged. Turn on error correction, and then try again..
        /// </summary>
        internal static string NS_E_CD_READ_ERROR_NO_CORRECTION {
            get {
                return ResourceManager.GetString("NS_E_CD_READ_ERROR_NO_CORRECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is busy reading the CD..
        /// </summary>
        internal static string NS_E_CD_REFRESH {
            get {
                return ResourceManager.GetString("NS_E_CD_REFRESH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For best performance, do not play CD tracks while ripping them..
        /// </summary>
        internal static string NS_E_CD_SLOW_COPY {
            get {
                return ResourceManager.GetString("NS_E_CD_SLOW_COPY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot estimate the CD drive&apos;s playback speed because the CD track is too short..
        /// </summary>
        internal static string NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS {
            get {
                return ResourceManager.GetString("NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the proxy exception list if the proxy setting is not set to custom..
        /// </summary>
        internal static string NS_E_CHANGING_PROXY_EXCEPTIONLIST {
            get {
                return ResourceManager.GetString("NS_E_CHANGING_PROXY_EXCEPTIONLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the proxy name if the proxy setting is not set to custom..
        /// </summary>
        internal static string NS_E_CHANGING_PROXY_NAME {
            get {
                return ResourceManager.GetString("NS_E_CHANGING_PROXY_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the proxy port if the proxy setting is not set to custom..
        /// </summary>
        internal static string NS_E_CHANGING_PROXY_PORT {
            get {
                return ResourceManager.GetString("NS_E_CHANGING_PROXY_PORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the specified protocol..
        /// </summary>
        internal static string NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the proxy bypass flag if the proxy setting is not set to custom..
        /// </summary>
        internal static string NS_E_CHANGING_PROXYBYPASS {
            get {
                return ResourceManager.GetString("NS_E_CHANGING_PROXYBYPASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Media closed because Windows was shut down..
        /// </summary>
        internal static string NS_E_CLOSED_ON_SUSPEND {
            get {
                return ResourceManager.GetString("NS_E_CLOSED_ON_SUSPEND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred with a DMO codec..
        /// </summary>
        internal static string NS_E_CODEC_DMO_ERROR {
            get {
                return ResourceManager.GetString("NS_E_CODEC_DMO_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more codecs required to open this content could not be found..
        /// </summary>
        internal static string NS_E_CODEC_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_CODEC_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the level of protection required for compressed digital audio..
        /// </summary>
        internal static string NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the level of protection required for compressed digital video..
        /// </summary>
        internal static string NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was not possible to establish a connection to the media server in a timely manner. The media server may be down for maintenance, or it may be necessary to use a proxy server to access this media server..
        /// </summary>
        internal static string NS_E_CONNECT_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_CONNECT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network connection has failed..
        /// </summary>
        internal static string NS_E_CONNECTION_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_CONNECTION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content provider is still initializing..
        /// </summary>
        internal static string NS_E_CONTENT_PARTNER_STILL_INITIALIZING {
            get {
                return ResourceManager.GetString("NS_E_CONTENT_PARTNER_STILL_INITIALIZING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is not a media CD..
        /// </summary>
        internal static string NS_E_CORECD_NOTAMEDIACD {
            get {
                return ResourceManager.GetString("NS_E_CORECD_NOTAMEDIACD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be performed because the server or publishing point is in a critical error state..
        /// </summary>
        internal static string NS_E_CRITICAL_ERROR {
            get {
                return ResourceManager.GetString("NS_E_CRITICAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) has failed..
        /// </summary>
        internal static string NS_E_CUB_FAIL {
            get {
                return ResourceManager.GetString("NS_E_CUB_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) has failed its link to Content Server %3..
        /// </summary>
        internal static string NS_E_CUB_FAIL_LINK {
            get {
                return ResourceManager.GetString("NS_E_CUB_FAIL_LINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL contains characters that cannot be decoded. The URL might be truncated or incomplete..
        /// </summary>
        internal static string NS_E_CURL_CANTDECODE {
            get {
                return ResourceManager.GetString("NS_E_CURL_CANTDECODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. If you clicked a link on a web page, the link might not be valid..
        /// </summary>
        internal static string NS_E_CURL_CANTWALK {
            get {
                return ResourceManager.GetString("NS_E_CURL_CANTWALK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer is smaller than the size specified..
        /// </summary>
        internal static string NS_E_CURL_INVALIDBUFFERSIZE {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDBUFFERSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL contains one or more characters that are not valid..
        /// </summary>
        internal static string NS_E_CURL_INVALIDCHAR {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDCHAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL contains a host name that is not valid..
        /// </summary>
        internal static string NS_E_CURL_INVALIDHOSTNAME {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDHOSTNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL contains a path that is not valid..
        /// </summary>
        internal static string NS_E_CURL_INVALIDPATH {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDPATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL port is not valid..
        /// </summary>
        internal static string NS_E_CURL_INVALIDPORT {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL contains a scheme that is not valid..
        /// </summary>
        internal static string NS_E_CURL_INVALIDSCHEME {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDSCHEME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL is not valid..
        /// </summary>
        internal static string NS_E_CURL_INVALIDURL {
            get {
                return ResourceManager.GetString("NS_E_CURL_INVALIDURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL is not safe for the operation specified..
        /// </summary>
        internal static string NS_E_CURL_NOTSAFE {
            get {
                return ResourceManager.GetString("NS_E_CURL_NOTSAFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL is not a directory..
        /// </summary>
        internal static string NS_E_CURLHELPER_NOTADIRECTORY {
            get {
                return ResourceManager.GetString("NS_E_CURLHELPER_NOTADIRECTORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL is not a file..
        /// </summary>
        internal static string NS_E_CURLHELPER_NOTAFILE {
            get {
                return ResourceManager.GetString("NS_E_CURLHELPER_NOTAFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified URL is not a relative URL..
        /// </summary>
        internal static string NS_E_CURLHELPER_NOTRELATIVE {
            get {
                return ResourceManager.GetString("NS_E_CURLHELPER_NOTRELATIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because it is corrupted..
        /// </summary>
        internal static string NS_E_DAMAGED_FILE {
            get {
                return ResourceManager.GetString("NS_E_DAMAGED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data source plug-in does not support enumeration..
        /// </summary>
        internal static string NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Data Unit Extension data was too large to be used..
        /// </summary>
        internal static string NS_E_DATA_UNIT_EXTENSION_TOO_LARGE {
            get {
                return ResourceManager.GetString("NS_E_DATA_UNIT_EXTENSION_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data path does not have an associated data writer plug-in..
        /// </summary>
        internal static string NS_E_DATAPATH_NO_SINK {
            get {
                return ResourceManager.GetString("NS_E_DATAPATH_NO_SINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the video because there is a problem with your video card..
        /// </summary>
        internal static string NS_E_DDRAW_GENERIC {
            get {
                return ResourceManager.GetString("NS_E_DDRAW_GENERIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to seek to the specified mark-in point..
        /// </summary>
        internal static string NS_E_DEVCONTROL_FAILED_SEEK {
            get {
                return ResourceManager.GetString("NS_E_DEVCONTROL_FAILED_SEEK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player no longer detects a connected portable device. Reconnect your portable device, and then try syncing the file again..
        /// </summary>
        internal static string NS_E_DEVICE_DISCONNECTED {
            get {
                return ResourceManager.GetString("NS_E_DEVICE_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not detect storage media in the selected device. Insert storage media into the device, and then try again..
        /// </summary>
        internal static string NS_E_DEVICE_IS_NOT_READY {
            get {
                return ResourceManager.GetString("NS_E_DEVICE_IS_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player no longer detects a connected portable device. Reconnect your portable device, and then try to sync the file again..
        /// </summary>
        internal static string NS_E_DEVICE_NOT_READY {
            get {
                return ResourceManager.GetString("NS_E_DEVICE_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. The portable device does not support the specified file type..
        /// </summary>
        internal static string NS_E_DEVICE_NOT_SUPPORT_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_DEVICE_NOT_SUPPORT_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current attached device does not support WMDRM..
        /// </summary>
        internal static string NS_E_DEVICE_NOT_WMDRM_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_DEVICE_NOT_WMDRM_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is in an unstable state. Check that the device is functioning properly and a tape is in place..
        /// </summary>
        internal static string NS_E_DEVICECONTROL_UNSTABLE {
            get {
                return ResourceManager.GetString("NS_E_DEVICECONTROL_UNSTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 ( %2 ) on Content Server %3, has failed..
        /// </summary>
        internal static string NS_E_DISK_FAIL {
            get {
                return ResourceManager.GetString("NS_E_DISK_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading from a disk..
        /// </summary>
        internal static string NS_E_DISK_READ {
            get {
                return ResourceManager.GetString("NS_E_DISK_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error writing to a disk..
        /// </summary>
        internal static string NS_E_DISK_WRITE {
            get {
                return ResourceManager.GetString("NS_E_DISK_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player failed to change the screen mode for full-screen video playback..
        /// </summary>
        internal static string NS_E_DISPLAY_MODE_CHANGE_FAILED {
            get {
                return ResourceManager.GetString("NS_E_DISPLAY_MODE_CHANGE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot begin a new license acquisition process until the current one has been completed..
        /// </summary>
        internal static string NS_E_DRM_ACQUIRING_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_DRM_ACQUIRING_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application cannot perform this action. Contact product support for this application..
        /// </summary>
        internal static string NS_E_DRM_ACTION_NOT_QUERIED {
            get {
                return ResourceManager.GetString("NS_E_DRM_ACTION_NOT_QUERIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You already have the latest security components. No upgrade is necessary at this time..
        /// </summary>
        internal static string NS_E_DRM_ALREADY_INDIVIDUALIZED {
            get {
                return ResourceManager.GetString("NS_E_DRM_ALREADY_INDIVIDUALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_APPCERT_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_DRM_APPCERT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the attribute name or value is too long..
        /// </summary>
        internal static string NS_E_DRM_ATTRIBUTE_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_DRM_ATTRIBUTE_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more backed-up licenses are missing or corrupt..
        /// </summary>
        internal static string NS_E_DRM_BACKUP_CORRUPT {
            get {
                return ResourceManager.GetString("NS_E_DRM_BACKUP_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Licenses are already backed up in this location..
        /// </summary>
        internal static string NS_E_DRM_BACKUP_EXISTS {
            get {
                return ResourceManager.GetString("NS_E_DRM_BACKUP_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot begin a new backup process until the current process has been completed..
        /// </summary>
        internal static string NS_E_DRM_BACKUPRESTORE_BUSY {
            get {
                return ResourceManager.GetString("NS_E_DRM_BACKUPRESTORE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message format is invalid..
        /// </summary>
        internal static string NS_E_DRM_BAD_REQUEST {
            get {
                return ResourceManager.GetString("NS_E_DRM_BAD_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management root of trust. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_BB_UNABLE_TO_INITIALIZE {
            get {
                return ResourceManager.GetString("NS_E_DRM_BB_UNABLE_TO_INITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer supplied is not sufficient..
        /// </summary>
        internal static string NS_E_DRM_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("NS_E_DRM_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DRM subsystem is currently locked by another application or user. Try again later..
        /// </summary>
        internal static string NS_E_DRM_BUSY {
            get {
                return ResourceManager.GetString("NS_E_DRM_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Digital Rights Management (DRM) cannot play the protected file because you do not have the appropriate rights..
        /// </summary>
        internal static string NS_E_DRM_CACHED_CONTENT_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_CACHED_CONTENT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client&apos;s certificate has been revoked..
        /// </summary>
        internal static string NS_E_DRM_CERTIFICATE_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_DRM_CERTIFICATE_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate does not have an adequate security level for the requested action..
        /// </summary>
        internal static string NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE {
            get {
                return ResourceManager.GetString("NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uplink license of a chained license cannot itself be a chained license..
        /// </summary>
        internal static string NS_E_DRM_CHAIN_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_DRM_CHAIN_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action cannot be performed because a problem occurred with the Windows Media Digital Rights Management (DRM) components on your computer..
        /// </summary>
        internal static string NS_E_DRM_CHECKPOINT_CORRUPT {
            get {
                return ResourceManager.GetString("NS_E_DRM_CHECKPOINT_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secure storage protection error. Restore your licenses from a previous backup and try again..
        /// </summary>
        internal static string NS_E_DRM_CHECKPOINT_FAILED {
            get {
                return ResourceManager.GetString("NS_E_DRM_CHECKPOINT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action cannot be performed because a problem occurred with the Windows Media Digital Rights Management (DRM) components on your computer..
        /// </summary>
        internal static string NS_E_DRM_CHECKPOINT_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_DRM_CHECKPOINT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the protected file. Verify that your computer&apos;s date is set correctly. If it is correct, on the Help menu, click Check for Player Updates to install the latest version of the Player..
        /// </summary>
        internal static string NS_E_DRM_CLIENT_CODE_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_CLIENT_CODE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Digital Rights Management data storage is not functioning properly. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_DATASTORE_CORRUPT {
            get {
                return ResourceManager.GetString("NS_E_DRM_DATASTORE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running this process under a debugger while using DRM content is not allowed..
        /// </summary>
        internal static string NS_E_DRM_DEBUGGING_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("NS_E_DRM_DEBUGGING_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media file is corrupted. Contact the content provider to get a new file..
        /// </summary>
        internal static string NS_E_DRM_DECRYPT_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_DECRYPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The portable device does not have the security required to copy protected files to it. To obtain the additional security, try to copy the file to your portable device again. When a message appears, click OK..
        /// </summary>
        internal static string NS_E_DRM_DEVICE_ACTIVATION_CANCELED {
            get {
                return ResourceManager.GetString("NS_E_DRM_DEVICE_ACTIVATION_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Device registration failed because the device is already registered..
        /// </summary>
        internal static string NS_E_DRM_DEVICE_ALREADY_REGISTERED {
            get {
                return ResourceManager.GetString("NS_E_DRM_DEVICE_ALREADY_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of devices in use has been reached. Unable to open additional devices..
        /// </summary>
        internal static string NS_E_DRM_DEVICE_LIMIT_REACHED {
            get {
                return ResourceManager.GetString("NS_E_DRM_DEVICE_LIMIT_REACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device must be opened before it can be used to receive content..
        /// </summary>
        internal static string NS_E_DRM_DEVICE_NOT_OPEN {
            get {
                return ResourceManager.GetString("NS_E_DRM_DEVICE_NOT_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content owner for the license you just acquired requires your device to register to the current machine..
        /// </summary>
        internal static string NS_E_DRM_DEVICE_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("NS_E_DRM_DEVICE_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certified driver components are required to play this media file. Contact Windows Update to see whether updated drivers are available for your hardware..
        /// </summary>
        internal static string NS_E_DRM_DRIVER_AUTH_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_DRM_DRIVER_AUTH_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certain driver functionality is required to play this media file. Contact Windows Update to see whether updated drivers are available for your hardware..
        /// </summary>
        internal static string NS_E_DRM_DRIVER_DIGIOUT_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_DRM_DRIVER_DIGIOUT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_DRMV2CLT_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_DRM_DRMV2CLT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_ENCRYPT_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_ENCRYPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_ENUM_LICENSE_FAILED {
            get {
                return ResourceManager.GetString("NS_E_DRM_ENUM_LICENSE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified server cannot perform the requested operation..
        /// </summary>
        internal static string NS_E_DRM_ERROR_BAD_NET_RESP {
            get {
                return ResourceManager.GetString("NS_E_DRM_ERROR_BAD_NET_RESP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license blob passed in the cardea request is expired..
        /// </summary>
        internal static string NS_E_DRM_EXPIRED_LICENSEBLOB {
            get {
                return ResourceManager.GetString("NS_E_DRM_EXPIRED_LICENSEBLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media file is corrupted. Contact the content provider to get a new file..
        /// </summary>
        internal static string NS_E_DRM_GET_CONTENTSTRING_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_GET_CONTENTSTRING_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_GET_LICENSE_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_GET_LICENSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_GET_LICENSESTRING_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_GET_LICENSESTRING_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The licenses for your media files are corrupted. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_HARDWARE_INCONSISTENT {
            get {
                return ResourceManager.GetString("NS_E_DRM_HARDWARE_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action cannot be performed because a hardware configuration change has been detected by the Windows Media Digital Rights Management (DRM) components on your computer..
        /// </summary>
        internal static string NS_E_DRM_HARDWAREID_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_DRM_HARDWAREID_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation can not be performed because the license does not contain an inclusion list..
        /// </summary>
        internal static string NS_E_DRM_INCLUSION_LIST_REQUIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_INCLUSION_LIST_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security upgrade cannot be completed because the allowed number of daily upgrades has been exceeded. Try again tomorrow..
        /// </summary>
        internal static string NS_E_DRM_INDIV_FRAUD {
            get {
                return ResourceManager.GetString("NS_E_DRM_INDIV_FRAUD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security upgrade cannot be completed because the server is unable to perform the operation. Try again later..
        /// </summary>
        internal static string NS_E_DRM_INDIV_NO_CABS {
            get {
                return ResourceManager.GetString("NS_E_DRM_INDIV_NO_CABS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security upgrade cannot be performed because the server is not available. Try again later..
        /// </summary>
        internal static string NS_E_DRM_INDIV_SERVICE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INDIV_SERVICE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem occurred during the security upgrade. Try again later..
        /// </summary>
        internal static string NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security upgrade failed. Try again later..
        /// </summary>
        internal static string NS_E_DRM_INDIVIDUALIZE_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_INDIVIDUALIZE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot begin a new security upgrade until the current one has been completed..
        /// </summary>
        internal static string NS_E_DRM_INDIVIDUALIZING {
            get {
                return ResourceManager.GetString("NS_E_DRM_INDIVIDUALIZING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_INVALID_APPCERT {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_APPCERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_INVALID_APPDATA {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_APPDATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact product support for this application..
        /// </summary>
        internal static string NS_E_DRM_INVALID_APPDATA_VERSION {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_APPDATA_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact product support for this application..
        /// </summary>
        internal static string NS_E_DRM_INVALID_APPLICATION {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_APPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client&apos;s certificate is corrupted or the signature cannot be verified..
        /// </summary>
        internal static string NS_E_DRM_INVALID_CERTIFICATE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_CERTIFICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media file is corrupted. Contact the content provider to get a new file..
        /// </summary>
        internal static string NS_E_DRM_INVALID_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Certificate Revocation List is invalid or corrupted..
        /// </summary>
        internal static string NS_E_DRM_INVALID_CRL {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_CRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid or corrupt data was encountered..
        /// </summary>
        internal static string NS_E_DRM_INVALID_DATA {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified KID is invalid.
        /// </summary>
        internal static string NS_E_DRM_INVALID_KID {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_KID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license is corrupted or invalid. Acquire a new license.
        /// </summary>
        internal static string NS_E_DRM_INVALID_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License acquisition did not work. Acquire a new license or contact the content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_INVALID_LICENSE_ACQUIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_LICENSE_ACQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media file is corrupted. Contact the content provider to get a new file..
        /// </summary>
        internal static string NS_E_DRM_INVALID_LICENSE_REQUEST {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_LICENSE_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license blob passed in the cardea request is invalid. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_INVALID_LICENSEBLOB {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_LICENSEBLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Licenses cannot be copied from one computer to another. Use License Management to transfer licenses, or get a new license for the media file..
        /// </summary>
        internal static string NS_E_DRM_INVALID_MACHINE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_MACHINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component during license migration. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_INVALID_MIGRATION_IMAGE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_MIGRATION_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required property was not set by the application. Contact product support for this application..
        /// </summary>
        internal static string NS_E_DRM_INVALID_PROPERTY {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response to the proximity detection challenge is invalid..
        /// </summary>
        internal static string NS_E_DRM_INVALID_PROXIMITY_RESPONSE {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_PROXIMITY_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_INVALID_SECURESTORE_PASSWORD {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_SECURESTORE_PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested session is invalid..
        /// </summary>
        internal static string NS_E_DRM_INVALID_SESSION {
            get {
                return ResourceManager.GetString("NS_E_DRM_INVALID_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action cannot be performed because a problem occurred with the Windows Media Digital Rights Management (DRM) components on your computer..
        /// </summary>
        internal static string NS_E_DRM_KEY_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_KEY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file could not be transferred because the device clock is not set..
        /// </summary>
        internal static string NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET {
            get {
                return ResourceManager.GetString("NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires an upgraded version of your player or a different player..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_APP_NOTALLOWED {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_APP_NOTALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires a higher level of security than the player you are currently using has. Try using a different player or download a newer version of your current player..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_APPSECLOW {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_APPSECLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license server&apos;s certificate expired. Make sure your system clock is set correctly. Contact your content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_CERT_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_CERT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_CLOSE_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_CLOSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content owner for the license you just acquired is no longer supporting their content. Contact the content owner for a newer version of the content..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_CONTENT_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_CONTENT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License deletion did not work. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_DELETION_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_DELETION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file has expired and is no longer valid. Contact your content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License initialization did not work. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_INITIALIZATION_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_INITIALIZATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license is corrupted. Acquire a new license..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_INVALID_XML {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_INVALID_XML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires a feature that is not supported in your current player or operating system. You can try with newer version of your current player or contact your content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_NOSAP {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_NOSAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires a feature that is not supported in your current player or operating system. You can try with newer version of your current player or contact your content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_NOSVP {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_NOSVP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain license..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_NOTACQUIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_NOTACQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file is not valid yet, but will be at a future date..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_NOTENABLED {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_NOTENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires a higher level of security than the player you are currently using has. Try using a different player or download a newer version of your current player..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_NOTRUSTEDCODEC {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_NOTRUSTEDCODEC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires Windows Driver Model (WDM) audio drivers. Contact your sound card manufacturer for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_NOWDM {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_NOWDM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_OPEN_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_OPEN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file requires a higher level of security than the player you are currently using has. Try using a different player or download a newer version of your current player..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_SECLOW {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_SECLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not read the necessary information from the system registry..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_SERVER_INFO_MISSING {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_SERVER_INFO_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_STORE_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_STORE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License acquisition did not work. Acquire a new license or contact the content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_STORE_SAVE_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_STORE_SAVE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no license available for the requested action..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license is invalid. Contact the content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_LICENSE_UNUSABLE {
            get {
                return ResourceManager.GetString("NS_E_DRM_LICENSE_UNUSABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content header does not comply with DRM requirements and cannot be used..
        /// </summary>
        internal static string NS_E_DRM_MALFORMED_CONTENT_HEADER {
            get {
                return ResourceManager.GetString("NS_E_DRM_MALFORMED_CONTENT_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component during license migration. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The legacy V2 data being imported is invalid.
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The password of the Legacy V2 SST entry being imported is incorrect.
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license being imported already exists.
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Migration is not supported by the plugin.
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Migration object is already in use and cannot be called until the current operation completes..
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_OBJECT_IN_USE {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_OBJECT_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Migration was cancelled by the user..
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_OPERATION_CANCELLED {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_OPERATION_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component during license migration. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component during license migration. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED {
            get {
                return ResourceManager.GetString("NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Try again later..
        /// </summary>
        internal static string NS_E_DRM_MONITOR_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_MONITOR_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client must be approved before executing the intended operation..
        /// </summary>
        internal static string NS_E_DRM_MUST_APPROVE {
            get {
                return ResourceManager.GetString("NS_E_DRM_MUST_APPROVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client must be registered before executing the intended operation..
        /// </summary>
        internal static string NS_E_DRM_MUST_REGISTER {
            get {
                return ResourceManager.GetString("NS_E_DRM_MUST_REGISTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client must be revalidated before executing the intended operation..
        /// </summary>
        internal static string NS_E_DRM_MUST_REVALIDATE {
            get {
                return ResourceManager.GetString("NS_E_DRM_MUST_REVALIDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the Secure Audio Path components were not found or an entry point in those components was not found..
        /// </summary>
        internal static string NS_E_DRM_NEED_UPGRADE_MSSAP {
            get {
                return ResourceManager.GetString("NS_E_DRM_NEED_UPGRADE_MSSAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new version of the Digital Rights Management component is required. Contact product support for this application to get the latest version..
        /// </summary>
        internal static string NS_E_DRM_NEED_UPGRADE_PD {
            get {
                return ResourceManager.GetString("NS_E_DRM_NEED_UPGRADE_PD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security upgrade is required to perform the operation on this media file..
        /// </summary>
        internal static string NS_E_DRM_NEEDS_INDIVIDUALIZATION {
            get {
                return ResourceManager.GetString("NS_E_DRM_NEEDS_INDIVIDUALIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An updated version of your media player is required to play the selected content..
        /// </summary>
        internal static string NS_E_DRM_NEEDS_UPGRADE_TEMPFILE {
            get {
                return ResourceManager.GetString("NS_E_DRM_NEEDS_UPGRADE_TEMPFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be performed on this file..
        /// </summary>
        internal static string NS_E_DRM_NO_RIGHTS {
            get {
                return ResourceManager.GetString("NS_E_DRM_NO_RIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chained license cannot be created because the referenced uplink license does not exist..
        /// </summary>
        internal static string NS_E_DRM_NO_UPLINK_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_DRM_NO_UPLINK_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all of the necessary properties for DRM have been set..
        /// </summary>
        internal static string NS_E_DRM_NOT_CONFIGURED {
            get {
                return ResourceManager.GetString("NS_E_DRM_NOT_CONFIGURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user canceled the DRM operation..
        /// </summary>
        internal static string NS_E_DRM_OPERATION_CANCELED {
            get {
                return ResourceManager.GetString("NS_E_DRM_OPERATION_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_PARAMETERS_MISMATCHED {
            get {
                return ResourceManager.GetString("NS_E_DRM_PARAMETERS_MISMATCHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified password is too long. Type a password with fewer than 8 characters..
        /// </summary>
        internal static string NS_E_DRM_PASSWORD_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_DRM_PASSWORD_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many target devices registered on the portable media..
        /// </summary>
        internal static string NS_E_DRM_PD_TOO_MANY_DEVICES {
            get {
                return ResourceManager.GetString("NS_E_DRM_PD_TOO_MANY_DEVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Digital Rights Management system cannot perform the requested action because your computer or network administrator has enabled the group policy Prevent Windows Media DRM Internet Access. For assistance, contact your administrator..
        /// </summary>
        internal static string NS_E_DRM_POLICY_DISABLE_ONLINE {
            get {
                return ResourceManager.GetString("NS_E_DRM_POLICY_DISABLE_ONLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This content requires the metering policy to be enabled..
        /// </summary>
        internal static string NS_E_DRM_POLICY_METERING_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_DRM_POLICY_METERING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A DRM profile has not been set for the current session..
        /// </summary>
        internal static string NS_E_DRM_PROFILE_NOT_SET {
            get {
                return ResourceManager.GetString("NS_E_DRM_PROFILE_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client application has been forcefully terminated during a DRM challenge..
        /// </summary>
        internal static string NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE {
            get {
                return ResourceManager.GetString("NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client application has been forcefully terminated during a DRM petition..
        /// </summary>
        internal static string NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION {
            get {
                return ResourceManager.GetString("NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_QUERY_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_QUERY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status message: Reopen the file..
        /// </summary>
        internal static string NS_E_DRM_REOPEN_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_DRM_REOPEN_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact product support for this application..
        /// </summary>
        internal static string NS_E_DRM_REPORT_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_REPORT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot restore your license(s)..
        /// </summary>
        internal static string NS_E_DRM_RESTORE_FRAUD {
            get {
                return ResourceManager.GetString("NS_E_DRM_RESTORE_FRAUD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot restore your licenses because the server is not available. Try again later..
        /// </summary>
        internal static string NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license you are using has associated output restrictions. This license is unusable until these restrictions are queried..
        /// </summary>
        internal static string NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED {
            get {
                return ResourceManager.GetString("NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_RIV_TOO_SMALL {
            get {
                return ResourceManager.GetString("NS_E_DRM_RIV_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Digital Rights Management component is not installed properly. Reinstall the Player..
        /// </summary>
        internal static string NS_E_DRM_SDK_VERSIONMISMATCH {
            get {
                return ResourceManager.GetString("NS_E_DRM_SDK_VERSIONMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot make any more copies of this media file..
        /// </summary>
        internal static string NS_E_DRM_SDMI_NOMORECOPIES {
            get {
                return ResourceManager.GetString("NS_E_DRM_SDMI_NOMORECOPIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To transfer this media file, you must upgrade the application..
        /// </summary>
        internal static string NS_E_DRM_SDMI_TRIGGER {
            get {
                return ResourceManager.GetString("NS_E_DRM_SDMI_TRIGGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secure storage is not working. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_SECURE_STORE_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_SECURE_STORE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component of this application. Try to acquire a license again..
        /// </summary>
        internal static string NS_E_DRM_SECURE_STORE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_DRM_SECURE_STORE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_SECURE_STORE_UNLOCK_ERROR {
            get {
                return ResourceManager.GetString("NS_E_DRM_SECURE_STORE_UNLOCK_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Digital Rights Management security upgrade component could not be validated. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID {
            get {
                return ResourceManager.GetString("NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to either create or verify the content header..
        /// </summary>
        internal static string NS_E_DRM_SIGNATURE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_DRM_SIGNATURE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this file is not supported by your current player. You can try with newer version of your current player or contact your content provider for further assistance..
        /// </summary>
        internal static string NS_E_DRM_SOURCEID_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_DRM_SOURCEID_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license cannot be stored as it requires security upgrade of Digital Rights Management component..
        /// </summary>
        internal static string NS_E_DRM_STORE_NEEDINDI {
            get {
                return ResourceManager.GetString("NS_E_DRM_STORE_NEEDINDI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your machine does not meet the requirements for storing the license..
        /// </summary>
        internal static string NS_E_DRM_STORE_NOTALLOWED {
            get {
                return ResourceManager.GetString("NS_E_DRM_STORE_NOTALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the licenses could not be stored..
        /// </summary>
        internal static string NS_E_DRM_STORE_NOTALLSTORED {
            get {
                return ResourceManager.GetString("NS_E_DRM_STORE_NOTALLSTORED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A secured library is required to access the requested functionality..
        /// </summary>
        internal static string NS_E_DRM_STUBLIB_REQUIRED {
            get {
                return ResourceManager.GetString("NS_E_DRM_STUBLIB_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified track has exceeded it&apos;s specified playlist burn limit in this playlist..
        /// </summary>
        internal static string NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION {
            get {
                return ResourceManager.GetString("NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified track has exceeded it&apos;s track burn limit..
        /// </summary>
        internal static string NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION {
            get {
                return ResourceManager.GetString("NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transfer of chained licenses unsupported..
        /// </summary>
        internal static string NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license could not be acquired. Try again later..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A license cannot be created for this media file. Reinstall the application..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A migration importer cannot be created for this media file. Reinstall the application..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in obtaining the device&apos;s certificate..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in obtaining the device&apos;s secure clock. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in obtaining the secure clock from server. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in the Digital Rights Management component. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_INITIALIZE {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_INITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in retrieving the Digital Rights Management machine identification. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in opening the Digital Rights Management data storage file. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license is corrupted. Acquire a new license..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_OPEN_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_OPEN_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to open the specified port for receiving Proximity messages..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_OPEN_PORT {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_OPEN_PORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application has made an invalid call to the Digital Rights Management component. Contact product support for this application..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_SET_PARAMETER {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_SET_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem has occurred in setting the device&apos;s secure clock. Contact Microsoft product support..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proximity detection procedure could not confirm that the receiver is near the transmitter in the network..
        /// </summary>
        internal static string NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action is not supported..
        /// </summary>
        internal static string NS_E_DRM_UNSUPPORTED_ACTION {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNSUPPORTED_ACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified encryption algorithm is unsupported..
        /// </summary>
        internal static string NS_E_DRM_UNSUPPORTED_ALGORITHM {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNSUPPORTED_ALGORITHM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property requested is not supported..
        /// </summary>
        internal static string NS_E_DRM_UNSUPPORTED_PROPERTY {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNSUPPORTED_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported WMDRM-ND protocol version..
        /// </summary>
        internal static string NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION {
            get {
                return ResourceManager.GetString("NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified DRM profile does not exist in the system..
        /// </summary>
        internal static string NS_E_DRMPROFILE_NOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_DRMPROFILE_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified address is already in use..
        /// </summary>
        internal static string NS_E_DUPLICATE_ADDRESS {
            get {
                return ResourceManager.GetString("NS_E_DUPLICATE_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profile ID is already used by a DRM profile. Specify a different profile ID..
        /// </summary>
        internal static string NS_E_DUPLICATE_DRMPROFILE {
            get {
                return ResourceManager.GetString("NS_E_DUPLICATE_DRMPROFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified name is already in use..
        /// </summary>
        internal static string NS_E_DUPLICATE_NAME {
            get {
                return ResourceManager.GetString("NS_E_DUPLICATE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The packet is a duplicate of one received before.
        /// </summary>
        internal static string NS_E_DUPLICATE_PACKET {
            get {
                return ResourceManager.GetString("NS_E_DUPLICATE_PACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD. The disc was created in a manner that the Player does not support..
        /// </summary>
        internal static string NS_E_DVD_AUTHORING_PROBLEM {
            get {
                return ResourceManager.GetString("NS_E_DVD_AUTHORING_PROBLEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot rip the DVD because it is copy protected..
        /// </summary>
        internal static string NS_E_DVD_CANNOT_COPY_PROTECTED {
            get {
                return ResourceManager.GetString("NS_E_DVD_CANNOT_COPY_PROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot skip to the requested location on the DVD..
        /// </summary>
        internal static string NS_E_DVD_CANNOT_JUMP {
            get {
                return ResourceManager.GetString("NS_E_DVD_CANNOT_JUMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD because your video card does not support DVD playback..
        /// </summary>
        internal static string NS_E_DVD_COMPATIBLE_VIDEO_CARD {
            get {
                return ResourceManager.GetString("NS_E_DVD_COMPATIBLE_VIDEO_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play this DVD because there is a problem with digital copy protection between your DVD drive, decoder, and video card. Try installing an updated driver for your video card..
        /// </summary>
        internal static string NS_E_DVD_COPY_PROTECT {
            get {
                return ResourceManager.GetString("NS_E_DVD_COPY_PROTECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD because it is currently in use by another program. Quit the other program that is using the DVD, and then try again..
        /// </summary>
        internal static string NS_E_DVD_DEVICE_CONTENTION {
            get {
                return ResourceManager.GetString("NS_E_DVD_DEVICE_CONTENTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This DVD&apos;s resolution exceeds the maximum allowed by your component video outputs. Try reducing your screen resolution to 640 x 480, or turn off analog component outputs and use a VGA connection to your monitor..
        /// </summary>
        internal static string NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED {
            get {
                return ResourceManager.GetString("NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play this DVD. Try installing an updated driver for your video card or obtaining a newer video card..
        /// </summary>
        internal static string NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS {
            get {
                return ResourceManager.GetString("NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD because the disc prohibits playback in your region of the world. You must obtain a disc that is intended for your geographic region..
        /// </summary>
        internal static string NS_E_DVD_DISC_DECODER_REGION {
            get {
                return ResourceManager.GetString("NS_E_DVD_DISC_DECODER_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play DVD video. Close any open files and quit any other programs, and then try again. If the problem persists, restart your computer..
        /// </summary>
        internal static string NS_E_DVD_GRAPH_BUILDING {
            get {
                return ResourceManager.GetString("NS_E_DVD_GRAPH_BUILDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD because the disc prohibits playback in your region of the world. You must obtain a disc that is intended for your geographic region..
        /// </summary>
        internal static string NS_E_DVD_INVALID_DISC_REGION {
            get {
                return ResourceManager.GetString("NS_E_DVD_INVALID_DISC_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified title and/or chapter number does not exist on this DVD..
        /// </summary>
        internal static string NS_E_DVD_INVALID_TITLE_CHAPTER {
            get {
                return ResourceManager.GetString("NS_E_DVD_INVALID_TITLE_CHAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play this DVD because it is not possible to turn on analog copy protection on the output display. Try installing an updated driver for your video card..
        /// </summary>
        internal static string NS_E_DVD_MACROVISION {
            get {
                return ResourceManager.GetString("NS_E_DVD_MACROVISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play DVD audio. Verify that your sound card is set up correctly, and then try again..
        /// </summary>
        internal static string NS_E_DVD_NO_AUDIO_STREAM {
            get {
                return ResourceManager.GetString("NS_E_DVD_NO_AUDIO_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD because a compatible DVD decoder is not installed on your computer..
        /// </summary>
        internal static string NS_E_DVD_NO_DECODER {
            get {
                return ResourceManager.GetString("NS_E_DVD_NO_DECODER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot display subtitles or highlights in DVD menus. Reinstall the DVD decoder or contact the DVD drive manufacturer to obtain an updated decoder..
        /// </summary>
        internal static string NS_E_DVD_NO_SUBPICTURE_STREAM {
            get {
                return ResourceManager.GetString("NS_E_DVD_NO_SUBPICTURE_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play DVD video. You might need to adjust your Windows display settings. Open display settings in Control Panel, and then try lowering your screen resolution and color quality settings..
        /// </summary>
        internal static string NS_E_DVD_NO_VIDEO_MEMORY {
            get {
                return ResourceManager.GetString("NS_E_DVD_NO_VIDEO_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play DVD video. You might need to adjust your Windows display settings. Open display settings in Control Panel, and then try lowering your screen resolution and color quality settings..
        /// </summary>
        internal static string NS_E_DVD_NO_VIDEO_STREAM {
            get {
                return ResourceManager.GetString("NS_E_DVD_NO_VIDEO_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the scene because it has a parental rating higher than the rating that you are authorized to view..
        /// </summary>
        internal static string NS_E_DVD_PARENTAL {
            get {
                return ResourceManager.GetString("NS_E_DVD_PARENTAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of more of the required properties has not been set..
        /// </summary>
        internal static string NS_E_DVD_REQUIRED_PROPERTY_NOT_SET {
            get {
                return ResourceManager.GetString("NS_E_DVD_REQUIRED_PROPERTY_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the DVD because the region assigned to your DVD drive does not match the region assigned to your DVD decoder..
        /// </summary>
        internal static string NS_E_DVD_SYSTEM_DECODER_REGION {
            get {
                return ResourceManager.GetString("NS_E_DVD_SYSTEM_DECODER_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use two-pass encoding, you must enable device control and setup an edit decision list (EDL) that has at least one entry..
        /// </summary>
        internal static string NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS {
            get {
                return ResourceManager.GetString("NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist or directory you are requesting does not contain content..
        /// </summary>
        internal static string NS_E_EMPTY_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_EMPTY_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The program name cannot be empty..
        /// </summary>
        internal static string NS_E_EMPTY_PROGRAM_NAME {
            get {
                return ResourceManager.GetString("NS_E_EMPTY_PROGRAM_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EnactPlan gives up..
        /// </summary>
        internal static string NS_E_ENACTPLAN_GIVEUP {
            get {
                return ResourceManager.GetString("NS_E_ENACTPLAN_GIVEUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist has reached its end..
        /// </summary>
        internal static string NS_E_END_OF_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_END_OF_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either the end of the tape has been reached or there is no tape. Check the device and tape..
        /// </summary>
        internal static string NS_E_END_OF_TAPE {
            get {
                return ResourceManager.GetString("NS_E_END_OF_TAPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proxy experienced an error while attempting to contact the media server..
        /// </summary>
        internal static string NS_E_ERROR_FROM_PROXY {
            get {
                return ResourceManager.GetString("NS_E_ERROR_FROM_PROXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to create a DRM profile because the maximum number of profiles has been reached. You must delete some DRM profiles before creating new ones..
        /// </summary>
        internal static string NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT {
            get {
                return ResourceManager.GetString("NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source must be a mono channel .wav file..
        /// </summary>
        internal static string NS_E_EXPECT_MONO_WAV_INPUT {
            get {
                return ResourceManager.GetString("NS_E_EXPECT_MONO_WAV_INPUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files. Verify that your burner is connected properly, and then try again. If the problem persists, reinstall the Player..
        /// </summary>
        internal static string NS_E_FAIL_LAUNCH_ROXIO_PLUGIN {
            get {
                return ResourceManager.GetString("NS_E_FAIL_LAUNCH_ROXIO_PLUGIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the audio CD because some items in the list that you chose to buy could not be downloaded from the online store..
        /// </summary>
        internal static string NS_E_FAILED_DOWNLOAD_ABORT_BURN {
            get {
                return ResourceManager.GetString("NS_E_FAILED_DOWNLOAD_ABORT_BURN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature has been disabled by group policy..
        /// </summary>
        internal static string NS_E_FEATURE_DISABLED_BY_GROUP_POLICY {
            get {
                return ResourceManager.GetString("NS_E_FEATURE_DISABLED_BY_GROUP_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature is disabled in this SKU..
        /// </summary>
        internal static string NS_E_FEATURE_DISABLED_IN_SKU {
            get {
                return ResourceManager.GetString("NS_E_FEATURE_DISABLED_IN_SKU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plug-in cannot be loaded because it requires Windows Server 2003, Enterprise Edition..
        /// </summary>
        internal static string NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER {
            get {
                return ResourceManager.GetString("NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to allocate a file..
        /// </summary>
        internal static string NS_E_FILE_ALLOCATION_FAILED {
            get {
                return ResourceManager.GetString("NS_E_FILE_ALLOCATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bandwidth required to stream a file is higher than the maximum file bandwidth allowed on the server..
        /// </summary>
        internal static string NS_E_FILE_BANDWIDTH_LIMIT {
            get {
                return ResourceManager.GetString("NS_E_FILE_BANDWIDTH_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file already exists..
        /// </summary>
        internal static string NS_E_FILE_EXISTS {
            get {
                return ResourceManager.GetString("NS_E_FILE_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be added to the library..
        /// </summary>
        internal static string NS_E_FILE_FAILED_CHECKS {
            get {
                return ResourceManager.GetString("NS_E_FILE_FAILED_CHECKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to initialize a file..
        /// </summary>
        internal static string NS_E_FILE_INIT_FAILED {
            get {
                return ResourceManager.GetString("NS_E_FILE_INIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot find the file specified..
        /// </summary>
        internal static string NS_E_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to open a file..
        /// </summary>
        internal static string NS_E_FILE_OPEN_FAILED {
            get {
                return ResourceManager.GetString("NS_E_FILE_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to play a file..
        /// </summary>
        internal static string NS_E_FILE_PLAY_FAILED {
            get {
                return ResourceManager.GetString("NS_E_FILE_PLAY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading from a file..
        /// </summary>
        internal static string NS_E_FILE_READ {
            get {
                return ResourceManager.GetString("NS_E_FILE_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error writing to a file..
        /// </summary>
        internal static string NS_E_FILE_WRITE {
            get {
                return ResourceManager.GetString("NS_E_FILE_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Packets are not being received from the server. The packets might be blocked by a filtering device, such as a network firewall..
        /// </summary>
        internal static string NS_E_FIREWALL {
            get {
                return ResourceManager.GetString("NS_E_FIREWALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flash playback has been turned off in Windows Media Player..
        /// </summary>
        internal static string NS_E_FLASH_PLAYBACK_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("NS_E_FLASH_PLAYBACK_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server unreliable because multiple components failed..
        /// </summary>
        internal static string NS_E_GLITCH_MODE {
            get {
                return ResourceManager.GetString("NS_E_GLITCH_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the language settings. Either the graph has no audio or the audio only supports one language..
        /// </summary>
        internal static string NS_E_GRAPH_NOAUDIOLANGUAGE {
            get {
                return ResourceManager.GetString("NS_E_GRAPH_NOAUDIOLANGUAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The graph has no audio language selected..
        /// </summary>
        internal static string NS_E_GRAPH_NOAUDIOLANGUAGESELECTED {
            get {
                return ResourceManager.GetString("NS_E_GRAPH_NOAUDIOLANGUAGESELECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action cannot be performed because a problem occurred with the Windows Media Digital Rights Management (DRM) components on your computer..
        /// </summary>
        internal static string NS_E_HDS_KEY_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_HDS_KEY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command does not apply to the current media header user by a server component..
        /// </summary>
        internal static string NS_E_HEADER_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_HEADER_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP protocol not enabled. Not trying %1!ls!..
        /// </summary>
        internal static string NS_E_HTTP_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_HTTP_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMS HTTP Download Data Source plugin was unable to receive the remote server&apos;s response..
        /// </summary>
        internal static string NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE {
            get {
                return ResourceManager.GetString("NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the data exceeded the limit the WMS HTTP Download Data Source plugin can handle..
        /// </summary>
        internal static string NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was not possible to obtain output information from the video compressor..
        /// </summary>
        internal static string NS_E_ICMQUERYFORMAT {
            get {
                return ResourceManager.GetString("NS_E_ICMQUERYFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because your Internet security settings prohibit the use of ActiveX controls..
        /// </summary>
        internal static string NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS {
            get {
                return ResourceManager.GetString("NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while downloading an image..
        /// </summary>
        internal static string NS_E_IMAGE_DOWNLOAD_FAILED {
            get {
                return ResourceManager.GetString("NS_E_IMAGE_DOWNLOAD_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player failed to burn all the files to the CD. Select a slower recording speed, and then try again..
        /// </summary>
        internal static string NS_E_IMAPI_LOSSOFSTREAMING {
            get {
                return ResourceManager.GetString("NS_E_IMAPI_LOSSOFSTREAMING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The disc in the burner is not valid. Insert a blank disc into the burner, and then try again..
        /// </summary>
        internal static string NS_E_IMAPI_MEDIUM_INVALIDTYPE {
            get {
                return ResourceManager.GetString("NS_E_IMAPI_MEDIUM_INVALIDTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The station does not support the stream format..
        /// </summary>
        internal static string NS_E_INCOMPATIBLE_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_INCOMPATIBLE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Server service that received the HTTP push request is not a compatible version of Windows Media Services (WMS). This error may indicate the push request was received by IIS instead of WMS. Ensure WMS is started and has the HTTP Server control protocol properly enabled and try again..
        /// </summary>
        internal static string NS_E_INCOMPATIBLE_PUSH_SERVER {
            get {
                return ResourceManager.GetString("NS_E_INCOMPATIBLE_PUSH_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is not a compatible streaming media server..
        /// </summary>
        internal static string NS_E_INCOMPATIBLE_SERVER {
            get {
                return ResourceManager.GetString("NS_E_INCOMPATIBLE_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new version of the SDK is needed to play the requested content..
        /// </summary>
        internal static string NS_E_INCOMPATIBLE_VERSION {
            get {
                return ResourceManager.GetString("NS_E_INCOMPATIBLE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NS_E_INCOMPLETE_PLAYLIST.
        /// </summary>
        internal static string NS_E_INCOMPLETE_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_INCOMPLETE_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified crop values are not valid..
        /// </summary>
        internal static string NS_E_INCORRECTCLIPSETTINGS {
            get {
                return ResourceManager.GetString("NS_E_INCORRECTCLIPSETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was induced for testing purposes..
        /// </summary>
        internal static string NS_E_INDUCED {
            get {
                return ResourceManager.GetString("NS_E_INDUCED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source video does not support time codes..
        /// </summary>
        internal static string NS_E_INPUT_DOESNOT_SUPPORT_SMPTE {
            get {
                return ResourceManager.GetString("NS_E_INPUT_DOESNOT_SUPPORT_SMPTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All the source .wav files must have the same format..
        /// </summary>
        internal static string NS_E_INPUT_WAVFORMAT_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_INPUT_WAVFORMAT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or all of the specified sources are not working properly. Check that the sources are configured correctly..
        /// </summary>
        internal static string NS_E_INPUTSOURCE_PROBLEM {
            get {
                return ResourceManager.GetString("NS_E_INPUTSOURCE_PROBLEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is insufficient bandwidth available to fulfill the request..
        /// </summary>
        internal static string NS_E_INSUFFICIENT_BANDWIDTH {
            get {
                return ResourceManager.GetString("NS_E_INSUFFICIENT_BANDWIDTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient data found..
        /// </summary>
        internal static string NS_E_INSUFFICIENT_DATA {
            get {
                return ResourceManager.GetString("NS_E_INSUFFICIENT_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot access a required functionality. This might occur if the wrong system files or Player DLLs are loaded..
        /// </summary>
        internal static string NS_E_INTERFACE_NOT_REGISTERED_IN_GIT {
            get {
                return ResourceManager.GetString("NS_E_INTERFACE_NOT_REGISTERED_IN_GIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When you choose to maintain the interlacing in your video, the output video size must match the input video size..
        /// </summary>
        internal static string NS_E_INTERLACE_REQUIRE_SAMESIZE {
            get {
                return ResourceManager.GetString("NS_E_INTERLACE_REQUIRE_SAMESIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same source index in different audiences should have the same interlace mode..
        /// </summary>
        internal static string NS_E_INTERLACEMODE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_INTERLACEMODE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred..
        /// </summary>
        internal static string NS_E_INTERNAL {
            get {
                return ResourceManager.GetString("NS_E_INTERNAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server encountered an unexpected condition which prevented it from fulfilling the request..
        /// </summary>
        internal static string NS_E_INTERNAL_SERVER_ERROR {
            get {
                return ResourceManager.GetString("NS_E_INTERNAL_SERVER_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified archive could not be opened..
        /// </summary>
        internal static string NS_E_INVALID_ARCHIVE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_ARCHIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The setting for the maximum buffer size for audio is not valid..
        /// </summary>
        internal static string NS_E_INVALID_AUDIO_BUFFERMAX {
            get {
                return ResourceManager.GetString("NS_E_INVALID_AUDIO_BUFFERMAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The audio peak bit rate setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_AUDIO_PEAKRATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_AUDIO_PEAKRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The audio peak bit rate setting must be greater than the audio bit rate setting..
        /// </summary>
        internal static string NS_E_INVALID_AUDIO_PEAKRATE_2 {
            get {
                return ResourceManager.GetString("NS_E_INVALID_AUDIO_PEAKRATE_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Blackhole Address is not initialized..
        /// </summary>
        internal static string NS_E_INVALID_BLACKHOLE_ADDRESS {
            get {
                return ResourceManager.GetString("NS_E_INVALID_BLACKHOLE_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified station does not exist..
        /// </summary>
        internal static string NS_E_INVALID_CHANNEL {
            get {
                return ResourceManager.GetString("NS_E_INVALID_CHANNEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot find the client specified..
        /// </summary>
        internal static string NS_E_INVALID_CLIENT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_CLIENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid or corrupt data was encountered..
        /// </summary>
        internal static string NS_E_INVALID_DATA {
            get {
                return ResourceManager.GetString("NS_E_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The setting of the selected device does not support control for playing back tapes..
        /// </summary>
        internal static string NS_E_INVALID_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wrong stublib has been linked to an application or DLL using drmv2clt.dll..
        /// </summary>
        internal static string NS_E_INVALID_DRMV2CLT_STUBLIB {
            get {
                return ResourceManager.GetString("NS_E_INVALID_DRMV2CLT_STUBLIB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EDL provided is invalid.
        /// </summary>
        internal static string NS_E_INVALID_EDL {
            get {
                return ResourceManager.GetString("NS_E_INVALID_EDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file transfer bit rate is not valid..
        /// </summary>
        internal static string NS_E_INVALID_FILE_BITRATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_FILE_BITRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fold-down value needs to be between -144 and 0..
        /// </summary>
        internal static string NS_E_INVALID_FOLDDOWN_COEFFICIENTS {
            get {
                return ResourceManager.GetString("NS_E_INVALID_FOLDDOWN_COEFFICIENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index %1 is invalid..
        /// </summary>
        internal static string NS_E_INVALID_INDEX {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index specified is invalid..
        /// </summary>
        internal static string NS_E_INVALID_INDEX2 {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INDEX2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bit rate index specified is not valid..
        /// </summary>
        internal static string NS_E_INVALID_INPUT_AUDIENCE_INDEX {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INPUT_AUDIENCE_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input media format is invalid..
        /// </summary>
        internal static string NS_E_INVALID_INPUT_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INPUT_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified language is not valid..
        /// </summary>
        internal static string NS_E_INVALID_INPUT_LANGUAGE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INPUT_LANGUAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified source type is not valid..
        /// </summary>
        internal static string NS_E_INVALID_INPUT_STREAM {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INPUT_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maintaining interlacing in video is not compatible with Windows Media Player 7.1..
        /// </summary>
        internal static string NS_E_INVALID_INTERLACE_COMPAT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INTERLACE_COMPAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video codec selected does not support maintaining interlacing in video..
        /// </summary>
        internal static string NS_E_INVALID_INTERLACEMODE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_INTERLACEMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified key is not valid..
        /// </summary>
        internal static string NS_E_INVALID_KEY {
            get {
                return ResourceManager.GetString("NS_E_INVALID_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid log URL. Multicast logging URL must look like &quot;http://servername/isapibackend.dll&quot; ..
        /// </summary>
        internal static string NS_E_INVALID_LOG_URL {
            get {
                return ResourceManager.GetString("NS_E_INVALID_LOG_URL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid MTU specified. The valid range for maximum packet size is between 36 and 65507 bytes ..
        /// </summary>
        internal static string NS_E_INVALID_MTU_RANGE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_MTU_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file name, directory name, or volume label syntax is incorrect..
        /// </summary>
        internal static string NS_E_INVALID_NAME {
            get {
                return ResourceManager.GetString("NS_E_INVALID_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allowing nonsquare pixel output is not compatible with Windows Media Player 7.1..
        /// </summary>
        internal static string NS_E_INVALID_NONSQUAREPIXEL_COMPAT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_NONSQUAREPIXEL_COMPAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wrong number of preprocessing passes was used for the stream&apos;s output type.
        /// </summary>
        internal static string NS_E_INVALID_NUM_PASSES {
            get {
                return ResourceManager.GetString("NS_E_INVALID_NUM_PASSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature requires Windows Server 2003, Enterprise Edition..
        /// </summary>
        internal static string NS_E_INVALID_OPERATING_SYSTEM_VERSION {
            get {
                return ResourceManager.GetString("NS_E_INVALID_OPERATING_SYSTEM_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output media format is invalid..
        /// </summary>
        internal static string NS_E_INVALID_OUTPUT_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_OUTPUT_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pixel aspect ratio value must be between 1 and 255..
        /// </summary>
        internal static string NS_E_INVALID_PIXEL_ASPECT_RATIO {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PIXEL_ASPECT_RATIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid play statistics for logging ..
        /// </summary>
        internal static string NS_E_INVALID_PLAY_STATISTICS {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PLAY_STATISTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plug-in does not support any load types. The plug-in must support at least one load type..
        /// </summary>
        internal static string NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port is not valid..
        /// </summary>
        internal static string NS_E_INVALID_PORT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profile must contain at least one audio or video stream..
        /// </summary>
        internal static string NS_E_INVALID_PROFILE_CONTENTTYPE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PROFILE_CONTENTTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The publishing point name is invalid..
        /// </summary>
        internal static string NS_E_INVALID_PUBLISHING_POINT_NAME {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PUBLISHING_POINT_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified push publishing point is invalid..
        /// </summary>
        internal static string NS_E_INVALID_PUSH_PUBLISHING_POINT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PUSH_PUBLISHING_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Push publishing points are started when the encoder starts pushing the stream. This publishing point cannot be started by the server administrator..
        /// </summary>
        internal static string NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified push template is invalid..
        /// </summary>
        internal static string NS_E_INVALID_PUSH_TEMPLATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_PUSH_TEMPLATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid query operator..
        /// </summary>
        internal static string NS_E_INVALID_QUERY_OPERATOR {
            get {
                return ResourceManager.GetString("NS_E_INVALID_QUERY_OPERATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid query property..
        /// </summary>
        internal static string NS_E_INVALID_QUERY_PROPERTY {
            get {
                return ResourceManager.GetString("NS_E_INVALID_QUERY_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server redirected the player to an invalid location..
        /// </summary>
        internal static string NS_E_INVALID_REDIRECT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_REDIRECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is invalid in the current state..
        /// </summary>
        internal static string NS_E_INVALID_REQUEST {
            get {
                return ResourceManager.GetString("NS_E_INVALID_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given sampling rate is invalid..
        /// </summary>
        internal static string NS_E_INVALID_SAMPLING_RATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_SAMPLING_RATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script bit rate specified is not valid..
        /// </summary>
        internal static string NS_E_INVALID_SCRIPT_BITRATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_SCRIPT_BITRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only capture devices can be used with device control..
        /// </summary>
        internal static string NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL {
            get {
                return ResourceManager.GetString("NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified stream does not exist..
        /// </summary>
        internal static string NS_E_INVALID_STREAM {
            get {
                return ResourceManager.GetString("NS_E_INVALID_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified time code is not valid..
        /// </summary>
        internal static string NS_E_INVALID_TIMECODE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_TIMECODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified TTL is not valid..
        /// </summary>
        internal static string NS_E_INVALID_TTL {
            get {
                return ResourceManager.GetString("NS_E_INVALID_TTL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using a VBR encoding mode is not compatible with Windows Media Player 7.1..
        /// </summary>
        internal static string NS_E_INVALID_VBR_COMPAT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VBR_COMPAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to use a VBR encoding mode with uncompressed audio or video..
        /// </summary>
        internal static string NS_E_INVALID_VBR_WITH_UNCOMP {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VBR_WITH_UNCOMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video bit rate setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_BITRATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_BITRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video buffer setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_BUFFER {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The setting for the maximum buffer size for video is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_BUFFERMAX {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_BUFFERMAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the video maximum buffer size setting must be greater than the video buffer size setting..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_BUFFERMAX_2 {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_BUFFERMAX_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video codec quality setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_CQUALITY {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_CQUALITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video frame rate setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_FPS {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_FPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video height setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_HEIGHT {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_HEIGHT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The alignment of the video height is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_HEIGHT_ALIGN {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_HEIGHT_ALIGN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video image quality setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_IQUALITY {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_IQUALITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video key frame setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_KEYFRAME {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_KEYFRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video peak bit rate setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_PEAKRATE {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_PEAKRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video peak bit rate setting must be greater than the video bit rate setting..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_PEAKRATE_2 {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_PEAKRATE_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video width setting is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_WIDTH {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_WIDTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The alignment of the video width is not valid..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_WIDTH_ALIGN {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_WIDTH_ALIGN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When you choose to maintain the interlacing in your video, the output video size must be a multiple of 4..
        /// </summary>
        internal static string NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING {
            get {
                return ResourceManager.GetString("NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not allowed while archiving..
        /// </summary>
        internal static string NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING {
            get {
                return ResourceManager.GetString("NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not allowed while encoding..
        /// </summary>
        internal static string NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING {
            get {
                return ResourceManager.GetString("NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is only allowed during encoding..
        /// </summary>
        internal static string NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED {
            get {
                return ResourceManager.GetString("NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This source does not have a frame rate of 30 fps. Therefore, it is not possible to apply the inverse telecine filter to the source..
        /// </summary>
        internal static string NS_E_INVALIDINPUTFPS {
            get {
                return ResourceManager.GetString("NS_E_INVALIDINPUTFPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The setting for the maximum packet size is not valid..
        /// </summary>
        internal static string NS_E_INVALIDPACKETSIZE {
            get {
                return ResourceManager.GetString("NS_E_INVALIDPACKETSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Profile is invalid..
        /// </summary>
        internal static string NS_E_INVALIDPROFILE {
            get {
                return ResourceManager.GetString("NS_E_INVALIDPROFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same source index in different audiences should have the same languages..
        /// </summary>
        internal static string NS_E_LANGUAGE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_LANGUAGE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation requested for a particular time could not be carried out on schedule..
        /// </summary>
        internal static string NS_E_LATE_OPERATION {
            get {
                return ResourceManager.GetString("NS_E_LATE_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The packet arrived too late to be of use.
        /// </summary>
        internal static string NS_E_LATE_PACKET {
            get {
                return ResourceManager.GetString("NS_E_LATE_PACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The product license has expired..
        /// </summary>
        internal static string NS_E_LICENSE_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_LICENSE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content header is missing an acquisition URL..
        /// </summary>
        internal static string NS_E_LICENSE_HEADER_MISSING_URL {
            get {
                return ResourceManager.GetString("NS_E_LICENSE_HEADER_MISSING_URL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are not allowed to open this file. Contact the content provider for further assistance..
        /// </summary>
        internal static string NS_E_LICENSE_INCORRECT_RIGHTS {
            get {
                return ResourceManager.GetString("NS_E_LICENSE_INCORRECT_RIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license for this media file has expired. Get a new license or contact the content provider for further assistance..
        /// </summary>
        internal static string NS_E_LICENSE_OUTOFDATE {
            get {
                return ResourceManager.GetString("NS_E_LICENSE_OUTOFDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need a license to perform the requested operation on this media file..
        /// </summary>
        internal static string NS_E_LICENSE_REQUIRED {
            get {
                return ResourceManager.GetString("NS_E_LICENSE_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum log file size has been reached..
        /// </summary>
        internal static string NS_E_LOG_FILE_SIZE {
            get {
                return ResourceManager.GetString("NS_E_LOG_FILE_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log needs to be skipped ..
        /// </summary>
        internal static string NS_E_LOG_NEED_TO_BE_SKIPPED {
            get {
                return ResourceManager.GetString("NS_E_LOG_NEED_TO_BE_SKIPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for LogFilePeriod..
        /// </summary>
        internal static string NS_E_LOGFILEPERIOD {
            get {
                return ResourceManager.GetString("NS_E_LOGFILEPERIOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Markin/Markout is unsupported with this source type..
        /// </summary>
        internal static string NS_E_MARKIN_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_MARKIN_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot exceed the maximum bandwidth limit..
        /// </summary>
        internal static string NS_E_MAX_BITRATE {
            get {
                return ResourceManager.GetString("NS_E_MAX_BITRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot exceed the maximum client limit..
        /// </summary>
        internal static string NS_E_MAX_CLIENTS {
            get {
                return ResourceManager.GetString("NS_E_MAX_CLIENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot exceed the maximum file rate..
        /// </summary>
        internal static string NS_E_MAX_FILERATE {
            get {
                return ResourceManager.GetString("NS_E_MAX_FILERATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NetShow data stream limit of %1 streams was reached..
        /// </summary>
        internal static string NS_E_MAX_FUNNELS_ALERT {
            get {
                return ResourceManager.GetString("NS_E_MAX_FUNNELS_ALERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given maximum packet size is too small to accommodate this profile.
        /// </summary>
        internal static string NS_E_MAX_PACKET_SIZE_TOO_SMALL {
            get {
                return ResourceManager.GetString("NS_E_MAX_PACKET_SIZE_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot create the library. You must be logged on as an administrator or a member of the Administrators group to install the Player. For more information, contact your system administrator..
        /// </summary>
        internal static string NS_E_MEDIA_LIBRARY_FAILED {
            get {
                return ResourceManager.GetString("NS_E_MEDIA_LIBRARY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server cannot stream the selected file because it is either damaged or corrupt. Select a different file..
        /// </summary>
        internal static string NS_E_MEDIA_PARSER_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_MEDIA_PARSER_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the CD. The disc might be dirty or damaged..
        /// </summary>
        internal static string NS_E_MEDIACD_READ_ERROR {
            get {
                return ResourceManager.GetString("NS_E_MEDIACD_READ_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while burning a CD..
        /// </summary>
        internal static string NS_E_MEMSTORAGE_BAD_DATA {
            get {
                return ResourceManager.GetString("NS_E_MEMSTORAGE_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cached metadata (or metadata item) is not available..
        /// </summary>
        internal static string NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot retrieve metadata from the offline metadata cache..
        /// </summary>
        internal static string NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot set the locale id..
        /// </summary>
        internal static string NS_E_METADATA_CANNOT_SET_LOCALE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_CANNOT_SET_LOCALE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metadata format is not supported..
        /// </summary>
        internal static string NS_E_METADATA_FORMAT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_METADATA_FORMAT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metadata content identifier is not available..
        /// </summary>
        internal static string NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metadata document is invalid..
        /// </summary>
        internal static string NS_E_METADATA_INVALID_DOCUMENT_TYPE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_INVALID_DOCUMENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The language is not supported in the format..
        /// </summary>
        internal static string NS_E_METADATA_LANGUAGE_NOT_SUPORTED {
            get {
                return ResourceManager.GetString("NS_E_METADATA_LANGUAGE_NOT_SUPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot edit the metadata..
        /// </summary>
        internal static string NS_E_METADATA_NO_EDITING_CAPABILITY {
            get {
                return ResourceManager.GetString("NS_E_METADATA_NO_EDITING_CAPABILITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no RFC1766 name translation for the supplied locale id..
        /// </summary>
        internal static string NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metadata (or metadata item) is not available..
        /// </summary>
        internal static string NS_E_METADATA_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_METADATA_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profile&apos;s media types must match the media types defined for the session..
        /// </summary>
        internal static string NS_E_MISMATCHED_MEDIACONTENT {
            get {
                return ResourceManager.GetString("NS_E_MISMATCHED_MEDIACONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An audience is missing from the output stream configuration..
        /// </summary>
        internal static string NS_E_MISSING_AUDIENCE {
            get {
                return ResourceManager.GetString("NS_E_MISSING_AUDIENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Station %1 does not exist..
        /// </summary>
        internal static string NS_E_MISSING_CHANNEL {
            get {
                return ResourceManager.GetString("NS_E_MISSING_CHANNEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A source index is missing from the output stream configuration..
        /// </summary>
        internal static string NS_E_MISSING_SOURCE_INDEX {
            get {
                return ResourceManager.GetString("NS_E_MISSING_SOURCE_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid control error occurred in the mixer..
        /// </summary>
        internal static string NS_E_MIXER_INVALID_CONTROL {
            get {
                return ResourceManager.GetString("NS_E_MIXER_INVALID_CONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid line error occurred in the mixer..
        /// </summary>
        internal static string NS_E_MIXER_INVALID_LINE {
            get {
                return ResourceManager.GetString("NS_E_MIXER_INVALID_LINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid value error occurred in the mixer..
        /// </summary>
        internal static string NS_E_MIXER_INVALID_VALUE {
            get {
                return ResourceManager.GetString("NS_E_MIXER_INVALID_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not open a sound mixer driver..
        /// </summary>
        internal static string NS_E_MIXER_NODRIVER {
            get {
                return ResourceManager.GetString("NS_E_MIXER_NODRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecognized MMRESULT occurred in the mixer..
        /// </summary>
        internal static string NS_E_MIXER_UNKNOWN_MMRESULT {
            get {
                return ResourceManager.GetString("NS_E_MIXER_UNKNOWN_MMRESULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified auto playlist contains a filter type that is either not valid or is not installed on this computer..
        /// </summary>
        internal static string NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MMS protocol is not supported. Please use HTTP or RTSP to connect to the Windows Media stream..
        /// </summary>
        internal static string NS_E_MMS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_MMS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load the appropriate file parser..
        /// </summary>
        internal static string NS_E_MMSAUTOSERVER_CANTFINDWALKER {
            get {
                return ResourceManager.GetString("NS_E_MMSAUTOSERVER_CANTFINDWALKER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netshow Events Monitor is not operational and has been disconnected..
        /// </summary>
        internal static string NS_E_MONITOR_GIVEUP {
            get {
                return ResourceManager.GetString("NS_E_MONITOR_GIVEUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot rip the track because a compatible MP3 encoder is not installed on your computer. Install a compatible MP3 encoder or choose a different format to rip to (such as Windows Media Audio)..
        /// </summary>
        internal static string NS_E_MP3_FORMAT_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_MP3_FORMAT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while attempting to access information in the library. Try restarting the Player..
        /// </summary>
        internal static string NS_E_MPDB_GENERIC {
            get {
                return ResourceManager.GetString("NS_E_MPDB_GENERIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSAudio codec is not installed on this system..
        /// </summary>
        internal static string NS_E_MSAUDIO_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("NS_E_MSAUDIO_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSBD protocol is no longer supported. Please use HTTP to connect to the Windows Media stream..
        /// </summary>
        internal static string NS_E_MSBD_NO_LONGER_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_MSBD_NO_LONGER_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content cannot be streamed because the Multicast protocol has been disabled..
        /// </summary>
        internal static string NS_E_MULTICAST_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_MULTICAST_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A multicast data writer plug-in must be enabled in order for this operation to be completed..
        /// </summary>
        internal static string NS_E_MULTICAST_PLUGIN_NOT_ENABLED {
            get {
                return ResourceManager.GetString("NS_E_MULTICAST_PLUGIN_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All audiences must use the same audio codec..
        /// </summary>
        internal static string NS_E_MULTIPLE_AUDIO_CODECS {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_AUDIO_CODECS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All audiences should use the same audio format to be compatible with Windows Media Player 7.1..
        /// </summary>
        internal static string NS_E_MULTIPLE_AUDIO_FORMATS {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_AUDIO_FORMATS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All bit rates must have the same file transfer bit rate..
        /// </summary>
        internal static string NS_E_MULTIPLE_FILE_BITRATES {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_FILE_BITRATES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All bit rates must have the same script bit rate..
        /// </summary>
        internal static string NS_E_MULTIPLE_SCRIPT_BITRATES {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_SCRIPT_BITRATES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to use MBR encoding with VBR encoding..
        /// </summary>
        internal static string NS_E_MULTIPLE_VBR_AUDIENCES {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_VBR_AUDIENCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All audiences must use the same video codec..
        /// </summary>
        internal static string NS_E_MULTIPLE_VIDEO_CODECS {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_VIDEO_CODECS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All audiences should use the same video size to be compatible with Windows Media Player 7.1..
        /// </summary>
        internal static string NS_E_MULTIPLE_VIDEO_SIZES {
            get {
                return ResourceManager.GetString("NS_E_MULTIPLE_VIDEO_SIZES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace node name is invalid..
        /// </summary>
        internal static string NS_E_NAMESPACE_BAD_NAME {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_BAD_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer supplied to hold namespace node string is too small..
        /// </summary>
        internal static string NS_E_NAMESPACE_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the callback in the namespace when attempting to remove the callback..
        /// </summary>
        internal static string NS_E_NAMESPACE_CALLBACK_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_CALLBACK_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to register an already-registered callback on a namespace node..
        /// </summary>
        internal static string NS_E_NAMESPACE_DUPLICATE_CALLBACK {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_DUPLICATE_CALLBACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a namespace node that already exists..
        /// </summary>
        internal static string NS_E_NAMESPACE_DUPLICATE_NAME {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_DUPLICATE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace node name cannot be a null string..
        /// </summary>
        internal static string NS_E_NAMESPACE_EMPTY_NAME {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_EMPTY_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finding a child namespace node by index failed because the index exceeded the number of children..
        /// </summary>
        internal static string NS_E_NAMESPACE_INDEX_TOO_LARGE {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_INDEX_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace node name exceeds the allowed maximum length..
        /// </summary>
        internal static string NS_E_NAMESPACE_NAME_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_NAME_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to remove the root namespace node..
        /// </summary>
        internal static string NS_E_NAMESPACE_NODE_CONFLICT {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_NODE_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified namespace node could not be found..
        /// </summary>
        internal static string NS_E_NAMESPACE_NODE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_NODE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback list on a namespace node is at the maximum size..
        /// </summary>
        internal static string NS_E_NAMESPACE_TOO_MANY_CALLBACKS {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_TOO_MANY_CALLBACKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to create a persistent namespace node under a transient parent node..
        /// </summary>
        internal static string NS_E_NAMESPACE_WRONG_PERSIST {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_WRONG_PERSIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to store a value in a namespace node that has a different security type..
        /// </summary>
        internal static string NS_E_NAMESPACE_WRONG_SECURITY {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_WRONG_SECURITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to store a value in a namespace node that has a different value type..
        /// </summary>
        internal static string NS_E_NAMESPACE_WRONG_TYPE {
            get {
                return ResourceManager.GetString("NS_E_NAMESPACE_WRONG_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The use of this method requires an existing reference to the Player object..
        /// </summary>
        internal static string NS_E_NEED_CORE_REFERENCE {
            get {
                return ResourceManager.GetString("NS_E_NEED_CORE_REFERENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action requires input from the user..
        /// </summary>
        internal static string NS_E_NEED_TO_ASK_USER {
            get {
                return ResourceManager.GetString("NS_E_NEED_TO_ASK_USER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading from the network..
        /// </summary>
        internal static string NS_E_NET_READ {
            get {
                return ResourceManager.GetString("NS_E_NET_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error writing to the network..
        /// </summary>
        internal static string NS_E_NET_WRITE {
            get {
                return ResourceManager.GetString("NS_E_NET_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network is busy..
        /// </summary>
        internal static string NS_E_NETWORK_BUSY {
            get {
                return ResourceManager.GetString("NS_E_NETWORK_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to acquire a network resource failed..
        /// </summary>
        internal static string NS_E_NETWORK_RESOURCE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_NETWORK_RESOURCE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network service provider failed..
        /// </summary>
        internal static string NS_E_NETWORK_SERVICE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_NETWORK_SERVICE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network sink failed to write data to the network..
        /// </summary>
        internal static string NS_E_NETWORK_SINK_WRITE {
            get {
                return ResourceManager.GetString("NS_E_NETWORK_SINK_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No source is currently active..
        /// </summary>
        internal static string NS_E_NO_ACTIVE_SOURCEGROUP {
            get {
                return ResourceManager.GetString("NS_E_NO_ACTIVE_SOURCEGROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profile must contain a bit rate..
        /// </summary>
        internal static string NS_E_NO_AUDIENCES {
            get {
                return ResourceManager.GetString("NS_E_NO_AUDIENCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify at least one audio stream to be compatible with Windows Media Player 7.1..
        /// </summary>
        internal static string NS_E_NO_AUDIO_COMPAT {
            get {
                return ResourceManager.GetString("NS_E_NO_AUDIO_COMPAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to apply time compression to a video-only session..
        /// </summary>
        internal static string NS_E_NO_AUDIO_TIMECOMPRESSION {
            get {
                return ResourceManager.GetString("NS_E_NO_AUDIO_TIMECOMPRESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No audio data has been received for several seconds. Check the audio source and restart the encoder..
        /// </summary>
        internal static string NS_E_NO_AUDIODATA {
            get {
                return ResourceManager.GetString("NS_E_NO_AUDIODATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no CD in the CD drive. Insert a CD, and then try again..
        /// </summary>
        internal static string NS_E_NO_CD {
            get {
                return ResourceManager.GetString("NS_E_NO_CD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files because the Player cannot find a burner. If the burner is connected properly, try using Windows Update to install the latest device driver..
        /// </summary>
        internal static string NS_E_NO_CD_BURNER {
            get {
                return ResourceManager.GetString("NS_E_NO_CD_BURNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to define at least one station before this operation can complete..
        /// </summary>
        internal static string NS_E_NO_CHANNELS {
            get {
                return ResourceManager.GetString("NS_E_NO_CHANNELS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to display your source or output video in the Video panel..
        /// </summary>
        internal static string NS_E_NO_DATAVIEW_SUPPORT {
            get {
                return ResourceManager.GetString("NS_E_NO_DATAVIEW_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No device driver is present on the system..
        /// </summary>
        internal static string NS_E_NO_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_NO_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player has encountered an unknown error..
        /// </summary>
        internal static string NS_E_NO_ERROR_STRING_FOUND {
            get {
                return ResourceManager.GetString("NS_E_NO_ERROR_STRING_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no existing packetizer plugin for a stream..
        /// </summary>
        internal static string NS_E_NO_EXISTING_PACKETIZER {
            get {
                return ResourceManager.GetString("NS_E_NO_EXISTING_PACKETIZER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The publishing point cannot be started because the server does not have the appropriate stream formats. Use the Multicast Announcement Wizard to create a new announcement for this publishing point..
        /// </summary>
        internal static string NS_E_NO_FORMATS {
            get {
                return ResourceManager.GetString("NS_E_NO_FORMATS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No frames have been submitted to the analyzer for analysis..
        /// </summary>
        internal static string NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER {
            get {
                return ResourceManager.GetString("NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load the local play DLL..
        /// </summary>
        internal static string NS_E_NO_LOCALPLAY {
            get {
                return ResourceManager.GetString("NS_E_NO_LOCALPLAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to generate a time code when you are encoding content at multiple bit rates..
        /// </summary>
        internal static string NS_E_NO_MBR_WITH_TIMECODE {
            get {
                return ResourceManager.GetString("NS_E_NO_MBR_WITH_TIMECODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No audio or video input has been specified..
        /// </summary>
        internal static string NS_E_NO_MEDIA_IN_AUDIENCE {
            get {
                return ResourceManager.GetString("NS_E_NO_MEDIA_IN_AUDIENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) is unable to communicate with the Media System Network Protocol..
        /// </summary>
        internal static string NS_E_NO_MEDIA_PROTOCOL {
            get {
                return ResourceManager.GetString("NS_E_NO_MEDIA_PROTOCOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No media format is set in source..
        /// </summary>
        internal static string NS_E_NO_MEDIAFORMAT_IN_SOURCE {
            get {
                return ResourceManager.GetString("NS_E_NO_MEDIAFORMAT_IN_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more samples in the current range..
        /// </summary>
        internal static string NS_E_NO_MORE_SAMPLES {
            get {
                return ResourceManager.GetString("NS_E_NO_MORE_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not receiving data from the server..
        /// </summary>
        internal static string NS_E_NO_MULTICAST {
            get {
                return ResourceManager.GetString("NS_E_NO_MULTICAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must also enable storing content to hard disk temporarily in order to use two-pass encoding with the input device..
        /// </summary>
        internal static string NS_E_NO_MULTIPASS_FOR_LIVEDEVICE {
            get {
                return ResourceManager.GetString("NS_E_NO_MULTIPASS_FOR_LIVEDEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content can not be played because the server is not currently accepting connections. Try connecting at a later time..
        /// </summary>
        internal static string NS_E_NO_NEW_CONNECTIONS {
            get {
                return ResourceManager.GetString("NS_E_NO_NEW_CONNECTIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to apply the inverse telecine feature to PAL content..
        /// </summary>
        internal static string NS_E_NO_PAL_INVERSE_TELECINE {
            get {
                return ResourceManager.GetString("NS_E_NO_PAL_INVERSE_TELECINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not detect a portable device. Connect your portable device, and then try again..
        /// </summary>
        internal static string NS_E_NO_PDA {
            get {
                return ResourceManager.GetString("NS_E_NO_PDA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No profile is set for the source..
        /// </summary>
        internal static string NS_E_NO_PROFILE_IN_SOURCEGROUP {
            get {
                return ResourceManager.GetString("NS_E_NO_PROFILE_IN_SOURCEGROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify a profile name..
        /// </summary>
        internal static string NS_E_NO_PROFILE_NAME {
            get {
                return ResourceManager.GetString("NS_E_NO_PROFILE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to use image preprocessing with live encoding..
        /// </summary>
        internal static string NS_E_NO_REALTIME_PREPROCESS {
            get {
                return ResourceManager.GetString("NS_E_NO_REALTIME_PREPROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to apply time compression to a broadcast session..
        /// </summary>
        internal static string NS_E_NO_REALTIME_TIMECOMPRESSION {
            get {
                return ResourceManager.GetString("NS_E_NO_REALTIME_TIMECOMPRESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No reference URLs were found in an ASX file..
        /// </summary>
        internal static string NS_E_NO_REFERENCES {
            get {
                return ResourceManager.GetString("NS_E_NO_REFERENCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to use two-pass encoding when the source is set to loop..
        /// </summary>
        internal static string NS_E_NO_REPEAT_PREPROCESS {
            get {
                return ResourceManager.GetString("NS_E_NO_REPEAT_PREPROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no script engine available for this file..
        /// </summary>
        internal static string NS_E_NO_SCRIPT_ENGINE {
            get {
                return ResourceManager.GetString("NS_E_NO_SCRIPT_ENGINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No script stream is set in the current source..
        /// </summary>
        internal static string NS_E_NO_SCRIPT_STREAM {
            get {
                return ResourceManager.GetString("NS_E_NO_SCRIPT_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to contact the server..
        /// </summary>
        internal static string NS_E_NO_SERVER_CONTACT {
            get {
                return ResourceManager.GetString("NS_E_NO_SERVER_CONTACT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to generate a time code when there are multiple sources in a session..
        /// </summary>
        internal static string NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS {
            get {
                return ResourceManager.GetString("NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No specified device driver is present..
        /// </summary>
        internal static string NS_E_NO_SPECIFIED_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_NO_SPECIFIED_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no stream available..
        /// </summary>
        internal static string NS_E_NO_STREAM {
            get {
                return ResourceManager.GetString("NS_E_NO_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to apply time compression to a session that is using two-pass encoding..
        /// </summary>
        internal static string NS_E_NO_TWOPASS_TIMECOMPRESSION {
            get {
                return ResourceManager.GetString("NS_E_NO_TWOPASS_TIMECOMPRESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a valid output stream from the source..
        /// </summary>
        internal static string NS_E_NO_VALID_OUTPUT_STREAM {
            get {
                return ResourceManager.GetString("NS_E_NO_VALID_OUTPUT_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was not possible to find a valid source plug-in for the specified source..
        /// </summary>
        internal static string NS_E_NO_VALID_SOURCE_PLUGIN {
            get {
                return ResourceManager.GetString("NS_E_NO_VALID_SOURCE_PLUGIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no connection established with the Windows Media server. The operation failed..
        /// </summary>
        internal static string NS_E_NOCONNECTION {
            get {
                return ResourceManager.GetString("NS_E_NOCONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no data connection established..
        /// </summary>
        internal static string NS_E_NOFUNNEL {
            get {
                return ResourceManager.GetString("NS_E_NOFUNNEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matching element is found in the list..
        /// </summary>
        internal static string NS_E_NOMATCHING_ELEMENT {
            get {
                return ResourceManager.GetString("NS_E_NOMATCHING_ELEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matching media type is found in the source %1..
        /// </summary>
        internal static string NS_E_NOMATCHING_MEDIASOURCE {
            get {
                return ResourceManager.GetString("NS_E_NOMATCHING_MEDIASOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same source index in different audiences should have the same nonsquare pixel mode..
        /// </summary>
        internal static string NS_E_NONSQUAREPIXELMODE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_NONSQUAREPIXELMODE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no file parser registered for this type of file..
        /// </summary>
        internal static string NS_E_NOREGISTEREDWALKER {
            get {
                return ResourceManager.GetString("NS_E_NOREGISTEREDWALKER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This SourceGroupCollection doesn&apos;t contain any SourceGroups..
        /// </summary>
        internal static string NS_E_NOSOURCEGROUPS {
            get {
                return ResourceManager.GetString("NS_E_NOSOURCEGROUPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No statistics are available at this time..
        /// </summary>
        internal static string NS_E_NOSTATSAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_NOSTATSAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object must be fully configured before audio samples can be processed..
        /// </summary>
        internal static string NS_E_NOT_CONFIGURED {
            get {
                return ResourceManager.GetString("NS_E_NOT_CONFIGURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested URL cannot be accessed because there is no network connection..
        /// </summary>
        internal static string NS_E_NOT_CONNECTED {
            get {
                return ResourceManager.GetString("NS_E_NOT_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider of this file cannot be identified..
        /// </summary>
        internal static string NS_E_NOT_CONTENT_PARTNER_TRACK {
            get {
                return ResourceManager.GetString("NS_E_NOT_CONTENT_PARTNER_TRACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application is not licensed for this feature..
        /// </summary>
        internal static string NS_E_NOT_LICENSED {
            get {
                return ResourceManager.GetString("NS_E_NOT_LICENSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The disk is not rebuilding..
        /// </summary>
        internal static string NS_E_NOT_REBUILDING {
            get {
                return ResourceManager.GetString("NS_E_NOT_REBUILDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encoder is not archiving..
        /// </summary>
        internal static string NS_E_NOTARCHIVING {
            get {
                return ResourceManager.GetString("NS_E_NOTARCHIVING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NS_E_NOTHING_TO_DO.
        /// </summary>
        internal static string NS_E_NOTHING_TO_DO {
            get {
                return ResourceManager.GetString("NS_E_NOTHING_TO_DO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot find any titles on the server..
        /// </summary>
        internal static string NS_E_NOTITLES {
            get {
                return ResourceManager.GetString("NS_E_NOTITLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same source index in different audiences should have the same number of languages..
        /// </summary>
        internal static string NS_E_NUM_LANGUAGE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_NUM_LANGUAGE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested URL is not available in offline mode..
        /// </summary>
        internal static string NS_E_OFFLINE_MODE {
            get {
                return ResourceManager.GetString("NS_E_OFFLINE_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The folder could not be opened. The folder might have been moved or deleted..
        /// </summary>
        internal static string NS_E_OPEN_CONTAINING_FOLDER_FAILED {
            get {
                return ResourceManager.GetString("NS_E_OPEN_CONTAINING_FOLDER_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client cannot have any more files open simultaneously..
        /// </summary>
        internal static string NS_E_OPEN_FILE_LIMIT {
            get {
                return ResourceManager.GetString("NS_E_OPEN_FILE_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the level of output protection required by the content..
        /// </summary>
        internal static string NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the scheme of output protection required by the content..
        /// </summary>
        internal static string NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown packet sink stream..
        /// </summary>
        internal static string NS_E_PACKETSINK_UNKNOWN_FEC_STREAM {
            get {
                return ResourceManager.GetString("NS_E_PACKETSINK_UNKNOWN_FEC_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Content Server was unable to page a block..
        /// </summary>
        internal static string NS_E_PAGING_ERROR {
            get {
                return ResourceManager.GetString("NS_E_PAGING_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 is partially reconstructed..
        /// </summary>
        internal static string NS_E_PARTIALLY_REBUILT_DISK {
            get {
                return ResourceManager.GetString("NS_E_PARTIALLY_REBUILT_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have already created sync partnerships with 16 devices. To create a new sync partnership, you must first end an existing partnership..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync content streamed directly from the Internet. If possible, download the file to your computer, and then try to sync the file..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_SYNC_FROM_INTERNET {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_SYNC_FROM_INTERNET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file to your device. The file might be stored in a location that is not supported. Copy the file from its current location to your hard disk, add it to your library, and then try to sync the file again..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_SYNC_FROM_LOCATION {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_SYNC_FROM_LOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This playlist is not valid or is corrupted. Create a new playlist using Windows Media Player, then sync the new playlist instead..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot convert the file to the format required by the device..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_TRANSCODE {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_TRANSCODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your device requires that this file be converted in order to play on the device. However, the device either does not support playing audio, or Windows Media Player cannot convert the file to an audio format that is supported by the device..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your device requires that this file be converted in order to play on the device. However, the device either does not support displaying pictures, or Windows Media Player cannot convert the file to a picture format that is supported by the device..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your device requires that this file be converted in order to play on the device. However, the device either does not support playing video, or Windows Media Player cannot convert the file to a video format that is supported by the device..
        /// </summary>
        internal static string NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO {
            get {
                return ResourceManager.GetString("NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because the device is not responding. This typically occurs when there is a problem with the device firmwa re..
        /// </summary>
        internal static string NS_E_PDA_CEWMDM_DRM_ERROR {
            get {
                return ResourceManager.GetString("NS_E_PDA_CEWMDM_DRM_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot delete a file from the device..
        /// </summary>
        internal static string NS_E_PDA_DELETE_FAILED {
            get {
                return ResourceManager.GetString("NS_E_PDA_DELETE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not enough storage space on the portable device to complete this operation. Delete some unneeded files on the portable device, and then try again..
        /// </summary>
        internal static string NS_E_PDA_DEVICE_FULL {
            get {
                return ResourceManager.GetString("NS_E_PDA_DEVICE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player did not sync some files to the device because there is not enough storage space on the device..
        /// </summary>
        internal static string NS_E_PDA_DEVICE_FULL_IN_SESSION {
            get {
                return ResourceManager.GetString("NS_E_PDA_DEVICE_FULL_IN_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot communicate with the device because the device is not responding. Try reconnecting the device, resetting the device, or contacting the device manufacturer for updated firmware..
        /// </summary>
        internal static string NS_E_PDA_DEVICE_NOT_RESPONDING {
            get {
                return ResourceManager.GetString("NS_E_PDA_DEVICE_NOT_RESPONDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatic and manual sync have been turned off temporarily. To sync to a device, restart Windows Media Player..
        /// </summary>
        internal static string NS_E_PDA_DEVICESUPPORTDISABLED {
            get {
                return ResourceManager.GetString("NS_E_PDA_DEVICESUPPORTDISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because an error occurred while converting the file to another quality level or format. If the problem persists, remove the file from the list of files to sync..
        /// </summary>
        internal static string NS_E_PDA_ENCODER_NOT_RESPONDING {
            get {
                return ResourceManager.GetString("NS_E_PDA_ENCODER_NOT_RESPONDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot open the WAV file..
        /// </summary>
        internal static string NS_E_PDA_FAIL_READ_WAVE_FILE {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAIL_READ_WAVE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while communicating with a portable device or CD drive..
        /// </summary>
        internal static string NS_E_PDA_FAIL_SELECT_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAIL_SELECT_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while burning the file to the disc..
        /// </summary>
        internal static string NS_E_PDA_FAILED_TO_BURN {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAILED_TO_BURN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot convert the file. The file might have been encrypted by the Encrypted File System (EFS). Try decrypting the file first and then syncing it. For information about how to decrypt a file, see Windows Help and Support..
        /// </summary>
        internal static string NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot copy a file from the device to your library..
        /// </summary>
        internal static string NS_E_PDA_FAILED_TO_RETRIEVE_FILE {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAILED_TO_RETRIEVE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while syncing the file to the device..
        /// </summary>
        internal static string NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the picture to the device because a problem occurred while converting the file to another quality level or format. The original file might be damaged or corrupted..
        /// </summary>
        internal static string NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO {
            get {
                return ResourceManager.GetString("NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is busy setting up devices. Try again later..
        /// </summary>
        internal static string NS_E_PDA_INITIALIZINGDEVICES {
            get {
                return ResourceManager.GetString("NS_E_PDA_INITIALIZINGDEVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested action because the device does not support sync..
        /// </summary>
        internal static string NS_E_PDA_MANUALDEVICE {
            get {
                return ResourceManager.GetString("NS_E_PDA_MANUALDEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This device is not available. Connect the device to the computer, and then try again..
        /// </summary>
        internal static string NS_E_PDA_NO_LONGER_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_PDA_NO_LONGER_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because protected files cannot be converted to the required quality level or file format..
        /// </summary>
        internal static string NS_E_PDA_NO_TRANSCODE_OF_DRM {
            get {
                return ResourceManager.GetString("NS_E_PDA_NO_TRANSCODE_OF_DRM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your device is using an outdated driver that is no longer supported by Windows Media Player..
        /// </summary>
        internal static string NS_E_PDA_OBSOLETE_SP {
            get {
                return ResourceManager.GetString("NS_E_PDA_OBSOLETE_SP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To perform the requested action, you must first set up sync with the device..
        /// </summary>
        internal static string NS_E_PDA_PARTNERSHIPNOTEXIST {
            get {
                return ResourceManager.GetString("NS_E_PDA_PARTNERSHIPNOTEXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file to your computer because the file name is too long. Try renaming the file on the device..
        /// </summary>
        internal static string NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while syncing to the device..
        /// </summary>
        internal static string NS_E_PDA_SYNC_FAILED {
            get {
                return ResourceManager.GetString("NS_E_PDA_SYNC_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the subscription content because you are not signed in to the online store that provided it. Sign in to the online store, and then try again..
        /// </summary>
        internal static string NS_E_PDA_SYNC_LOGIN_ERROR {
            get {
                return ResourceManager.GetString("NS_E_PDA_SYNC_LOGIN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to perform the requested action because sync is in progress. You can either stop sync or wait for it to complete, and then try again..
        /// </summary>
        internal static string NS_E_PDA_SYNC_RUNNING {
            get {
                return ResourceManager.GetString("NS_E_PDA_SYNC_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because a file with the same name already exists on the device. Change the file name or try to sync the file to a different folder..
        /// </summary>
        internal static string NS_E_PDA_TITLE_COLLISION {
            get {
                return ResourceManager.GetString("NS_E_PDA_TITLE_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many files with the same name in the folder on the device. Change the file name or sync to a different folder..
        /// </summary>
        internal static string NS_E_PDA_TOO_MANY_FILE_COLLISIONS {
            get {
                return ResourceManager.GetString("NS_E_PDA_TOO_MANY_FILE_COLLISIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have reached the maximum number of files your device allows in a folder. If your device supports playback from subfolders, try creating subfolders on the device and storing some files in them..
        /// </summary>
        internal static string NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY {
            get {
                return ResourceManager.GetString("NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot convert the file to the format required by the device. One or more codecs required to convert the file could not be found..
        /// </summary>
        internal static string NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot convert this file format. If an updated version of the codec used to compress this file is available, install it and then try to sync the file again..
        /// </summary>
        internal static string NS_E_PDA_TRANSCODE_NOT_PERMITTED {
            get {
                return ResourceManager.GetString("NS_E_PDA_TRANSCODE_NOT_PERMITTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The folder that stores converted files is full. Either empty the folder or increase its size, and then try again..
        /// </summary>
        internal static string NS_E_PDA_TRANSCODECACHEFULL {
            get {
                return ResourceManager.GetString("NS_E_PDA_TRANSCODECACHEFULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while communicating with the device. The storage card on the device might be full, the device might be turned off, or the device might not allow playlists or folders to be created on it..
        /// </summary>
        internal static string NS_E_PDA_UNSPECIFIED_ERROR {
            get {
                return ResourceManager.GetString("NS_E_PDA_UNSPECIFIED_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync this file. The Player might not support the file type..
        /// </summary>
        internal static string NS_E_PDA_UNSUPPORTED_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_PDA_UNSUPPORTED_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play one or more files. For additional information, right-click an item that cannot be played, and then click Error Details..
        /// </summary>
        internal static string NS_E_PLAYLIST_CONTAINS_ERRORS {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_CONTAINS_ERRORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist has ended while receding..
        /// </summary>
        internal static string NS_E_PLAYLIST_END_RECEDING {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_END_RECEDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist entry is already playing..
        /// </summary>
        internal static string NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A command applies to a previous playlist entry..
        /// </summary>
        internal static string NS_E_PLAYLIST_ENTRY_HAS_CHANGED {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_ENTRY_HAS_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot jump to a playlist entry that is not inserted in the playlist..
        /// </summary>
        internal static string NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot seek to the desired playlist entry..
        /// </summary>
        internal static string NS_E_PLAYLIST_ENTRY_SEEK {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_ENTRY_SEEK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to parse the requested playlist file..
        /// </summary>
        internal static string NS_E_PLAYLIST_PARSE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_PARSE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No enabled playlist parser plug-in is available to access the requested content..
        /// </summary>
        internal static string NS_E_PLAYLIST_PLUGIN_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_PLUGIN_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot play recursive playlist..
        /// </summary>
        internal static string NS_E_PLAYLIST_RECURSIVE_PLAYLISTS {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_RECURSIVE_PLAYLISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot execute the requested operation because the playlist has been shut down by the Media Server..
        /// </summary>
        internal static string NS_E_PLAYLIST_SHUTDOWN {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_SHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of nested playlists exceeded the limit the server can handle..
        /// </summary>
        internal static string NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not supported for this type of playlist entry..
        /// </summary>
        internal static string NS_E_PLAYLIST_UNSUPPORTED_ENTRY {
            get {
                return ResourceManager.GetString("NS_E_PLAYLIST_UNSUPPORTED_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plug-in CLSID specified is not valid..
        /// </summary>
        internal static string NS_E_PLUGIN_CLSID_INVALID {
            get {
                return ResourceManager.GetString("NS_E_PLUGIN_CLSID_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plug-in has reported an error. See the Troubleshooting tab or the NT Application Event Log for details..
        /// </summary>
        internal static string NS_E_PLUGIN_ERROR_REPORTED {
            get {
                return ResourceManager.GetString("NS_E_PLUGIN_ERROR_REPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player was not closed properly. A damaged or incompatible plug-in might have caused the problem to occur. As a precaution, all optional plug-ins have been disabled..
        /// </summary>
        internal static string NS_E_PLUGIN_NOTSHUTDOWN {
            get {
                return ResourceManager.GetString("NS_E_PLUGIN_NOTSHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One usage of each socket address (protocol/network address/port) is permitted. Verify that other services or applications are not attempting to use the same port and then try to enable the plug-in again..
        /// </summary>
        internal static string NS_E_PORT_IN_USE {
            get {
                return ResourceManager.GetString("NS_E_PORT_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One usage of each socket address (protocol/network address/port) is permitted. Verify that other services (such as IIS) or applications are not attempting to use the same port and then try to enable the plug-in again..
        /// </summary>
        internal static string NS_E_PORT_IN_USE_HTTP {
            get {
                return ResourceManager.GetString("NS_E_PORT_IN_USE_HTTP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is already trying to start the Device Setup Wizard..
        /// </summary>
        internal static string NS_E_PROCESSINGSHOWSYNCWIZARD {
            get {
                return ResourceManager.GetString("NS_E_PROCESSINGSHOWSYNCWIZARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiles on the sources do not match..
        /// </summary>
        internal static string NS_E_PROFILE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_PROFILE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property was not found..
        /// </summary>
        internal static string NS_E_PROPERTY_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_PROPERTY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property is not supported..
        /// </summary>
        internal static string NS_E_PROPERTY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_PROPERTY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property is read only..
        /// </summary>
        internal static string NS_E_PROPERTY_READ_ONLY {
            get {
                return ResourceManager.GetString("NS_E_PROPERTY_READ_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need a license to perform the requested operation on this media file..
        /// </summary>
        internal static string NS_E_PROTECTED_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_PROTECTED_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no protocol or protocol version supported by both the client and the server..
        /// </summary>
        internal static string NS_E_PROTOCOL_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_PROTOCOL_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proxy server is denying access. The username and/or password might be incorrect..
        /// </summary>
        internal static string NS_E_PROXY_ACCESSDENIED {
            get {
                return ResourceManager.GetString("NS_E_PROXY_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was not possible to establish a connection to the proxy server in a timely manner. Please check your proxy server configuration..
        /// </summary>
        internal static string NS_E_PROXY_CONNECT_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_PROXY_CONNECT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate the proxy server. The operation timed out..
        /// </summary>
        internal static string NS_E_PROXY_DNS_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_PROXY_DNS_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proxy server could not be located. Please check your proxy server configuration..
        /// </summary>
        internal static string NS_E_PROXY_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_PROXY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proxy could not provide valid authentication credentials to the media server..
        /// </summary>
        internal static string NS_E_PROXY_SOURCE_ACCESSDENIED {
            get {
                return ResourceManager.GetString("NS_E_PROXY_SOURCE_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proxy did not receive a timely response while attempting to contact the media server..
        /// </summary>
        internal static string NS_E_PROXY_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_PROXY_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be completed while the publishing point is started..
        /// </summary>
        internal static string NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED {
            get {
                return ResourceManager.GetString("NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be completed because the specified publishing point has been removed..
        /// </summary>
        internal static string NS_E_PUBLISHING_POINT_REMOVED {
            get {
                return ResourceManager.GetString("NS_E_PUBLISHING_POINT_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be completed because the publishing point has been stopped..
        /// </summary>
        internal static string NS_E_PUBLISHING_POINT_STOPPED {
            get {
                return ResourceManager.GetString("NS_E_PUBLISHING_POINT_STOPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to establish a connection to the server. Ensure Windows Media Services is started and the HTTP Server control protocol is properly enabled..
        /// </summary>
        internal static string NS_E_PUSH_CANNOTCONNECT {
            get {
                return ResourceManager.GetString("NS_E_PUSH_CANNOTCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified publishing point name is already in use..
        /// </summary>
        internal static string NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME {
            get {
                return ResourceManager.GetString("NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation was not successful and some file cleanup is not complete. For best results, restart your computer..
        /// </summary>
        internal static string NS_E_REBOOT_RECOMMENDED {
            get {
                return ResourceManager.GetString("NS_E_REBOOT_RECOMMENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation was not successful. To continue, you must restart your computer..
        /// </summary>
        internal static string NS_E_REBOOT_REQUIRED {
            get {
                return ResourceManager.GetString("NS_E_REBOOT_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hard disk being used for temporary storage of content has reached the minimum allowed disk space. Create more space on the hard disk and restart encoding..
        /// </summary>
        internal static string NS_E_RECORDQ_DISK_FULL {
            get {
                return ResourceManager.GetString("NS_E_RECORDQ_DISK_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot rip tracks from the CD correctly because the CD drive settings in Device Manager do not match the CD drive settings in the Player..
        /// </summary>
        internal static string NS_E_REDBOOK_ENABLED_WHILE_COPYING {
            get {
                return ResourceManager.GetString("NS_E_REDBOOK_ENABLED_WHILE_COPYING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client redirected to another server..
        /// </summary>
        internal static string NS_E_REDIRECT {
            get {
                return ResourceManager.GetString("NS_E_REDIRECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client is redirected to a proxy server..
        /// </summary>
        internal static string NS_E_REDIRECT_TO_PROXY {
            get {
                return ResourceManager.GetString("NS_E_REDIRECT_TO_PROXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is refusing to fulfill the requested operation..
        /// </summary>
        internal static string NS_E_REFUSED_BY_SERVER {
            get {
                return ResourceManager.GetString("NS_E_REFUSED_BY_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action cannot be performed because a problem occurred with the Windows Media Digital Rights Management (DRM) components on your computer..
        /// </summary>
        internal static string NS_E_REG_FLUSH_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_REG_FLUSH_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 is remirrored..
        /// </summary>
        internal static string NS_E_REMIRRORED_DISK {
            get {
                return ResourceManager.GetString("NS_E_REMIRRORED_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content requires a streaming media client..
        /// </summary>
        internal static string NS_E_REQUIRE_STREAMING_CLIENT {
            get {
                return ResourceManager.GetString("NS_E_REQUIRE_STREAMING_CLIENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Server reset the network connection..
        /// </summary>
        internal static string NS_E_RESET_SOCKET_CONNECTION {
            get {
                return ResourceManager.GetString("NS_E_RESET_SOCKET_CONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Publishing Point or file on the Windows Media Server is no longer available..
        /// </summary>
        internal static string NS_E_RESOURCE_GONE {
            get {
                return ResourceManager.GetString("NS_E_RESOURCE_GONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All audiences in a profile should either be same as input or have video width and height specified..
        /// </summary>
        internal static string NS_E_SAME_AS_INPUT_COMBINATION {
            get {
                return ResourceManager.GetString("NS_E_SAME_AS_INPUT_COMBINATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schema classification failure..
        /// </summary>
        internal static string NS_E_SCHEMA_CLASSIFY_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_SCHEMA_CLASSIFY_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plug-in cannot be enabled because a compatible script debugger is not installed on this system. Install a script debugger, or disable the script debugger option on the general tab of the plug-in&apos;s properties page and try again..
        /// </summary>
        internal static string NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplied buffer is too small.
        /// </summary>
        internal static string NS_E_SDK_BUFFERTOOSMALL {
            get {
                return ResourceManager.GetString("NS_E_SDK_BUFFERTOOSMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media server is denying access. The username and/or password might be incorrect..
        /// </summary>
        internal static string NS_E_SERVER_ACCESSDENIED {
            get {
                return ResourceManager.GetString("NS_E_SERVER_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate the media server. The operation timed out..
        /// </summary>
        internal static string NS_E_SERVER_DNS_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_SERVER_DNS_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified server could not be found..
        /// </summary>
        internal static string NS_E_SERVER_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_SERVER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is currently unable to handle the request due to a temporary overloading or maintenance of the server..
        /// </summary>
        internal static string NS_E_SERVER_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_SERVER_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session not found..
        /// </summary>
        internal static string NS_E_SESSION_INVALID {
            get {
                return ResourceManager.GetString("NS_E_SESSION_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session not found..
        /// </summary>
        internal static string NS_E_SESSION_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_SESSION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not set the disk UID..
        /// </summary>
        internal static string NS_E_SET_DISK_UID_FAILED {
            get {
                return ResourceManager.GetString("NS_E_SET_DISK_UID_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation is blocked because your computer does not meet one or more of the setup requirements..
        /// </summary>
        internal static string NS_E_SETUP_BLOCKED {
            get {
                return ResourceManager.GetString("NS_E_SETUP_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup cannot migrate the Windows Media Digital Rights Management (DRM) components..
        /// </summary>
        internal static string NS_E_SETUP_DRM_MIGRATION_FAILED {
            get {
                return ResourceManager.GetString("NS_E_SETUP_DRM_MIGRATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup cannot migrate the Windows Media Digital Rights Management (DRM) components. In addition, some skin or playlist components cannot be installed..
        /// </summary>
        internal static string NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some skin or playlist components cannot be installed..
        /// </summary>
        internal static string NS_E_SETUP_IGNORABLE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_SETUP_IGNORABLE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation was not successful..
        /// </summary>
        internal static string NS_E_SETUP_INCOMPLETE {
            get {
                return ResourceManager.GetString("NS_E_SETUP_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Media sharing has been turned off because a required Windows setting or component has changed..
        /// </summary>
        internal static string NS_E_SHARING_STATE_OUT_OF_SYNC {
            get {
                return ResourceManager.GetString("NS_E_SHARING_STATE_OUT_OF_SYNC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is already in use. Close other programs that might be using the file, or stop playing the file, and then try again..
        /// </summary>
        internal static string NS_E_SHARING_VIOLATION {
            get {
                return ResourceManager.GetString("NS_E_SHARING_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session is being terminated locally..
        /// </summary>
        internal static string NS_E_SHUTDOWN {
            get {
                return ResourceManager.GetString("NS_E_SHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not use digital playback to play the CD. The Player has automatically switched the CD drive to analog playback. To switch back to digital CD playback, click Organize, click Options, and then use the Devices tab..
        /// </summary>
        internal static string NS_E_SLOW_READ_DIGITAL {
            get {
                return ResourceManager.GetString("NS_E_SLOW_READ_DIGITAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play audio CDs correctly because the CD drive is slow and error correction is turned on. To increase performance, turn off playback error correction for this drive..
        /// </summary>
        internal static string NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION {
            get {
                return ResourceManager.GetString("NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same source index in different audiences should have the same time code mode..
        /// </summary>
        internal static string NS_E_SMPTEMODE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_SMPTEMODE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This source type does not support looping..
        /// </summary>
        internal static string NS_E_SOURCE_CANNOT_LOOP {
            get {
                return ResourceManager.GetString("NS_E_SOURCE_CANNOT_LOOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source has not been set up completely..
        /// </summary>
        internal static string NS_E_SOURCE_NOTSPECIFIED {
            get {
                return ResourceManager.GetString("NS_E_SOURCE_NOTSPECIFIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No enabled data source plug-in is available to access the requested content..
        /// </summary>
        internal static string NS_E_SOURCE_PLUGIN_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_SOURCE_PLUGIN_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source is not yet prepared..
        /// </summary>
        internal static string NS_E_SOURCEGROUP_NOTPREPARED {
            get {
                return ResourceManager.GetString("NS_E_SOURCEGROUP_NOTPREPARED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify a mixed voice and audio mode in order to use an optimization definition file..
        /// </summary>
        internal static string NS_E_SPEECHEDL_ON_NON_MIXEDMODE {
            get {
                return ResourceManager.GetString("NS_E_SPEECHEDL_ON_NON_MIXEDMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The streaming media description is no longer current..
        /// </summary>
        internal static string NS_E_STALE_PRESENTATION {
            get {
                return ResourceManager.GetString("NS_E_STALE_PRESENTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no more data in the stream..
        /// </summary>
        internal static string NS_E_STREAM_END {
            get {
                return ResourceManager.GetString("NS_E_STREAM_END", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to fast forward or rewind could not be fulfilled..
        /// </summary>
        internal static string NS_E_STRIDE_REFUSED {
            get {
                return ResourceManager.GetString("NS_E_STRIDE_REFUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot download this item because the server is not responding. The server might be temporarily unavailable or you might have lost your Internet connection..
        /// </summary>
        internal static string NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sign in to the online store. Verify that you are using the correct user name and password. If the problem persists, the store might be temporarily unavailable..
        /// </summary>
        internal static string NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED {
            get {
                return ResourceManager.GetString("NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content provider has not granted you the right to play this file. Go to the content provider&apos;s online store to get play rights..
        /// </summary>
        internal static string NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED {
            get {
                return ResourceManager.GetString("NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to change sync settings at this time. Try again later..
        /// </summary>
        internal static string NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS {
            get {
                return ResourceManager.GetString("NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot save the sync settings because your device is full. Delete some unneeded files on your device and then try again..
        /// </summary>
        internal static string NS_E_SYNCWIZ_DEVICE_FULL {
            get {
                return ResourceManager.GetString("NS_E_SYNCWIZ_DEVICE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The table key was not found..
        /// </summary>
        internal static string NS_E_TABLE_KEY_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_TABLE_KEY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This media file is corrupted or invalid. Contact the content provider for a new file..
        /// </summary>
        internal static string NS_E_TAMPERED_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_TAMPERED_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TCP protocol not enabled. Not trying %1!ls!..
        /// </summary>
        internal static string NS_E_TCP_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_TCP_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Title Server %1 has failed..
        /// </summary>
        internal static string NS_E_TIGER_FAIL {
            get {
                return ResourceManager.GetString("NS_E_TIGER_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to generate a time code for an audio-only session..
        /// </summary>
        internal static string NS_E_TIMECODE_REQUIRES_VIDEOSTREAM {
            get {
                return ResourceManager.GetString("NS_E_TIMECODE_REQUIRES_VIDEOSTREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server, a computer set up to offer multimedia content to other computers, could not handle your request for multimedia content in a timely manner. Please try again later..
        /// </summary>
        internal static string NS_E_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file exceeds the per title maximum bitrate. See NetShow Theater documentation for more information..
        /// </summary>
        internal static string NS_E_TITLE_BITRATE {
            get {
                return ResourceManager.GetString("NS_E_TITLE_BITRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum size of a title exceeded..
        /// </summary>
        internal static string NS_E_TITLE_SIZE_EXCEEDED {
            get {
                return ResourceManager.GetString("NS_E_TITLE_SIZE_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to specify more than one audio input..
        /// </summary>
        internal static string NS_E_TOO_MANY_AUDIO {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_AUDIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one device control plug-in can control a device..
        /// </summary>
        internal static string NS_E_TOO_MANY_DEVICECONTROL {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_DEVICECONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request could not reach the media server (too many hops)..
        /// </summary>
        internal static string NS_E_TOO_MANY_HOPS {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_HOPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one multicast data writer plug-in can be enabled for a publishing point..
        /// </summary>
        internal static string NS_E_TOO_MANY_MULTICAST_SINKS {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_MULTICAST_SINKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server session limit was exceeded..
        /// </summary>
        internal static string NS_E_TOO_MANY_SESS {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_SESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of titles exceeded..
        /// </summary>
        internal static string NS_E_TOO_MANY_TITLES {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_TITLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to specify more than two video inputs..
        /// </summary>
        internal static string NS_E_TOO_MANY_VIDEO {
            get {
                return ResourceManager.GetString("NS_E_TOO_MANY_VIDEO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encoding process was unable to keep up with the amount of supplied data..
        /// </summary>
        internal static string NS_E_TOO_MUCH_DATA {
            get {
                return ResourceManager.GetString("NS_E_TOO_MUCH_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is sending too much data. The connection has been terminated..
        /// </summary>
        internal static string NS_E_TOO_MUCH_DATA_FROM_SERVER {
            get {
                return ResourceManager.GetString("NS_E_TOO_MUCH_DATA_FROM_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is only available for download when you buy the entire album..
        /// </summary>
        internal static string NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE {
            get {
                return ResourceManager.GetString("NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must buy the file before you can download it..
        /// </summary>
        internal static string NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE {
            get {
                return ResourceManager.GetString("NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have exceeded the maximum number of files that can be purchased in a single transaction..
        /// </summary>
        internal static string NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED {
            get {
                return ResourceManager.GetString("NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot delete these files right now. If the Player is syncing, wait until it is complete and then try again..
        /// </summary>
        internal static string NS_E_TRANSCODE_DELETECACHEERROR {
            get {
                return ResourceManager.GetString("NS_E_TRANSCODE_DELETECACHEERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transform plug-in is not valid. It may be damaged or you may not have the required permissions to access the plug-in..
        /// </summary>
        internal static string NS_E_TRANSFORM_PLUGIN_INVALID {
            get {
                return ResourceManager.GetString("NS_E_TRANSFORM_PLUGIN_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transform plug-in could not be found..
        /// </summary>
        internal static string NS_E_TRANSFORM_PLUGIN_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_TRANSFORM_PLUGIN_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UDP protocol not enabled. Not trying %1!ls!..
        /// </summary>
        internal static string NS_E_UDP_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_UDP_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot rip the CD because a valid rip location cannot be created..
        /// </summary>
        internal static string NS_E_UNABLE_TO_CREATE_RIP_LOCATION {
            get {
                return ResourceManager.GetString("NS_E_UNABLE_TO_CREATE_RIP_LOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to mix uncompressed and compressed content in a session..
        /// </summary>
        internal static string NS_E_UNCOMP_COMP_COMBINATION {
            get {
                return ResourceManager.GetString("NS_E_UNCOMP_COMP_COMBINATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the level of protection required for uncompressed digital audio..
        /// </summary>
        internal static string NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player does not support the level of protection required for uncompressed digital video..
        /// </summary>
        internal static string NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to start encoding because the display size or color has changed since the current session was defined. Restore the previous settings or create a new session..
        /// </summary>
        internal static string NS_E_UNEXPECTED_DISPLAY_SETTINGS {
            get {
                return ResourceManager.GetString("NS_E_UNEXPECTED_DISPLAY_SETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred with the MSAudio codec..
        /// </summary>
        internal static string NS_E_UNEXPECTED_MSAUDIO_ERROR {
            get {
                return ResourceManager.GetString("NS_E_UNEXPECTED_MSAUDIO_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified protocol is not supported..
        /// </summary>
        internal static string NS_E_UNKNOWN_PROTOCOL {
            get {
                return ResourceManager.GetString("NS_E_UNKNOWN_PROTOCOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified protocol is not recognized. Be sure that the file name and syntax, such as slashes, are correct for the protocol..
        /// </summary>
        internal static string NS_E_UNRECOGNIZED_STREAM_TYPE {
            get {
                return ResourceManager.GetString("NS_E_UNRECOGNIZED_STREAM_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This archive operation is not supported..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_ARCHIVEOPERATION {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_ARCHIVEOPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This archive type is not supported..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_ARCHIVETYPE {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_ARCHIVETYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to open this device..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_ENCODER_DEVICE {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_ENCODER_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified language is not supported..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_LANGUAGE {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_LANGUAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plug-in does not support the specified load type..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_LOAD_TYPE {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_LOAD_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given property is not supported..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_PROPERTY {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified source type is not supported..
        /// </summary>
        internal static string NS_E_UNSUPPORTED_SOURCETYPE {
            get {
                return ResourceManager.GetString("NS_E_UNSUPPORTED_SOURCETYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the playlist because it is not valid..
        /// </summary>
        internal static string NS_E_URLLIST_INVALIDFORMAT {
            get {
                return ResourceManager.GetString("NS_E_URLLIST_INVALIDFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use file source..
        /// </summary>
        internal static string NS_E_USE_FILE_SOURCE {
            get {
                return ResourceManager.GetString("NS_E_USE_FILE_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User has stopped the operation..
        /// </summary>
        internal static string NS_E_USER_STOP {
            get {
                return ResourceManager.GetString("NS_E_USER_STOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same source index in different audiences should use the same VBR encoding mode..
        /// </summary>
        internal static string NS_E_VBRMODE_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_VBRMODE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was not possible to create a video capture window..
        /// </summary>
        internal static string NS_E_VIDCAPCREATEWINDOW {
            get {
                return ResourceManager.GetString("NS_E_VIDCAPCREATEWINDOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a stream active on this video device..
        /// </summary>
        internal static string NS_E_VIDCAPDRVINUSE {
            get {
                return ResourceManager.GetString("NS_E_VIDCAPDRVINUSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was not possible to start the video device..
        /// </summary>
        internal static string NS_E_VIDCAPSTARTFAILED {
            get {
                return ResourceManager.GetString("NS_E_VIDCAPSTARTFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video bit rate for an audience with a higher total bit rate must be greater than one with a lower total bit rate..
        /// </summary>
        internal static string NS_E_VIDEO_BITRATE_STEPDOWN {
            get {
                return ResourceManager.GetString("NS_E_VIDEO_BITRATE_STEPDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred with the video codec..
        /// </summary>
        internal static string NS_E_VIDEO_CODEC_ERROR {
            get {
                return ResourceManager.GetString("NS_E_VIDEO_CODEC_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested video codec is not installed on this system..
        /// </summary>
        internal static string NS_E_VIDEO_CODEC_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("NS_E_VIDEO_CODEC_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to open the specified video capture device because it is currently in use..
        /// </summary>
        internal static string NS_E_VIDEODEVICE_BUSY {
            get {
                return ResourceManager.GetString("NS_E_VIDEODEVICE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to open the specified video capture device because an unexpected error has occurred..
        /// </summary>
        internal static string NS_E_VIDEODEVICE_UNEXPECTED {
            get {
                return ResourceManager.GetString("NS_E_VIDEODEVICE_UNEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video capture driver returned an unrecoverable error. It is now in an unstable state..
        /// </summary>
        internal static string NS_E_VIDEODRIVER_UNSTABLE {
            get {
                return ResourceManager.GetString("NS_E_VIDEODRIVER_UNSTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video source does not support the requested output format or color depth..
        /// </summary>
        internal static string NS_E_VIDSOURCECOMPRESSION {
            get {
                return ResourceManager.GetString("NS_E_VIDSOURCECOMPRESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video source does not support the requested capture size..
        /// </summary>
        internal static string NS_E_VIDSOURCESIZE {
            get {
                return ResourceManager.GetString("NS_E_VIDSOURCESIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file, %1, cannot be loaded onto the specified server, %2..
        /// </summary>
        internal static string NS_E_WALKER_SERVER {
            get {
                return ResourceManager.GetString("NS_E_WALKER_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown file type..
        /// </summary>
        internal static string NS_E_WALKER_UNKNOWN {
            get {
                return ResourceManager.GetString("NS_E_WALKER_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a usage error with file parser..
        /// </summary>
        internal static string NS_E_WALKER_USAGE {
            get {
                return ResourceManager.GetString("NS_E_WALKER_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening wave device, the device might be in use..
        /// </summary>
        internal static string NS_E_WAVE_OPEN {
            get {
                return ResourceManager.GetString("NS_E_WAVE_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player has encountered an unknown network error..
        /// </summary>
        internal static string NS_E_WINSOCK_ERROR_STRING {
            get {
                return ResourceManager.GetString("NS_E_WINSOCK_ERROR_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another wizard is currently running. Please close the other wizard or wait until it finishes before attempting to run this wizard again..
        /// </summary>
        internal static string NS_E_WIZARD_RUNNING {
            get {
                return ResourceManager.GetString("NS_E_WIZARD_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because the device needs to be updated..
        /// </summary>
        internal static string NS_E_WMDM_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_WMDM_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied configuration file is not supported by this version of the encoder..
        /// </summary>
        internal static string NS_E_WME_VERSION_MISMATCH {
            get {
                return ResourceManager.GetString("NS_E_WME_VERSION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be queued for seamless playback..
        /// </summary>
        internal static string NS_E_WMG_CANNOTQUEUE {
            get {
                return ResourceManager.GetString("NS_E_WMG_CANNOTQUEUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the protected file. The Player detected that the connection to your hardware might not be secure..
        /// </summary>
        internal static string NS_E_WMG_COPP_SECURITY_INVALID {
            get {
                return ResourceManager.GetString("NS_E_WMG_COPP_SECURITY_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player output link protection is unsupported on this system..
        /// </summary>
        internal static string NS_E_WMG_COPP_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMG_COPP_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File transfer streams are not allowed in the standalone Player..
        /// </summary>
        internal static string NS_E_WMG_FILETRANSFERNOTALLOWED {
            get {
                return ResourceManager.GetString("NS_E_WMG_FILETRANSFERNOTALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the protected file. The Player cannot verify that the connection to your video card is secure. Try installing an updated device driver for your video card..
        /// </summary>
        internal static string NS_E_WMG_INVALID_COPP_CERTIFICATE {
            get {
                return ResourceManager.GetString("NS_E_WMG_INVALID_COPP_CERTIFICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation attempted in an invalid graph state..
        /// </summary>
        internal static string NS_E_WMG_INVALIDSTATE {
            get {
                return ResourceManager.GetString("NS_E_WMG_INVALIDSTATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because your media usage rights are corrupted. If you previously backed up your media usage rights, try restoring them..
        /// </summary>
        internal static string NS_E_WMG_LICENSE_TAMPERED {
            get {
                return ResourceManager.GetString("NS_E_WMG_LICENSE_TAMPERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media SDK interface needed to complete the operation does not exist at this time..
        /// </summary>
        internal static string NS_E_WMG_NOSDKINTERFACE {
            get {
                return ResourceManager.GetString("NS_E_WMG_NOSDKINTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play a portion of the file because it requires a codec that either could not be downloaded or that is not supported by the Player..
        /// </summary>
        internal static string NS_E_WMG_NOTALLOUTPUTSRENDERED {
            get {
                return ResourceManager.GetString("NS_E_WMG_NOTALLOUTPUTSRENDERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The rendering or digital signal processing plug-in cannot be instantiated..
        /// </summary>
        internal static string NS_E_WMG_PLUGINUNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMG_PLUGINUNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot download media usage rights for a file in the playlist..
        /// </summary>
        internal static string NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED {
            get {
                return ResourceManager.GetString("NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file at the requested speed..
        /// </summary>
        internal static string NS_E_WMG_RATEUNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMG_RATEUNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A renderer cannot be inserted in a stream while one already exists..
        /// </summary>
        internal static string NS_E_WMG_SINKALREADYEXISTS {
            get {
                return ResourceManager.GetString("NS_E_WMG_SINKALREADYEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while trying to queue a file..
        /// </summary>
        internal static string NS_E_WMG_UNEXPECTEDPREROLLSTATUS {
            get {
                return ResourceManager.GetString("NS_E_WMG_UNEXPECTEDPREROLLSTATUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot access the file. The file might be in use, you might not have access to the computer where the file is stored, or your proxy settings might not be correct..
        /// </summary>
        internal static string NS_E_WMP_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("NS_E_WMP_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while adding one or more files to the library..
        /// </summary>
        internal static string NS_E_WMP_ADDTOLIBRARY_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_ADDTOLIBRARY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is already in use. Stop playing any items, close all Player dialog boxes, and then try again..
        /// </summary>
        internal static string NS_E_WMP_ALREADY_IN_USE {
            get {
                return ResourceManager.GetString("NS_E_WMP_ALREADY_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play, burn, rip, or sync the file because a required audio codec is not installed on your computer..
        /// </summary>
        internal static string NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An audio device was disconnected or reconfigured. Verify that the audio device is connected, and then try to play the item again..
        /// </summary>
        internal static string NS_E_WMP_AUDIO_DEVICE_LOST {
            get {
                return ResourceManager.GetString("NS_E_WMP_AUDIO_DEVICE_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because there is a problem with your sound device. There might not be a sound device installed on your computer, it might be in use by another program, or it might not be functioning properly..
        /// </summary>
        internal static string NS_E_WMP_AUDIO_HW_PROBLEM {
            get {
                return ResourceManager.GetString("NS_E_WMP_AUDIO_HW_PROBLEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The state is not valid for this request..
        /// </summary>
        internal static string NS_E_WMP_AUTOPLAY_INVALID_STATE {
            get {
                return ResourceManager.GetString("NS_E_WMP_AUTOPLAY_INVALID_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because there might be a problem with your sound or video device. Try installing an updated device driver..
        /// </summary>
        internal static string NS_E_WMP_BAD_DRIVER {
            get {
                return ResourceManager.GetString("NS_E_WMP_BAD_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bitmap could not be created..
        /// </summary>
        internal static string NS_E_WMP_BMP_BITMAP_NOT_CREATED {
            get {
                return ResourceManager.GetString("NS_E_WMP_BMP_BITMAP_NOT_CREATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compression format defined in BMP not supported..
        /// </summary>
        internal static string NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid bitmask in BMP file..
        /// </summary>
        internal static string NS_E_WMP_BMP_INVALID_BITMASK {
            get {
                return ResourceManager.GetString("NS_E_WMP_BMP_INVALID_BITMASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Bitmap format..
        /// </summary>
        internal static string NS_E_WMP_BMP_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_BMP_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Topdown DIB not supported..
        /// </summary>
        internal static string NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter is not valid..
        /// </summary>
        internal static string NS_E_WMP_BSTR_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_WMP_BSTR_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some files might not fit on the CD. The required space cannot be calculated accurately because some files might be missing duration information. To ensure the calculation is accurate, play the files that are missing duration information..
        /// </summary>
        internal static string NS_E_WMP_BURN_DISC_OVERFLOW {
            get {
                return ResourceManager.GetString("NS_E_WMP_BURN_DISC_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file cannot be burned to a CD because it is not located on your computer..
        /// </summary>
        internal static string NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot find the file. If you are trying to play, burn, or sync an item that is in your library, the item might point to a file that has been moved, renamed, or deleted..
        /// </summary>
        internal static string NS_E_WMP_CANNOT_FIND_FILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_CANNOT_FIND_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot find the specified path. Verify that the path is typed correctly. If it is, the path does not exist in the specified location, or the computer where the path is located is not available..
        /// </summary>
        internal static string NS_E_WMP_CANNOT_FIND_FOLDER {
            get {
                return ResourceManager.GetString("NS_E_WMP_CANNOT_FIND_FOLDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be added to the library because it is a protected DVR-MS file. This content cannot be played back by Windows Media Player..
        /// </summary>
        internal static string NS_E_WMP_CANT_PLAY_PROTECTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_CANT_PLAY_PROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CD drive is in use by another user. Wait for the task to complete, and then try again..
        /// </summary>
        internal static string NS_E_WMP_CD_ANOTHER_USER {
            get {
                return ResourceManager.GetString("NS_E_WMP_CD_ANOTHER_USER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files because there is not enough free disk space to store the temporary files. Delete some unneeded files on your hard disk, and then try again..
        /// </summary>
        internal static string NS_E_WMP_CD_STASH_NO_SPACE {
            get {
                return ResourceManager.GetString("NS_E_WMP_CD_STASH_NO_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A codec is required to play this file. To determine if this codec is available to download from the web, click Web Help..
        /// </summary>
        internal static string NS_E_WMP_CODEC_NEEDED_WITH_4CC {
            get {
                return ResourceManager.GetString("NS_E_WMP_CODEC_NEEDED_WITH_4CC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An audio codec is needed to play this file. To determine if this codec is available to download from the web, click Web Help..
        /// </summary>
        internal static string NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG {
            get {
                return ResourceManager.GetString("NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play this file until you complete the software component upgrade. After the component has been upgraded, try to play the file again..
        /// </summary>
        internal static string NS_E_WMP_COMPONENT_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_WMP_COMPONENT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the server is not responding. Verify that you are connected to the network, and then try again later..
        /// </summary>
        internal static string NS_E_WMP_CONNECT_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONNECT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library. The file might not be valid..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_FILE_CORRUPT {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_FILE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_FILE_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_FILE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library because the content provider prohibits it. For assistance, contact the company that provided the file..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library because the content provider prohibits it. For assistance, contact the company that provided the file..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library. The plug-in required to add the file is not installed properly. For assistance, click Web Help to display the website of the company that provided the file..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library. The plug-in required to add the file is not installed properly. For assistance, contact the company that provided the file..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library. The plug-in required to add the file is not installed properly. For assistance, contact the company that provided the file..
        /// </summary>
        internal static string NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER {
            get {
                return ResourceManager.GetString("NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPG Images are not recommended for use as a positionImage..
        /// </summary>
        internal static string NS_E_WMP_CS_JPGPOSITIONIMAGE {
            get {
                return ResourceManager.GetString("NS_E_WMP_CS_JPGPOSITIONIMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The (%s) image&apos;s size is not evenly divisible by the positionImage&apos;s size..
        /// </summary>
        internal static string NS_E_WMP_CS_NOTEVENLYDIVISIBLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_CS_NOTEVENLYDIVISIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot compute a Digital Audio Id for the song. It is too short..
        /// </summary>
        internal static string NS_E_WMP_DAI_SONGTOOSHORT {
            get {
                return ResourceManager.GetString("NS_E_WMP_DAI_SONGTOOSHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot download additional media usage rights until the current download is complete..
        /// </summary>
        internal static string NS_E_WMP_DRM_ACQUIRING_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_ACQUIRING_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have exceeded your restore limit for the day. Try restoring your media usage rights tomorrow..
        /// </summary>
        internal static string NS_E_WMP_DRM_CANNOT_RESTORE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_CANNOT_RESTORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Windows Media Digital Rights Management (DRM) component encountered a problem. Contact Microsoft Product Support..
        /// </summary>
        internal static string NS_E_WMP_DRM_COMPONENT_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_COMPONENT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot restore your media usage rights because it could not find any backed up rights on your computer..
        /// </summary>
        internal static string NS_E_WMP_DRM_CORRUPT_BACKUP {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_CORRUPT_BACKUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the protected file because there is a problem with your sound device. Try installing a new device driver or use a different sound device..
        /// </summary>
        internal static string NS_E_WMP_DRM_DRIVER_AUTH_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_DRIVER_AUTH_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot verify the file&apos;s media usage rights. If you obtained this file from an online store, go to the online store to get the necessary rights..
        /// </summary>
        internal static string NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error during upgrade..
        /// </summary>
        internal static string NS_E_WMP_DRM_INDIV_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_INDIV_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required Windows Media Digital Rights Management (DRM) component cannot be validated. You might be able to resolve the problem by reinstalling the Player..
        /// </summary>
        internal static string NS_E_WMP_DRM_INVALID_SIG {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_INVALID_SIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content provider has revoked the media usage rights for this file. If you obtained this file from an online store, ask the store if a new version of the file is available..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media usage rights for this file have expired or are no longer valid. If you obtained the file from an online store, sign in to the store, and then try again..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media usage rights for this file require a feature that is not supported in your current version of Windows Media Player or your current version of Windows. If you obtained this file from an online store, contact the store for further assistance..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_NOSAP {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_NOSAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot download the media usage rights for the file. If you obtained the file from an online store, sign in to the store, and then try again..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_NOTACQUIRED {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_NOTACQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media usage rights for this file are not yet valid. To see when they will become valid, right-click the file in the library, click Properties, and then click the Media Usage Rights tab..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_NOTENABLED {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_NOTENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot download media usage rights because the server is not available (for example, the server might be busy or not online)..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media usage rights for this file are not valid. If you obtained this file from an online store, contact the store for assistance..
        /// </summary>
        internal static string NS_E_WMP_DRM_LICENSE_UNUSABLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_LICENSE_UNUSABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play, sync, or burn the protected file because a problem occurred with the Windows Media Digital Rights Management (DRM) system. You might need to connect to the Internet to update your DRM components..
        /// </summary>
        internal static string NS_E_WMP_DRM_NEEDS_AUTHORIZATION {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_NEEDS_AUTHORIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your media usage rights have become corrupted or are no longer valid. This might happen if you have replaced hardware components in your computer..
        /// </summary>
        internal static string NS_E_WMP_DRM_NEW_HARDWARE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_NEW_HARDWARE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to obtain the device&apos;s certificate. Please contact the device manufacturer for a firmware update or for other steps to resolve this problem..
        /// </summary>
        internal static string NS_E_WMP_DRM_NO_DEVICE_CERT {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_NO_DEVICE_CERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play, burn, rip, or sync the protected file because you do not have the appropriate rights..
        /// </summary>
        internal static string NS_E_WMP_DRM_NO_RIGHTS {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_NO_RIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to sync because this device&apos;s internal clock is not set correctly. To set the clock, select the option to set the device clock on the Privacy tab of the Options dialog box, connect to the Internet, and then sync the device again. For additional assistance, click Web Help..
        /// </summary>
        internal static string NS_E_WMP_DRM_NO_SECURE_CLOCK {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_NO_SECURE_CLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is trying to acquire media usage rights for a file that is no longer being used. Rights acquisition will stop..
        /// </summary>
        internal static string NS_E_WMP_DRM_NOT_ACQUIRING {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_NOT_ACQUIRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot download media usage rights at this time. Try again later..
        /// </summary>
        internal static string NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE {
            get {
                return ResourceManager.GetString("NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. The Player might not support the file type or a required codec might not be installed on your computer..
        /// </summary>
        internal static string NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while erasing the disc..
        /// </summary>
        internal static string NS_E_WMP_ERASE_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_ERASE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player external object is not ready..
        /// </summary>
        internal static string NS_E_WMP_EXTERNAL_NOTREADY {
            get {
                return ResourceManager.GetString("NS_E_WMP_EXTERNAL_NOTREADY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot display the picture file. The player either does not support the picture type or the picture is corrupted..
        /// </summary>
        internal static string NS_E_WMP_FAILED_TO_OPEN_IMAGE {
            get {
                return ResourceManager.GetString("NS_E_WMP_FAILED_TO_OPEN_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot open the Windows Media Download file. The file might be damaged..
        /// </summary>
        internal static string NS_E_WMP_FAILED_TO_OPEN_WMD {
            get {
                return ResourceManager.GetString("NS_E_WMP_FAILED_TO_OPEN_WMD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while ripping the track from the CD..
        /// </summary>
        internal static string NS_E_WMP_FAILED_TO_RIP_TRACK {
            get {
                return ResourceManager.GetString("NS_E_WMP_FAILED_TO_RIP_TRACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while saving the file..
        /// </summary>
        internal static string NS_E_WMP_FAILED_TO_SAVE_FILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_FAILED_TO_SAVE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while creating or saving the playlist..
        /// </summary>
        internal static string NS_E_WMP_FAILED_TO_SAVE_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMP_FAILED_TO_SAVE_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is too large to fit on a disc..
        /// </summary>
        internal static string NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD {
            get {
                return ResourceManager.GetString("NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to determine if this file can fit on a disc because Windows Media Player cannot detect the length of the file. Playing the file before burning might enable the Player to detect the file length..
        /// </summary>
        internal static string NS_E_WMP_FILE_NO_DURATION {
            get {
                return ResourceManager.GetString("NS_E_WMP_FILE_NO_DURATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while playing the file..
        /// </summary>
        internal static string NS_E_WMP_FILE_OPEN_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_FILE_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to burn this file type to an audio CD. Windows Media Player can burn the following file types to an audio CD: WMA, MP3, or WAV..
        /// </summary>
        internal static string NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD {
            get {
                return ResourceManager.GetString("NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is already searching for files to add to your library. Wait for the current process to finish before attempting to search again..
        /// </summary>
        internal static string NS_E_WMP_FILESCANALREADYSTARTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_FILESCANALREADYSTARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while formatting the device..
        /// </summary>
        internal static string NS_E_WMP_FORMAT_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_FORMAT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid GIF version. Only 87a or 89a supported..
        /// </summary>
        internal static string NS_E_WMP_GIF_BAD_VERSION_NUMBER {
            get {
                return ResourceManager.GetString("NS_E_WMP_GIF_BAD_VERSION_NUMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid GIF file..
        /// </summary>
        internal static string NS_E_WMP_GIF_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_GIF_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No images found in GIF file..
        /// </summary>
        internal static string NS_E_WMP_GIF_NO_IMAGE_IN_FILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_GIF_NO_IMAGE_IN_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected end of file. GIF file might be corrupt..
        /// </summary>
        internal static string NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot switch to Full Screen. You might need to adjust your Windows display settings. Open display settings in Control Panel, and then try setting Hardware acceleration to Full..
        /// </summary>
        internal static string NS_E_WMP_GOFULLSCREEN_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_GOFULLSCREEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is unable to find the media you are looking for..
        /// </summary>
        internal static string NS_E_WMP_HME_INVALIDOBJECTID {
            get {
                return ResourceManager.GetString("NS_E_WMP_HME_INVALIDOBJECTID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This container does not support search on items..
        /// </summary>
        internal static string NS_E_WMP_HME_NOTSEARCHABLEFORITEMS {
            get {
                return ResourceManager.GetString("NS_E_WMP_HME_NOTSEARCHABLEFORITEMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player download manager cannot function properly because the Player main window cannot be found. Try restarting the Player..
        /// </summary>
        internal static string NS_E_WMP_HWND_NOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMP_HWND_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image type not supported..
        /// </summary>
        internal static string NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image file might be corrupt..
        /// </summary>
        internal static string NS_E_WMP_IMAGE_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAGE_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files. Verify that the burner is connected properly and that the disc is clean and not damaged. If the burner is already in use, wait until the current task finishes or quit other programs that might be using the burner..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_DEVICE_BUSY {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_DEVICE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files. If the burner is busy, wait for the current task to finish. If necessary, verify that the burner is connected properly and that you have installed the latest device driver..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files. Verify that the burner is connected properly, and then try again..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_DEVICE_NOTPRESENT {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_DEVICE_NOTPRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while burning. Verify that the burner is connected properly and that the disc is clean and not damaged..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files to the CD. Verify that the disc is clean and not damaged. If necessary, select a slower recording speed or try a different brand of blank discs..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_GENERIC {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_GENERIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot burn the files to the CD..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_LOSS_OF_STREAMING {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_LOSS_OF_STREAMING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not complete burning because the disc is not compatible with your drive. Try inserting a different kind of recordable media or use a disc that supports a write speed that is compatible with your drive..
        /// </summary>
        internal static string NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot erase the rewritable CD or DVD. Verify that the CD or DVD burner is connected properly and that the disc is clean and not damaged. If the burner is already in use, wait until the current task finishes or quit other programs that might be using the burner..
        /// </summary>
        internal static string NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error while erasing the rewritable CD or DVD. Verify that the CD or DVD burner is connected properly and that the disc is clean and not damaged..
        /// </summary>
        internal static string NS_E_WMP_IMAPI2_ERASE_FAIL {
            get {
                return ResourceManager.GetString("NS_E_WMP_IMAPI2_ERASE_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist cannot be opened because it is stored in a shared folder on another computer. If possible, move the playlist to the playlists folder on your computer..
        /// </summary>
        internal static string NS_E_WMP_INVALID_ASX {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_ASX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the required codec is not valid..
        /// </summary>
        internal static string NS_E_WMP_INVALID_KEY {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the file to the library because the file format is not supported..
        /// </summary>
        internal static string NS_E_WMP_INVALID_LIBRARY_ADD {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_LIBRARY_ADD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Max property cannot be less than Min property..
        /// </summary>
        internal static string NS_E_WMP_INVALID_MAX_VAL {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_MAX_VAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Min property cannot be greater than Max property..
        /// </summary>
        internal static string NS_E_WMP_INVALID_MIN_VAL {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_MIN_VAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the specified protocol is not supported. If you typed a URL in the Open URL dialog box, try using a different transport protocol (for example, &quot;http:&quot; or &quot;rtsp:&quot;)..
        /// </summary>
        internal static string NS_E_WMP_INVALID_PROTOCOL {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_PROTOCOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested action at this time..
        /// </summary>
        internal static string NS_E_WMP_INVALID_REQUEST {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem with the skin file. The skin file might not be valid..
        /// </summary>
        internal static string NS_E_WMP_INVALID_SKIN {
            get {
                return ResourceManager.GetString("NS_E_WMP_INVALID_SKIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid JPEG format..
        /// </summary>
        internal static string NS_E_WMP_JPG_BAD_DCTSIZE {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_BAD_DCTSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal JPEG Library error. Unsupported JPEG data precision..
        /// </summary>
        internal static string NS_E_WMP_JPG_BAD_PRECISION {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_BAD_PRECISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal version error. Unexpected JPEG library version..
        /// </summary>
        internal static string NS_E_WMP_JPG_BAD_VERSION_NUMBER {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_BAD_VERSION_NUMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPEG CCIR601 not supported..
        /// </summary>
        internal static string NS_E_WMP_JPG_CCIR601_NOTIMPL {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_CCIR601_NOTIMPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPEG Fractional sampling not supported..
        /// </summary>
        internal static string NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPEG image too large. Maximum image size supported is 65500 X 65500..
        /// </summary>
        internal static string NS_E_WMP_JPG_IMAGE_TOO_BIG {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_IMAGE_TOO_BIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid JPEG format..
        /// </summary>
        internal static string NS_E_WMP_JPG_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPEG Arithmetic coding not supported..
        /// </summary>
        internal static string NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No image found in JPEG file..
        /// </summary>
        internal static string NS_E_WMP_JPG_NO_IMAGE_IN_FILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_NO_IMAGE_IN_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not read JPEG file..
        /// </summary>
        internal static string NS_E_WMP_JPG_READ_ERROR {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_READ_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported JPEG SOF marker found..
        /// </summary>
        internal static string NS_E_WMP_JPG_SOF_UNSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_SOF_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected end of file reached in JPEG file..
        /// </summary>
        internal static string NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown JPEG marker found..
        /// </summary>
        internal static string NS_E_WMP_JPG_UNKNOWN_MARKER {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPG_UNKNOWN_MARKER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPG Images are not recommended when using a transparencyColor..
        /// </summary>
        internal static string NS_E_WMP_JPGTRANSPARENCY {
            get {
                return ResourceManager.GetString("NS_E_WMP_JPGTRANSPARENCY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play, burn, or sync the file because the media usage rights are missing. If you obtained the file from an online store, sign in to the store, and then try again..
        /// </summary>
        internal static string NS_E_WMP_LICENSE_REQUIRED {
            get {
                return ResourceManager.GetString("NS_E_WMP_LICENSE_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content provider prohibits this action. Go to the content provider&apos;s online store to get new media usage rights..
        /// </summary>
        internal static string NS_E_WMP_LICENSE_RESTRICTS {
            get {
                return ResourceManager.GetString("NS_E_WMP_LICENSE_RESTRICTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot switch to full mode because your computer administrator has locked this skin..
        /// </summary>
        internal static string NS_E_WMP_LOCKEDINSKINMODE {
            get {
                return ResourceManager.GetString("NS_E_WMP_LOCKEDINSKINMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server denied access to the file. Verify that you are using the correct user name and password..
        /// </summary>
        internal static string NS_E_WMP_LOGON_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_LOGON_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component of Windows Media Player is out-of-date. If you are running a pre-release version of Windows, try upgrading to a more recent version..
        /// </summary>
        internal static string NS_E_WMP_MF_CODE_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_WMP_MF_CODE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested action. Your computer&apos;s time and date might not be set correctly..
        /// </summary>
        internal static string NS_E_WMP_MLS_STALE_DATA {
            get {
                return ResourceManager.GetString("NS_E_WMP_MLS_STALE_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the specified protocol is not supported. If you typed a URL in the Open URL dialog box, try using a different transport protocol (for example, &quot;mms:&quot;)..
        /// </summary>
        internal static string NS_E_WMP_MMS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_MMS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To play the file, you must install the latest Windows service pack. To install the service pack from the Windows Update website, click Web Help..
        /// </summary>
        internal static string NS_E_WMP_MSSAP_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_MSSAP_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the multicast protocol is not enabled. On the Tools menu, click Options, click the Network tab, and then select the Multicast check box..
        /// </summary>
        internal static string NS_E_WMP_MULTICAST_DISABLED {
            get {
                return ResourceManager.GetString("NS_E_WMP_MULTICAST_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number of queued files cannot be played. To find information about the problem, click the icon next to each file in the List pane..
        /// </summary>
        internal static string NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To play the file, you might need to install a later version of Windows Media Player. On the Help menu, click Check for Updates, and then follow the instructions..
        /// </summary>
        internal static string NS_E_WMP_NEED_UPGRADE {
            get {
                return ResourceManager.GetString("NS_E_WMP_NEED_UPGRADE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because a network error occurred. The server might not be available (for example, the server is busy or not online) or you might not be connected to the network..
        /// </summary>
        internal static string NS_E_WMP_NETWORK_ERROR {
            get {
                return ResourceManager.GetString("NS_E_WMP_NETWORK_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. A network firewall might be preventing the Player from opening the file by using the UDP transport protocol. If you typed a URL in the Open URL dialog box, try using a different transport protocol (for example, &quot;http:&quot;)..
        /// </summary>
        internal static string NS_E_WMP_NETWORK_FIREWALL {
            get {
                return ResourceManager.GetString("NS_E_WMP_NETWORK_FIREWALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a network error. Restart the Player..
        /// </summary>
        internal static string NS_E_WMP_NETWORK_RESOURCE_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_NETWORK_RESOURCE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested action because there is not enough storage space on your computer. Delete some unneeded files on your hard disk, and then try again..
        /// </summary>
        internal static string NS_E_WMP_NO_DISK_SPACE {
            get {
                return ResourceManager.GetString("NS_E_WMP_NO_DISK_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because there are no streaming protocols selected. Select one or more protocols, and then try again..
        /// </summary>
        internal static string NS_E_WMP_NO_PROTOCOLS_SELECTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_NO_PROTOCOLS_SELECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert the removable media, and then try again..
        /// </summary>
        internal static string NS_E_WMP_NO_REMOVABLE_MEDIA {
            get {
                return ResourceManager.GetString("NS_E_WMP_NO_REMOVABLE_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot delete the playlist because it contains items that are not digital media files. Any digital media files in the playlist were deleted..
        /// </summary>
        internal static string NS_E_WMP_NONMEDIA_FILES {
            get {
                return ResourceManager.GetString("NS_E_WMP_NONMEDIA_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your computer is running low on memory. Quit other programs, and then try again..
        /// </summary>
        internal static string NS_E_WMP_OUTOFMEMORY {
            get {
                return ResourceManager.GetString("NS_E_WMP_OUTOFMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file path is already in the library..
        /// </summary>
        internal static string NS_E_WMP_PATH_ALREADY_IN_LIBRARY {
            get {
                return ResourceManager.GetString("NS_E_WMP_PATH_ALREADY_IN_LIBRARY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot create the playlist because the name already exists. Type a different playlist name..
        /// </summary>
        internal static string NS_E_WMP_PLAYLIST_EXISTS {
            get {
                return ResourceManager.GetString("NS_E_WMP_PLAYLIST_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot find the selected plug-in. The Player will try to remove it from the menu. To use this plug-in, install it again..
        /// </summary>
        internal static string NS_E_WMP_PLUGINDLL_NOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMP_PLUGINDLL_NOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid PNG image file format..
        /// </summary>
        internal static string NS_E_WMP_PNG_INVALIDFORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_PNG_INVALIDFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad CRC in PNG file..
        /// </summary>
        internal static string NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC {
            get {
                return ResourceManager.GetString("NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PNG bitdepth not supported..
        /// </summary>
        internal static string NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH {
            get {
                return ResourceManager.GetString("NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compression format defined in PNG file not supported,.
        /// </summary>
        internal static string NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION {
            get {
                return ResourceManager.GetString("NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter method defined in PNG file not supported..
        /// </summary>
        internal static string NS_E_WMP_PNG_UNSUPPORTED_FILTER {
            get {
                return ResourceManager.GetString("NS_E_WMP_PNG_UNSUPPORTED_FILTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interlace method defined in PNG file not supported..
        /// </summary>
        internal static string NS_E_WMP_PNG_UNSUPPORTED_INTERLACE {
            get {
                return ResourceManager.GetString("NS_E_WMP_PNG_UNSUPPORTED_INTERLACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot read a policy. This can occur when the policy does not exist in the registry or when the registry cannot be read..
        /// </summary>
        internal static string NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED {
            get {
                return ResourceManager.GetString("NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play, burn, or sync the file because the media usage rights are missing. If you obtained the file from an online store, sign in to the store, and then try again..
        /// </summary>
        internal static string NS_E_WMP_PROTECTED_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_WMP_PROTECTED_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot open the specified URL. Verify that the Player is configured to use all available protocols, and then try again..
        /// </summary>
        internal static string NS_E_WMP_PROTOCOL_PROBLEM {
            get {
                return ResourceManager.GetString("NS_E_WMP_PROTOCOL_PROBLEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the proxy server is not responding. The proxy server might be temporarily unavailable or your Player proxy settings might not be valid..
        /// </summary>
        internal static string NS_E_WMP_PROXY_CONNECT_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_WMP_PROXY_CONNECT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the network proxy server cannot be found. Verify that your proxy settings are correct, and then try again..
        /// </summary>
        internal static string NS_E_WMP_PROXY_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_WMP_PROXY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JPG Images are not recommended for use as a mappingImage..
        /// </summary>
        internal static string NS_E_WMP_RBC_JPGMAPPINGIMAGE {
            get {
                return ResourceManager.GetString("NS_E_WMP_RBC_JPGMAPPINGIMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file does not have burn rights. If you obtained this file from an online store, go to the online store to get burn rights..
        /// </summary>
        internal static string NS_E_WMP_RECORDING_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("NS_E_WMP_RECORDING_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot rip one or more tracks from the CD..
        /// </summary>
        internal static string NS_E_WMP_RIP_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_RIP_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot overwrite a read-only file. Try using a different file name..
        /// </summary>
        internal static string NS_E_WMP_SAVEAS_READONLY {
            get {
                return ResourceManager.GetString("NS_E_WMP_SAVEAS_READONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot send the link because your e-mail program is not responding. Verify that your e-mail program is configured properly, and then try again..
        /// </summary>
        internal static string NS_E_WMP_SENDMAILFAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_SENDMAILFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because a network problem occurred. Verify that you are connected to the network, and then try again later..
        /// </summary>
        internal static string NS_E_WMP_SERVER_DNS_TIMEOUT {
            get {
                return ResourceManager.GetString("NS_E_WMP_SERVER_DNS_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot connect to the server. The server name might not be correct, the server might not be available, or your proxy settings might not be correct..
        /// </summary>
        internal static string NS_E_WMP_SERVER_INACCESSIBLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_SERVER_INACCESSIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot connect to the server because it is not accepting any new connections. This could be because it has reached its maximum connection limit. Please try again later..
        /// </summary>
        internal static string NS_E_WMP_SERVER_NONEWCONNECTIONS {
            get {
                return ResourceManager.GetString("NS_E_WMP_SERVER_NONEWCONNECTIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because a network error occurred. The server might not be available. Verify that you are connected to the network and that your proxy settings are correct..
        /// </summary>
        internal static string NS_E_WMP_SERVER_NOT_RESPONDING {
            get {
                return ResourceManager.GetString("NS_E_WMP_SERVER_NOT_RESPONDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an error when connecting to the server. The security information from the server could not be validated..
        /// </summary>
        internal static string NS_E_WMP_SERVER_SECURITY_ERROR {
            get {
                return ResourceManager.GetString("NS_E_WMP_SERVER_SECURITY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. The server might not be available or there might be a problem with your network or firewall settings..
        /// </summary>
        internal static string NS_E_WMP_SERVER_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMP_SERVER_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot save a file that is being streamed..
        /// </summary>
        internal static string NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because it is corrupted..
        /// </summary>
        internal static string NS_E_WMP_TAMPERED_CONTENT {
            get {
                return ResourceManager.GetString("NS_E_WMP_TAMPERED_CONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot update your media usage rights because the Player cannot verify the list of activated users of this computer..
        /// </summary>
        internal static string NS_E_WMP_UDRM_NOUSERLIST {
            get {
                return ResourceManager.GetString("NS_E_WMP_UDRM_NOUSERLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No .wms file found in skin archive..
        /// </summary>
        internal static string NS_E_WMP_UI_NOSKININZIP {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_NOSKININZIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The layout manager was given valid XML that wasn&apos;t a theme file..
        /// </summary>
        internal static string NS_E_WMP_UI_NOTATHEMEFILE {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_NOTATHEMEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes were specified for the %s object, but the object was not available to send them to..
        /// </summary>
        internal static string NS_E_WMP_UI_OBJECTNOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_OBJECTNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error used internally for hit testing..
        /// </summary>
        internal static string NS_E_WMP_UI_PASSTHROUGH {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_PASSTHROUGH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %s event already has a handler, the second handler was ignored..
        /// </summary>
        internal static string NS_E_WMP_UI_SECONDHANDLER {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_SECONDHANDLER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The control (%s) does not support creation of sub-controls, yet (%d) sub-controls have been specified..
        /// </summary>
        internal static string NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The %s subelement could not be found on the %s object..
        /// </summary>
        internal static string NS_E_WMP_UI_SUBELEMENTNOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_SUBELEMENTNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version mismatch: (%.1f required, %.1f found)..
        /// </summary>
        internal static string NS_E_WMP_UI_VERSIONMISMATCH {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_VERSIONMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string NS_E_WMP_UI_VERSIONPARSE {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_VERSIONPARSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view specified in for the &apos;currentViewID&apos; property (%s) was not found in this theme file..
        /// </summary>
        internal static string NS_E_WMP_UI_VIEWIDNOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMP_UI_VIEWIDNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered an unknown error..
        /// </summary>
        internal static string NS_E_WMP_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("NS_E_WMP_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. The Player might not support the file type or might not support the codec that was used to compress the file..
        /// </summary>
        internal static string NS_E_WMP_UNSUPPORTED_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMP_UNSUPPORTED_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player is not installed properly. Reinstall the Player..
        /// </summary>
        internal static string NS_E_WMP_UPGRADE_APPLICATION {
            get {
                return ResourceManager.GetString("NS_E_WMP_UPGRADE_APPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while downloading the file..
        /// </summary>
        internal static string NS_E_WMP_URLDOWNLOADFAILED {
            get {
                return ResourceManager.GetString("NS_E_WMP_URLDOWNLOADFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player must connect to the Internet to verify the file&apos;s media usage rights. Connect to the Internet, and then try again..
        /// </summary>
        internal static string NS_E_WMP_VERIFY_ONLINE {
            get {
                return ResourceManager.GetString("NS_E_WMP_VERIFY_ONLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the required video codec is not installed on your computer..
        /// </summary>
        internal static string NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Windows API call failed but no error information was available..
        /// </summary>
        internal static string NS_E_WMP_WINDOWSAPIFAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_WINDOWSAPIFAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The portable device is already in use. Wait until the current task finishes or quit other programs that might be using the portable device, and then try again..
        /// </summary>
        internal static string NS_E_WMP_WMDM_BUSY {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player has encountered an unknown error with your portable device. Reconnect your portable device, and then try again..
        /// </summary>
        internal static string NS_E_WMP_WMDM_FAILURE {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content provider has not granted you the right to sync this file. Go to the content provider&apos;s online store to get sync rights..
        /// </summary>
        internal static string NS_E_WMP_WMDM_INCORRECT_RIGHTS {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_INCORRECT_RIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player no longer detects a portable device. Reconnect your portable device, and then try again..
        /// </summary>
        internal static string NS_E_WMP_WMDM_INTERFACEDEAD {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_INTERFACEDEAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because the sync rights have expired. Go to the content provider&apos;s online store to get new sync rights..
        /// </summary>
        internal static string NS_E_WMP_WMDM_LICENSE_EXPIRED {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_LICENSE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file does not have sync rights. If you obtained this file from an online store, go to the online store to get sync rights..
        /// </summary>
        internal static string NS_E_WMP_WMDM_LICENSE_NOTEXIST {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_LICENSE_NOTEXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because the content provider or device prohibits it. You might be able to resolve this problem by going to the content provider&apos;s online store to get sync rights..
        /// </summary>
        internal static string NS_E_WMP_WMDM_NORIGHTS {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_NORIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot sync the file because the portable device does not support protected files..
        /// </summary>
        internal static string NS_E_WMP_WMDM_NOTCERTIFIED {
            get {
                return ResourceManager.GetString("NS_E_WMP_WMDM_NOTCERTIFIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your media usage rights were not backed up because the backup was canceled..
        /// </summary>
        internal static string NS_E_WMPBR_BACKUPCANCEL {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_BACKUPCANCEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot backup or restore your media usage rights..
        /// </summary>
        internal static string NS_E_WMPBR_BACKUPRESTOREFAILED {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_BACKUPRESTOREFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot restore your media usage rights from the specified location. Choose another location, and then try again..
        /// </summary>
        internal static string NS_E_WMPBR_DRIVE_INVALID {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_DRIVE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while backing up or restoring your media usage rights. A required web page cannot be displayed..
        /// </summary>
        internal static string NS_E_WMPBR_ERRORWITHURL {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_ERRORWITHURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your media usage rights were not backed up because the backup was canceled..
        /// </summary>
        internal static string NS_E_WMPBR_NAMECOLLISION {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_NAMECOLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No window is currently listening to Backup and Restore events..
        /// </summary>
        internal static string NS_E_WMPBR_NOLISTENER {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_NOLISTENER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your media usage rights were not restored because the restoration was canceled..
        /// </summary>
        internal static string NS_E_WMPBR_RESTORECANCEL {
            get {
                return ResourceManager.GetString("NS_E_WMPBR_RESTORECANCEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer is too small for copying media type..
        /// </summary>
        internal static string NS_E_WMPCORE_BUFFERTOOSMALL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_BUFFERTOOSMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file at this time. Try again later..
        /// </summary>
        internal static string NS_E_WMPCORE_BUSY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create the Global Interface Table..
        /// </summary>
        internal static string NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because a required codec is not installed on your computer. To try downloading the codec, turn on the &quot;Download codecs automatically&quot; option..
        /// </summary>
        internal static string NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. One or more codecs required to play the file could not be found..
        /// </summary>
        internal static string NS_E_WMPCORE_CODEC_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_CODEC_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The codec downloaded for this file does not appear to be properly signed, so it cannot be installed..
        /// </summary>
        internal static string NS_E_WMPCORE_CODEC_NOT_TRUSTED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_CODEC_NOT_TRUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The media item is not active currently..
        /// </summary>
        internal static string NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. Try using Windows Update or Device Manager to update the device drivers for your audio and video cards. For information about using Windows Update or Device Manager, see Windows Help..
        /// </summary>
        internal static string NS_E_WMPCORE_DEVICE_DRIVERS_MISSING {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_DEVICE_DRIVERS_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem while downloading the playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The error manager is not available to respond to errors..
        /// </summary>
        internal static string NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error sink was never registered for the calling object..
        /// </summary>
        internal static string NS_E_WMPCORE_ERRORSINKNOTREGISTERED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_ERRORSINKNOTREGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to build the playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to get the marshaled graph event handler interface..
        /// </summary>
        internal static string NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot find the file. The link from the item in the library to its associated digital media file might be broken. To fix the problem, try repairing the link or removing the item from the library..
        /// </summary>
        internal static string NS_E_WMPCORE_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graph with the specified URL was not found in the prerolled graph list..
        /// </summary>
        internal static string NS_E_WMPCORE_GRAPH_NOT_IN_LIST {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_GRAPH_NOT_IN_LIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist URL supplied to the playlist manager is not valid..
        /// </summary>
        internal static string NS_E_WMPCORE_INVALID_PLAYLIST_URL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_INVALID_PLAYLIST_URL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist manager does not understand the current play mode (for example, shuffle or normal)..
        /// </summary>
        internal static string NS_E_WMPCORE_INVALIDPLAYLISTMODE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_INVALIDPLAYLISTMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because it is not in the current playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_ITEMNOTINPLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_ITEMNOTINPLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist does not contain any items..
        /// </summary>
        internal static string NS_E_WMPCORE_LIST_ENTRY_NO_REF {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_LIST_ENTRY_NO_REF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No URL specified for the roll over Refs in the playlist file..
        /// </summary>
        internal static string NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no child playlist available for this media item at this time..
        /// </summary>
        internal static string NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not resume playing next item in playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no child playlist for this media item..
        /// </summary>
        internal static string NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. If the file is located on the Internet, connect to the Internet. If the file is located on a removable storage card, insert the storage card..
        /// </summary>
        internal static string NS_E_WMPCORE_MEDIA_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MEDIA_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the URL is too long..
        /// </summary>
        internal static string NS_E_WMPCORE_MEDIA_URL_TOO_LONG {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MEDIA_URL_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because it is corrupted..
        /// </summary>
        internal static string NS_E_WMPCORE_MISMATCHED_RUNTIME {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MISMATCHED_RUNTIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. The file is either corrupted or the Player does not support the format you are trying to play..
        /// </summary>
        internal static string NS_E_WMPCORE_MISNAMED_FILE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_MISNAMED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play any items in the playlist. To find information about the problem, click the icon next to each file in the list pane..
        /// </summary>
        internal static string NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the associated playlist does not contain any items or the playlist is not valid..
        /// </summary>
        internal static string NS_E_WMPCORE_NO_REF_IN_ENTRY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_NO_REF_IN_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The website cannot be displayed because no web browser is installed on your computer..
        /// </summary>
        internal static string NS_E_WMPCORE_NOBROWSER {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_NOBROWSER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot find the file. Verify that the path is typed correctly. If it is, the file might not exist in the specified location, or the computer where the file is stored might not be available..
        /// </summary>
        internal static string NS_E_WMPCORE_NOSOURCEURLSTRING {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_NOSOURCEURLSTRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play some or all of the items in the playlist because the playlist is nested..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested operation because there is only one item in the playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required attribute in the event block of the playlist was not found..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No items were found in the event block of the playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot add the playlist to the library because the playlist does not contain any items..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more playlist alternates available to switch to..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to initialize an alternate for the media..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to switch to an alternate for this media..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the name of the alternate playlist to switch into..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playlist has no alternates to switch into..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encountered a playlist with no name..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player encountered a problem with the playlist. The format of the playlist is not valid..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Media object corresponding to the end of a playlist repeat block was not found..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Media object corresponding to start of a playlist repeat block was not found..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No playlist was found while returning from a nested playlist..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLIST_STACK_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLIST_STACK_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no items in the playlist. Add items to the playlist, and then try again..
        /// </summary>
        internal static string NS_E_WMPCORE_PLAYLISTEMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_PLAYLISTEMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because a required codec is not installed on your computer..
        /// </summary>
        internal static string NS_E_WMPCORE_SOME_CODECS_MISSING {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_SOME_CODECS_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The temporary file was not found..
        /// </summary>
        internal static string NS_E_WMPCORE_TEMP_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_TEMP_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current state of the Player does not allow this operation..
        /// </summary>
        internal static string NS_E_WMPCORE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot find the specified file. Verify the path is typed correctly. If it is, the file does not exist in the specified location, or the computer where the file is stored is not available..
        /// </summary>
        internal static string NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested action because you chose to cancel it..
        /// </summary>
        internal static string NS_E_WMPCORE_USER_CANCEL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_USER_CANCEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error has occurred that could prevent the changing of the video contrast on this media..
        /// </summary>
        internal static string NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Web Help URL cannot be opened..
        /// </summary>
        internal static string NS_E_WMPCORE_WEBHELPFAILED {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WEBHELPFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist contains an ENTRYREF for which no href was parsed. Check the syntax of playlist file..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_ENTRYREF_NO_REF {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_ENTRYREF_NO_REF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty string for playlist attribute name was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A playlist attribute name that is not valid was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty string for a playlist attribute value was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An illegal value for a playlist attribute was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty string for a playlist item attribute name was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An illegal value for a playlist item attribute name was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An illegal value for a playlist item attribute was found..
        /// </summary>
        internal static string NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To play the selected item, you must install the Adobe Flash Player. To download the Adobe Flash Player, go to the Adobe Web site..
        /// </summary>
        internal static string NS_E_WMPFLASH_CANT_FIND_COM_SERVER {
            get {
                return ResourceManager.GetString("NS_E_WMPFLASH_CANT_FIND_COM_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To play the selected item, you must install a later version of the Adobe Flash Player. To download the Adobe Flash Player, go to the Adobe website..
        /// </summary>
        internal static string NS_E_WMPFLASH_INCOMPATIBLEVERSION {
            get {
                return ResourceManager.GetString("NS_E_WMPFLASH_INCOMPATIBLEVERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to connect to the Internet failed..
        /// </summary>
        internal static string NS_E_WMPIM_DIALUPFAILED {
            get {
                return ResourceManager.GetString("NS_E_WMPIM_DIALUPFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to connect to the Internet was canceled..
        /// </summary>
        internal static string NS_E_WMPIM_USERCANCELED {
            get {
                return ResourceManager.GetString("NS_E_WMPIM_USERCANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player has detected that you are not connected to the Internet. Connect to the Internet, and then try again..
        /// </summary>
        internal static string NS_E_WMPIM_USEROFFLINE {
            get {
                return ResourceManager.GetString("NS_E_WMPIM_USEROFFLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player has encountered an unknown error..
        /// </summary>
        internal static string NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested method or property is not available because the Windows Media Player ActiveX control has not been properly activated..
        /// </summary>
        internal static string NS_E_WMPOCX_NO_ACTIVE_CORE {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_NO_ACTIVE_CORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player ActiveX control cannot connect to remote media services, but will continue with local media services..
        /// </summary>
        internal static string NS_E_WMPOCX_NO_REMOTE_CORE {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_NO_REMOTE_CORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while trying to get the remote Windows Media Player window..
        /// </summary>
        internal static string NS_E_WMPOCX_NO_REMOTE_WINDOW {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_NO_REMOTE_WINDOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player ActiveX control is not running in remote mode..
        /// </summary>
        internal static string NS_E_WMPOCX_NOT_RUNNING_REMOTELY {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_NOT_RUNNING_REMOTELY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player ActiveX control must be in a docked state for this action to be performed..
        /// </summary>
        internal static string NS_E_WMPOCX_PLAYER_NOT_DOCKED {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_PLAYER_NOT_DOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exclusive Services launch failed because the Windows Media Player is already running..
        /// </summary>
        internal static string NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Media Player ActiveX control cannot load the requested uiMode and cannot roll back to the existing uiMode..
        /// </summary>
        internal static string NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN {
            get {
                return ResourceManager.GetString("NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because your Internet security settings prohibit the use of ActiveX controls..
        /// </summary>
        internal static string NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS {
            get {
                return ResourceManager.GetString("NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call get GetNamedAttribute or GetNamedAttributeIndex on the XML parser resulted in the index not being found..
        /// </summary>
        internal static string NS_E_WMPXML_ATTRIBUTENOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPXML_ATTRIBUTENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Persist was called on the XML parser, but the parser has no data to persist..
        /// </summary>
        internal static string NS_E_WMPXML_EMPTYDOC {
            get {
                return ResourceManager.GetString("NS_E_WMPXML_EMPTYDOC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML Parser ran out of data while parsing..
        /// </summary>
        internal static string NS_E_WMPXML_ENDOFDATA {
            get {
                return ResourceManager.GetString("NS_E_WMPXML_ENDOFDATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call was made to GetParseError on the XML parser but there was no error to retrieve..
        /// </summary>
        internal static string NS_E_WMPXML_NOERROR {
            get {
                return ResourceManager.GetString("NS_E_WMPXML_NOERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A generic parse error occurred in the XML parser but no information is available..
        /// </summary>
        internal static string NS_E_WMPXML_PARSEERROR {
            get {
                return ResourceManager.GetString("NS_E_WMPXML_PARSEERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call was made go GetNamedPI on the XML parser, but the requested Processing Instruction was not found..
        /// </summary>
        internal static string NS_E_WMPXML_PINOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPXML_PINOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ZIP reader has detected that the file is corrupted..
        /// </summary>
        internal static string NS_E_WMPZIP_CORRUPT {
            get {
                return ResourceManager.GetString("NS_E_WMPZIP_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetFileStream, SaveToFile, or SaveTemp file was called on the ZIP reader with a file name that was not found in the ZIP file..
        /// </summary>
        internal static string NS_E_WMPZIP_FILENOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMPZIP_FILENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ZIP reader opened a file and its signature did not match that of the ZIP files..
        /// </summary>
        internal static string NS_E_WMPZIP_NOTAZIPFILE {
            get {
                return ResourceManager.GetString("NS_E_WMPZIP_NOTAZIPFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A plug-in is required to correctly play the file. To determine if the plug-in is available to download, click Web Help..
        /// </summary>
        internal static string NS_E_WMR_CANNOT_RENDER_BINARY_STREAM {
            get {
                return ResourceManager.GetString("NS_E_WMR_CANNOT_RENDER_BINARY_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMR Source Filter does not have a callback available..
        /// </summary>
        internal static string NS_E_WMR_NOCALLBACKAVAILABLE {
            get {
                return ResourceManager.GetString("NS_E_WMR_NOCALLBACKAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified operation cannot be completed because the source filter does not exist..
        /// </summary>
        internal static string NS_E_WMR_NOSOURCEFILTER {
            get {
                return ResourceManager.GetString("NS_E_WMR_NOSOURCEFILTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was attempted on a pin that does not exist in the DirectShow filter graph..
        /// </summary>
        internal static string NS_E_WMR_PINNOTFOUND {
            get {
                return ResourceManager.GetString("NS_E_WMR_PINNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified type does not match this pin..
        /// </summary>
        internal static string NS_E_WMR_PINTYPENOMATCH {
            get {
                return ResourceManager.GetString("NS_E_WMR_PINTYPENOMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified property has not been set on this sample..
        /// </summary>
        internal static string NS_E_WMR_SAMPLEPROPERTYNOTSET {
            get {
                return ResourceManager.GetString("NS_E_WMR_SAMPLEPROPERTYNOTSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file. The Player does not support the format you are trying to play..
        /// </summary>
        internal static string NS_E_WMR_UNSUPPORTEDSTREAM {
            get {
                return ResourceManager.GetString("NS_E_WMR_UNSUPPORTEDSTREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified operation cannot be completed while waiting for a media format change from the SDK..
        /// </summary>
        internal static string NS_E_WMR_WAITINGONFORMATSWITCH {
            get {
                return ResourceManager.GetString("NS_E_WMR_WAITINGONFORMATSWITCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play protected files that contain binary streams..
        /// </summary>
        internal static string NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM {
            get {
                return ResourceManager.GetString("NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified attribute already exists..
        /// </summary>
        internal static string NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified attribute does not exist..
        /// </summary>
        internal static string NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot retrieve the specified attribute..
        /// </summary>
        internal static string NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE {
            get {
                return ResourceManager.GetString("NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the file because the associated playlist contains too many nested playlists..
        /// </summary>
        internal static string NS_E_WMX_INVALID_FORMAT_OVER_NESTING {
            get {
                return ResourceManager.GetString("NS_E_WMX_INVALID_FORMAT_OVER_NESTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified item does not exist in the current playlist..
        /// </summary>
        internal static string NS_E_WMX_ITEM_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("NS_E_WMX_ITEM_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Items of the specified type cannot be created within the current playlist..
        /// </summary>
        internal static string NS_E_WMX_ITEM_TYPE_ILLEGAL {
            get {
                return ResourceManager.GetString("NS_E_WMX_ITEM_TYPE_ILLEGAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified item cannot be set in the current playlist..
        /// </summary>
        internal static string NS_E_WMX_ITEM_UNSETTABLE {
            get {
                return ResourceManager.GetString("NS_E_WMX_ITEM_UNSETTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot perform the requested action because the playlist does not contain any items..
        /// </summary>
        internal static string NS_E_WMX_PLAYLIST_EMPTY {
            get {
                return ResourceManager.GetString("NS_E_WMX_PLAYLIST_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player cannot play the playlist because it is not valid..
        /// </summary>
        internal static string NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT {
            get {
                return ResourceManager.GetString("NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Player could not use digital playback to play the CD. The Player has automatically switched the CD drive to analog playback. To switch back to digital CD playback, click Organize, click options,and use the Devices tab..
        /// </summary>
        internal static string NS_E_WONT_DO_DIGITAL {
            get {
                return ResourceManager.GetString("NS_E_WONT_DO_DIGITAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Media Services will only run on Windows Server 2003, Standard Edition and Windows Server 2003, Enterprise Edition..
        /// </summary>
        internal static string NS_E_WRONG_OS_VERSION {
            get {
                return ResourceManager.GetString("NS_E_WRONG_OS_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cache and proxy publishing points do not support this property or method..
        /// </summary>
        internal static string NS_E_WRONG_PUBLISHING_POINT_TYPE {
            get {
                return ResourceManager.GetString("NS_E_WRONG_PUBLISHING_POINT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of this playlist is not supported by the server..
        /// </summary>
        internal static string NS_E_WSX_INVALID_VERSION {
            get {
                return ResourceManager.GetString("NS_E_WSX_INVALID_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 ( %2 ) on Content Server %3, auto online from catatonic state..
        /// </summary>
        internal static string NS_I_CATATONIC_AUTO_UNFAIL {
            get {
                return ResourceManager.GetString("NS_I_CATATONIC_AUTO_UNFAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 ( %2 ) on Content Server %3, will be failed because it is catatonic..
        /// </summary>
        internal static string NS_I_CATATONIC_FAILURE {
            get {
                return ResourceManager.GetString("NS_I_CATATONIC_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) is running..
        /// </summary>
        internal static string NS_I_CUB_RUNNING {
            get {
                return ResourceManager.GetString("NS_I_CUB_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) is starting..
        /// </summary>
        internal static string NS_I_CUB_START {
            get {
                return ResourceManager.GetString("NS_I_CUB_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Server %1 (%2) has established its link to Content Server %3..
        /// </summary>
        internal static string NS_I_CUB_UNFAIL_LINK {
            get {
                return ResourceManager.GetString("NS_I_CUB_UNFAIL_LINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aborted rebuilding disk %1 ( %2 ) on Content Server %3..
        /// </summary>
        internal static string NS_I_DISK_REBUILD_ABORTED {
            get {
                return ResourceManager.GetString("NS_I_DISK_REBUILD_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished rebuilding disk %1 ( %2 ) on Content Server %3..
        /// </summary>
        internal static string NS_I_DISK_REBUILD_FINISHED {
            get {
                return ResourceManager.GetString("NS_I_DISK_REBUILD_FINISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Started rebuilding disk %1 ( %2 ) on Content Server %3..
        /// </summary>
        internal static string NS_I_DISK_REBUILD_STARTED {
            get {
                return ResourceManager.GetString("NS_I_DISK_REBUILD_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 ( %2 ) on Content Server %3, is running..
        /// </summary>
        internal static string NS_I_DISK_START {
            get {
                return ResourceManager.GetString("NS_I_DISK_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk %1 ( %2 ) on Content Server %3, has been offlined..
        /// </summary>
        internal static string NS_I_DISK_STOP {
            get {
                return ResourceManager.GetString("NS_I_DISK_STOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already an existing packetizer plugin for the stream..
        /// </summary>
        internal static string NS_I_EXISTING_PACKETIZER {
            get {
                return ResourceManager.GetString("NS_I_EXISTING_PACKETIZER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 aborted obsolete connection %2 from the system..
        /// </summary>
        internal static string NS_I_KILL_CONNECTION {
            get {
                return ResourceManager.GetString("NS_I_KILL_CONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 aborted user session %2 from the system..
        /// </summary>
        internal static string NS_I_KILL_USERSESSION {
            get {
                return ResourceManager.GetString("NS_I_KILL_USERSESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 set the maximum bandwidth limit to %2 bps..
        /// </summary>
        internal static string NS_I_LIMIT_BANDWIDTH {
            get {
                return ResourceManager.GetString("NS_I_LIMIT_BANDWIDTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 set the data stream limit to %2 streams..
        /// </summary>
        internal static string NS_I_LIMIT_FUNNELS {
            get {
                return ResourceManager.GetString("NS_I_LIMIT_FUNNELS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logging operation failed..
        /// </summary>
        internal static string NS_I_LOGGING_FAILED {
            get {
                return ResourceManager.GetString("NS_I_LOGGING_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proxy setting is manual..
        /// </summary>
        internal static string NS_I_MANUAL_PROXY {
            get {
                return ResourceManager.GetString("NS_I_MANUAL_PROXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forcing a switch to a pending header on start..
        /// </summary>
        internal static string NS_I_NOLOG_STOP {
            get {
                return ResourceManager.GetString("NS_I_NOLOG_STOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The playlist change occurred while receding..
        /// </summary>
        internal static string NS_I_PLAYLIST_CHANGE_RECEDING {
            get {
                return ResourceManager.GetString("NS_I_PLAYLIST_CHANGE_RECEDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 started rebuilding disk %2..
        /// </summary>
        internal static string NS_I_REBUILD_DISK {
            get {
                return ResourceManager.GetString("NS_I_REBUILD_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client is reconnected..
        /// </summary>
        internal static string NS_I_RECONNECTED {
            get {
                return ResourceManager.GetString("NS_I_RECONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content server %1 (%2) has been restriped out..
        /// </summary>
        internal static string NS_I_RESTRIPE_CUB_OUT {
            get {
                return ResourceManager.GetString("NS_I_RESTRIPE_CUB_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content disk %1 (%2) on Content Server %3 has been restriped out..
        /// </summary>
        internal static string NS_I_RESTRIPE_DISK_OUT {
            get {
                return ResourceManager.GetString("NS_I_RESTRIPE_DISK_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restripe operation has completed..
        /// </summary>
        internal static string NS_I_RESTRIPE_DONE {
            get {
                return ResourceManager.GetString("NS_I_RESTRIPE_DONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restripe operation has started..
        /// </summary>
        internal static string NS_I_RESTRIPE_START {
            get {
                return ResourceManager.GetString("NS_I_RESTRIPE_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 started disk %2..
        /// </summary>
        internal static string NS_I_START_DISK {
            get {
                return ResourceManager.GetString("NS_I_START_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 stopped Content Server %2..
        /// </summary>
        internal static string NS_I_STOP_CUB {
            get {
                return ResourceManager.GetString("NS_I_STOP_CUB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NetShow administrator at network location %1 stopped disk %2..
        /// </summary>
        internal static string NS_I_STOP_DISK {
            get {
                return ResourceManager.GetString("NS_I_STOP_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Title Server %1 is running..
        /// </summary>
        internal static string NS_I_TIGER_START {
            get {
                return ResourceManager.GetString("NS_I_TIGER_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation was aborted by the client..
        /// </summary>
        internal static string NS_S_CALLABORTED {
            get {
                return ResourceManager.GetString("NS_S_CALLABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is pending completion..
        /// </summary>
        internal static string NS_S_CALLPENDING {
            get {
                return ResourceManager.GetString("NS_S_CALLPENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal..
        /// </summary>
        internal static string NS_S_CHANGENOTICE {
            get {
                return ResourceManager.GetString("NS_S_CHANGENOTICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation has caused the source to degrade codec quality..
        /// </summary>
        internal static string NS_S_DEGRADING_QUALITY {
            get {
                return ResourceManager.GetString("NS_S_DEGRADING_QUALITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status message: License acquisition has been cancelled..
        /// </summary>
        internal static string NS_S_DRM_ACQUIRE_CANCELLED {
            get {
                return ResourceManager.GetString("NS_S_DRM_ACQUIRE_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The track is burnable and had no playlist burn limit..
        /// </summary>
        internal static string NS_S_DRM_BURNABLE_TRACK {
            get {
                return ResourceManager.GetString("NS_S_DRM_BURNABLE_TRACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The track is burnable but has a playlist burn limit..
        /// </summary>
        internal static string NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION {
            get {
                return ResourceManager.GetString("NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status message: The security upgrade has been completed..
        /// </summary>
        internal static string NS_S_DRM_INDIVIDUALIZED {
            get {
                return ResourceManager.GetString("NS_S_DRM_INDIVIDUALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status message: The license was acquired..
        /// </summary>
        internal static string NS_S_DRM_LICENSE_ACQUIRED {
            get {
                return ResourceManager.GetString("NS_S_DRM_LICENSE_ACQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status message: License monitoring has been cancelled..
        /// </summary>
        internal static string NS_S_DRM_MONITOR_CANCELLED {
            get {
                return ResourceManager.GetString("NS_S_DRM_MONITOR_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security upgrade is required to perform the operation on this media file..
        /// </summary>
        internal static string NS_S_DRM_NEEDS_INDIVIDUALIZATION {
            get {
                return ResourceManager.GetString("NS_S_DRM_NEEDS_INDIVIDUALIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EOS hit during rewinding..
        /// </summary>
        internal static string NS_S_EOSRECEDING {
            get {
                return ResourceManager.GetString("NS_S_EOSRECEDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were problems completing the requested navigation. There are identifiers missing in the catalog..
        /// </summary>
        internal static string NS_S_NAVIGATION_COMPLETE_WITH_ERRORS {
            get {
                return ResourceManager.GetString("NS_S_NAVIGATION_COMPLETE_WITH_ERRORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No burn rights. You will be prompted to buy burn rights when you try to burn this file to an audio CD..
        /// </summary>
        internal static string NS_S_NEED_TO_BUY_BURN_RIGHTS {
            get {
                return ResourceManager.GetString("NS_S_NEED_TO_BUY_BURN_RIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested application pane is performing an operation and will not be released..
        /// </summary>
        internal static string NS_S_OPERATION_PENDING {
            get {
                return ResourceManager.GetString("NS_S_OPERATION_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The publishing point successfully started, but one or more of the requested data writer plug-ins failed..
        /// </summary>
        internal static string NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS {
            get {
                return ResourceManager.GetString("NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation was successful; however, some file cleanup is not complete. For best results, restart your computer..
        /// </summary>
        internal static string NS_S_REBOOT_RECOMMENDED {
            get {
                return ResourceManager.GetString("NS_S_REBOOT_RECOMMENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation was successful; however, some file cleanup is not complete. To continue, you must restart your computer..
        /// </summary>
        internal static string NS_S_REBOOT_REQUIRED {
            get {
                return ResourceManager.GetString("NS_S_REBOOT_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation has caused the source to rebuffer..
        /// </summary>
        internal static string NS_S_REBUFFERING {
            get {
                return ResourceManager.GetString("NS_S_REBUFFERING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream was purposefully stopped before completion..
        /// </summary>
        internal static string NS_S_STREAM_TRUNCATED {
            get {
                return ResourceManager.GetString("NS_S_STREAM_TRUNCATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NS_S_TRACK_ALREADY_DOWNLOADED.
        /// </summary>
        internal static string NS_S_TRACK_ALREADY_DOWNLOADED {
            get {
                return ResourceManager.GetString("NS_S_TRACK_ALREADY_DOWNLOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is only available for purchase when you buy the entire album..
        /// </summary>
        internal static string NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE {
            get {
                return ResourceManager.GetString("NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transcryptor object has reached end of file..
        /// </summary>
        internal static string NS_S_TRANSCRYPTOR_EOF {
            get {
                return ResourceManager.GetString("NS_S_TRANSCRYPTOR_EOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timestamp is late compared to the current render position. Advise dropping this frame..
        /// </summary>
        internal static string NS_S_WMG_ADVISE_DROP_FRAME {
            get {
                return ResourceManager.GetString("NS_S_WMG_ADVISE_DROP_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timestamp is severely late compared to the current render position. Advise dropping everything up to the next key frame..
        /// </summary>
        internal static string NS_S_WMG_ADVISE_DROP_TO_KEYFRAME {
            get {
                return ResourceManager.GetString("NS_S_WMG_ADVISE_DROP_TO_KEYFRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop this frame..
        /// </summary>
        internal static string NS_S_WMG_FORCE_DROP_FRAME {
            get {
                return ResourceManager.GetString("NS_S_WMG_FORCE_DROP_FRAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred in one of the UI components..
        /// </summary>
        internal static string NS_S_WMP_EXCEPTION {
            get {
                return ResourceManager.GetString("NS_S_WMP_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully loaded a BMP file..
        /// </summary>
        internal static string NS_S_WMP_LOADED_BMP_IMAGE {
            get {
                return ResourceManager.GetString("NS_S_WMP_LOADED_BMP_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully loaded a GIF file..
        /// </summary>
        internal static string NS_S_WMP_LOADED_GIF_IMAGE {
            get {
                return ResourceManager.GetString("NS_S_WMP_LOADED_GIF_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully loaded a JPG file..
        /// </summary>
        internal static string NS_S_WMP_LOADED_JPG_IMAGE {
            get {
                return ResourceManager.GetString("NS_S_WMP_LOADED_JPG_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully loaded a PNG file..
        /// </summary>
        internal static string NS_S_WMP_LOADED_PNG_IMAGE {
            get {
                return ResourceManager.GetString("NS_S_WMP_LOADED_PNG_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An upgrade might be needed for the theme manager to correctly show this skin. Skin reports version: %.1f..
        /// </summary>
        internal static string NS_S_WMP_UI_VERSIONMISMATCH {
            get {
                return ResourceManager.GetString("NS_S_WMP_UI_VERSIONMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transfer complete with limitations..
        /// </summary>
        internal static string NS_S_WMPBR_PARTIALSUCCESS {
            get {
                return ResourceManager.GetString("NS_S_WMPBR_PARTIALSUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup or Restore successful!..
        /// </summary>
        internal static string NS_S_WMPBR_SUCCESS {
            get {
                return ResourceManager.GetString("NS_S_WMPBR_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current state of WMP disallows calling this method or property..
        /// </summary>
        internal static string NS_S_WMPCORE_COMMAND_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_COMMAND_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The open for the child playlist associated with this media is pending..
        /// </summary>
        internal static string NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation of the media is pending....
        /// </summary>
        internal static string NS_S_WMPCORE_MEDIA_VALIDATION_PENDING {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_MEDIA_VALIDATION_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More nodes support the interface requested, but the array for returning them is full..
        /// </summary>
        internal static string NS_S_WMPCORE_MORE_NODES_AVAIABLE {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_MORE_NODES_AVAIABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The M3U playlist has been ignored because it only contains one item..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playlist is being generated asynchronously..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLIST_CREATION_PENDING {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLIST_CREATION_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The imported playlist does not contain all items from the original..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name for the playlist has been auto generated..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encountered more than one Repeat block during ASX processing..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to clear playlist because it was aborted by user..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLISTCLEARABORT {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLISTCLEARABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to remove item in the playlist since it was aborted by user..
        /// </summary>
        internal static string NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT {
            get {
                return ResourceManager.GetString("NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request to the effects control to change transparency status to opaque..
        /// </summary>
        internal static string NS_S_WMPEFFECT_OPAQUE {
            get {
                return ResourceManager.GetString("NS_S_WMPEFFECT_OPAQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request to the effects control to change transparency status to transparent..
        /// </summary>
        internal static string NS_S_WMPEFFECT_TRANSPARENT {
            get {
                return ResourceManager.GetString("NS_S_WMPEFFECT_TRANSPARENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified stream has already been rendered..
        /// </summary>
        internal static string NS_S_WMR_ALREADYRENDERED {
            get {
                return ResourceManager.GetString("NS_S_WMR_ALREADYRENDERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified type fully matches this pin type..
        /// </summary>
        internal static string NS_S_WMR_PINTYPEFULLMATCH {
            get {
                return ResourceManager.GetString("NS_S_WMR_PINTYPEFULLMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified type partially matches this pin type..
        /// </summary>
        internal static string NS_S_WMR_PINTYPEPARTIALMATCH {
            get {
                return ResourceManager.GetString("NS_S_WMR_PINTYPEPARTIALMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum bandwidth value specified is less than the maximum filebitrate..
        /// </summary>
        internal static string NS_W_FILE_BANDWIDTH_LIMIT {
            get {
                return ResourceManager.GetString("NS_W_FILE_BANDWIDTH_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum filebitrate value specified is greater than the server&apos;s configured maximum bandwidth..
        /// </summary>
        internal static string NS_W_SERVER_BANDWIDTH_LIMIT {
            get {
                return ResourceManager.GetString("NS_W_SERVER_BANDWIDTH_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown %1 event encountered..
        /// </summary>
        internal static string NS_W_UNKNOWN_EVENT {
            get {
                return ResourceManager.GetString("NS_W_UNKNOWN_EVENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid algorithm specified..
        /// </summary>
        internal static string NTE_BAD_ALGID {
            get {
                return ResourceManager.GetString("NTE_BAD_ALGID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Data..
        /// </summary>
        internal static string NTE_BAD_DATA {
            get {
                return ResourceManager.GetString("NTE_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid flags specified..
        /// </summary>
        internal static string NTE_BAD_FLAGS {
            get {
                return ResourceManager.GetString("NTE_BAD_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Hash..
        /// </summary>
        internal static string NTE_BAD_HASH {
            get {
                return ResourceManager.GetString("NTE_BAD_HASH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hash not valid for use in specified state..
        /// </summary>
        internal static string NTE_BAD_HASH_STATE {
            get {
                return ResourceManager.GetString("NTE_BAD_HASH_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Key..
        /// </summary>
        internal static string NTE_BAD_KEY {
            get {
                return ResourceManager.GetString("NTE_BAD_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key not valid for use in specified state..
        /// </summary>
        internal static string NTE_BAD_KEY_STATE {
            get {
                return ResourceManager.GetString("NTE_BAD_KEY_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyset does not exist.
        /// </summary>
        internal static string NTE_BAD_KEYSET {
            get {
                return ResourceManager.GetString("NTE_BAD_KEYSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Keyset parameter is invalid..
        /// </summary>
        internal static string NTE_BAD_KEYSET_PARAM {
            get {
                return ResourceManager.GetString("NTE_BAD_KEYSET_PARAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Length..
        /// </summary>
        internal static string NTE_BAD_LEN {
            get {
                return ResourceManager.GetString("NTE_BAD_LEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid provider type specified..
        /// </summary>
        internal static string NTE_BAD_PROV_TYPE {
            get {
                return ResourceManager.GetString("NTE_BAD_PROV_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid provider specified..
        /// </summary>
        internal static string NTE_BAD_PROVIDER {
            get {
                return ResourceManager.GetString("NTE_BAD_PROVIDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider&apos;s public key is invalid..
        /// </summary>
        internal static string NTE_BAD_PUBLIC_KEY {
            get {
                return ResourceManager.GetString("NTE_BAD_PUBLIC_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Signature..
        /// </summary>
        internal static string NTE_BAD_SIGNATURE {
            get {
                return ResourceManager.GetString("NTE_BAD_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid type specified..
        /// </summary>
        internal static string NTE_BAD_TYPE {
            get {
                return ResourceManager.GetString("NTE_BAD_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad UID..
        /// </summary>
        internal static string NTE_BAD_UID {
            get {
                return ResourceManager.GetString("NTE_BAD_UID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Version of provider..
        /// </summary>
        internal static string NTE_BAD_VER {
            get {
                return ResourceManager.GetString("NTE_BAD_VER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer supplied to a function was too small..
        /// </summary>
        internal static string NTE_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("NTE_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied buffers overlap incorrectly..
        /// </summary>
        internal static string NTE_BUFFERS_OVERLAP {
            get {
                return ResourceManager.GetString("NTE_BUFFERS_OVERLAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified data could not be decrypted..
        /// </summary>
        internal static string NTE_DECRYPTION_FAILURE {
            get {
                return ResourceManager.GetString("NTE_DECRYPTION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data already encrypted..
        /// </summary>
        internal static string NTE_DOUBLE_ENCRYPT {
            get {
                return ResourceManager.GetString("NTE_DOUBLE_ENCRYPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object already exists..
        /// </summary>
        internal static string NTE_EXISTS {
            get {
                return ResourceManager.GetString("NTE_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error occurred..
        /// </summary>
        internal static string NTE_FAIL {
            get {
                return ResourceManager.GetString("NTE_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key parameters could not be set because the CSP uses fixed parameters..
        /// </summary>
        internal static string NTE_FIXEDPARAMETER {
            get {
                return ResourceManager.GetString("NTE_FIXEDPARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic provider does not support HMAC..
        /// </summary>
        internal static string NTE_HMAC_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NTE_HMAC_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal consistency check failed..
        /// </summary>
        internal static string NTE_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("NTE_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied handle is invalid..
        /// </summary>
        internal static string NTE_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("NTE_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter is incorrect..
        /// </summary>
        internal static string NTE_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("NTE_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyset as registered is invalid..
        /// </summary>
        internal static string NTE_KEYSET_ENTRY_BAD {
            get {
                return ResourceManager.GetString("NTE_KEYSET_ENTRY_BAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The keyset is not defined..
        /// </summary>
        internal static string NTE_KEYSET_NOT_DEF {
            get {
                return ResourceManager.GetString("NTE_KEYSET_NOT_DEF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key does not exist..
        /// </summary>
        internal static string NTE_NO_KEY {
            get {
                return ResourceManager.GetString("NTE_NO_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient memory available for the operation..
        /// </summary>
        internal static string NTE_NO_MEMORY {
            get {
                return ResourceManager.GetString("NTE_NO_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more data is available..
        /// </summary>
        internal static string NTE_NO_MORE_ITEMS {
            get {
                return ResourceManager.GetString("NTE_NO_MORE_ITEMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object was not found..
        /// </summary>
        internal static string NTE_NOT_FOUND {
            get {
                return ResourceManager.GetString("NTE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not supported..
        /// </summary>
        internal static string NTE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("NTE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access denied..
        /// </summary>
        internal static string NTE_PERM {
            get {
                return ResourceManager.GetString("NTE_PERM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider DLL could not be found..
        /// </summary>
        internal static string NTE_PROV_DLL_NOT_FOUND {
            get {
                return ResourceManager.GetString("NTE_PROV_DLL_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider type as registered is invalid..
        /// </summary>
        internal static string NTE_PROV_TYPE_ENTRY_BAD {
            get {
                return ResourceManager.GetString("NTE_PROV_TYPE_ENTRY_BAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider type does not match registered value..
        /// </summary>
        internal static string NTE_PROV_TYPE_NO_MATCH {
            get {
                return ResourceManager.GetString("NTE_PROV_TYPE_NO_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider type not defined..
        /// </summary>
        internal static string NTE_PROV_TYPE_NOT_DEF {
            get {
                return ResourceManager.GetString("NTE_PROV_TYPE_NOT_DEF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider DLL failed to initialize correctly..
        /// </summary>
        internal static string NTE_PROVIDER_DLL_FAIL {
            get {
                return ResourceManager.GetString("NTE_PROVIDER_DLL_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The digital signature file is corrupt..
        /// </summary>
        internal static string NTE_SIGNATURE_FILE_BAD {
            get {
                return ResourceManager.GetString("NTE_SIGNATURE_FILE_BAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider could not perform the action since the context was acquired as silent..
        /// </summary>
        internal static string NTE_SILENT_CONTEXT {
            get {
                return ResourceManager.GetString("NTE_SILENT_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base error occurred..
        /// </summary>
        internal static string NTE_SYS_ERR {
            get {
                return ResourceManager.GetString("NTE_SYS_ERR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The profile for the user is a temporary profile..
        /// </summary>
        internal static string NTE_TEMPORARY_PROFILE {
            get {
                return ResourceManager.GetString("NTE_TEMPORARY_PROFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token does not have storage space available for an additional container..
        /// </summary>
        internal static string NTE_TOKEN_KEYSET_STORAGE_FULL {
            get {
                return ResourceManager.GetString("NTE_TOKEN_KEYSET_STORAGE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation requires input from the user..
        /// </summary>
        internal static string NTE_UI_REQUIRED {
            get {
                return ResourceManager.GetString("NTE_UI_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid advise flags.
        /// </summary>
        internal static string OLE_E_ADVF {
            get {
                return ResourceManager.GetString("OLE_E_ADVF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This implementation doesn&apos;t take advises.
        /// </summary>
        internal static string OLE_E_ADVISENOTSUPPORTED {
            get {
                return ResourceManager.GetString("OLE_E_ADVISENOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninitialized object.
        /// </summary>
        internal static string OLE_E_BLANK {
            get {
                return ResourceManager.GetString("OLE_E_BLANK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to bind to the source.
        /// </summary>
        internal static string OLE_E_CANT_BINDTOSOURCE {
            get {
                return ResourceManager.GetString("OLE_E_CANT_BINDTOSOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to get the moniker of the object.
        /// </summary>
        internal static string OLE_E_CANT_GETMONIKER {
            get {
                return ResourceManager.GetString("OLE_E_CANT_GETMONIKER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to convert object.
        /// </summary>
        internal static string OLE_E_CANTCONVERT {
            get {
                return ResourceManager.GetString("OLE_E_CANTCONVERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Linked object&apos;s source class has changed.
        /// </summary>
        internal static string OLE_E_CLASSDIFF {
            get {
                return ResourceManager.GetString("OLE_E_CLASSDIFF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t enumerate any more, because the associated data is missing.
        /// </summary>
        internal static string OLE_E_ENUM_NOMORE {
            get {
                return ResourceManager.GetString("OLE_E_ENUM_NOMORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid window handle.
        /// </summary>
        internal static string OLE_E_INVALIDHWND {
            get {
                return ResourceManager.GetString("OLE_E_INVALIDHWND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid rectangle.
        /// </summary>
        internal static string OLE_E_INVALIDRECT {
            get {
                return ResourceManager.GetString("OLE_E_INVALIDRECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no cache to operate on.
        /// </summary>
        internal static string OLE_E_NOCACHE {
            get {
                return ResourceManager.GetString("OLE_E_NOCACHE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no connection for this connection ID.
        /// </summary>
        internal static string OLE_E_NOCONNECTION {
            get {
                return ResourceManager.GetString("OLE_E_NOCONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to perform the operation because object is not given storage yet.
        /// </summary>
        internal static string OLE_E_NOSTORAGE {
            get {
                return ResourceManager.GetString("OLE_E_NOSTORAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is not in any of the inplace active states.
        /// </summary>
        internal static string OLE_E_NOT_INPLACEACTIVE {
            get {
                return ResourceManager.GetString("OLE_E_NOT_INPLACEACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need to run the object to perform this operation.
        /// </summary>
        internal static string OLE_E_NOTRUNNING {
            get {
                return ResourceManager.GetString("OLE_E_NOTRUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid OLEVERB structure.
        /// </summary>
        internal static string OLE_E_OLEVERB {
            get {
                return ResourceManager.GetString("OLE_E_OLEVERB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User canceled out of save dialog.
        /// </summary>
        internal static string OLE_E_PROMPTSAVECANCELLED {
            get {
                return ResourceManager.GetString("OLE_E_PROMPTSAVECANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is static; operation not allowed.
        /// </summary>
        internal static string OLE_E_STATIC {
            get {
                return ResourceManager.GetString("OLE_E_STATIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to compobj.dll is too old for the ole2.dll initialized.
        /// </summary>
        internal static string OLE_E_WRONGCOMPOBJ {
            get {
                return ResourceManager.GetString("OLE_E_WRONGCOMPOBJ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Macintosh clipboard format.
        /// </summary>
        internal static string OLE_S_MAC_CLIPFORMAT {
            get {
                return ResourceManager.GetString("OLE_S_MAC_CLIPFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Success, but static.
        /// </summary>
        internal static string OLE_S_STATIC {
            get {
                return ResourceManager.GetString("OLE_S_STATIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the registry database to provide the requested information.
        /// </summary>
        internal static string OLE_S_USEREG {
            get {
                return ResourceManager.GetString("OLE_S_USEREG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid verb for OLE object.
        /// </summary>
        internal static string OLEOBJ_E_INVALIDVERB {
            get {
                return ResourceManager.GetString("OLEOBJ_E_INVALIDVERB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No verbs for OLE object.
        /// </summary>
        internal static string OLEOBJ_E_NOVERBS {
            get {
                return ResourceManager.GetString("OLEOBJ_E_NOVERBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verb number is valid but verb cannot be done now.
        /// </summary>
        internal static string OLEOBJ_S_CANNOT_DOVERB_NOW {
            get {
                return ResourceManager.GetString("OLEOBJ_S_CANNOT_DOVERB_NOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid window handle passed.
        /// </summary>
        internal static string OLEOBJ_S_INVALIDHWND {
            get {
                return ResourceManager.GetString("OLEOBJ_S_INVALIDHWND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid verb for OLE object.
        /// </summary>
        internal static string OLEOBJ_S_INVALIDVERB {
            get {
                return ResourceManager.GetString("OLEOBJ_S_INVALIDVERB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Multi-threading conflict..
        /// </summary>
        internal static string OSS_ACCESS_SERIALIZATION_ERROR {
            get {
                return ResourceManager.GetString("OSS_ACCESS_SERIALIZATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_API_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_API_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid argument..
        /// </summary>
        internal static string OSS_BAD_ARG {
            get {
                return ResourceManager.GetString("OSS_BAD_ARG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_BAD_ENCRULES {
            get {
                return ResourceManager.GetString("OSS_BAD_ENCRULES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_BAD_PTR {
            get {
                return ResourceManager.GetString("OSS_BAD_PTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_BAD_TABLE {
            get {
                return ResourceManager.GetString("OSS_BAD_TABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_BAD_TIME {
            get {
                return ResourceManager.GetString("OSS_BAD_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Encode/Decode version mismatch..
        /// </summary>
        internal static string OSS_BAD_VERSION {
            get {
                return ResourceManager.GetString("OSS_BAD_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_BERDER_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_BERDER_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Trace file error..
        /// </summary>
        internal static string OSS_CANT_CLOSE_TRACE_FILE {
            get {
                return ResourceManager.GetString("OSS_CANT_CLOSE_TRACE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Trace file error..
        /// </summary>
        internal static string OSS_CANT_OPEN_TRACE_FILE {
            get {
                return ResourceManager.GetString("OSS_CANT_OPEN_TRACE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Trace file error..
        /// </summary>
        internal static string OSS_CANT_OPEN_TRACE_WINDOW {
            get {
                return ResourceManager.GetString("OSS_CANT_OPEN_TRACE_WINDOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_COMPARATOR_CODE_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_COMPARATOR_CODE_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_COMPARATOR_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_COMPARATOR_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_CONSTRAINT_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_CONSTRAINT_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_CONSTRAINT_VIOLATED {
            get {
                return ResourceManager.GetString("OSS_CONSTRAINT_VIOLATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_COPIER_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_COPIER_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_DATA_ERROR {
            get {
                return ResourceManager.GetString("OSS_DATA_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Internal Error..
        /// </summary>
        internal static string OSS_FATAL_ERROR {
            get {
                return ResourceManager.GetString("OSS_FATAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Unsupported BER indefinite-length encoding..
        /// </summary>
        internal static string OSS_INDEFINITE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("OSS_INDEFINITE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Internal Error..
        /// </summary>
        internal static string OSS_LIMITED {
            get {
                return ResourceManager.GetString("OSS_LIMITED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Access violation..
        /// </summary>
        internal static string OSS_MEM_ERROR {
            get {
                return ResourceManager.GetString("OSS_MEM_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_MEM_MGR_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_MEM_MGR_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Output Buffer is too small..
        /// </summary>
        internal static string OSS_MORE_BUF {
            get {
                return ResourceManager.GetString("OSS_MORE_BUF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Output buffer is too small, the decoded data has been truncated..
        /// </summary>
        internal static string OSS_MORE_INPUT {
            get {
                return ResourceManager.GetString("OSS_MORE_INPUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: System resource error..
        /// </summary>
        internal static string OSS_MUTEX_NOT_CREATED {
            get {
                return ResourceManager.GetString("OSS_MUTEX_NOT_CREATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Signed integer is encoded as a unsigned integer..
        /// </summary>
        internal static string OSS_NEGATIVE_UINTEGER {
            get {
                return ResourceManager.GetString("OSS_NEGATIVE_UINTEGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_NULL_FCN {
            get {
                return ResourceManager.GetString("OSS_NULL_FCN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_NULL_TBL {
            get {
                return ResourceManager.GetString("OSS_NULL_TBL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_OID_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_OID_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_OPEN_TYPE_ERROR {
            get {
                return ResourceManager.GetString("OSS_OPEN_TYPE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Out of memory..
        /// </summary>
        internal static string OSS_OUT_MEMORY {
            get {
                return ResourceManager.GetString("OSS_OUT_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("OSS_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Encode/Decode Error..
        /// </summary>
        internal static string OSS_PDU_MISMATCH {
            get {
                return ResourceManager.GetString("OSS_PDU_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Unknown ASN.1 data type..
        /// </summary>
        internal static string OSS_PDU_RANGE {
            get {
                return ResourceManager.GetString("OSS_PDU_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_PDV_CODE_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_PDV_CODE_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_PDV_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_PDV_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_PER_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_PER_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_REAL_CODE_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_REAL_CODE_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Program link error..
        /// </summary>
        internal static string OSS_REAL_DLL_NOT_LINKED {
            get {
                return ResourceManager.GetString("OSS_REAL_DLL_NOT_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_TABLE_MISMATCH {
            get {
                return ResourceManager.GetString("OSS_TABLE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_TOO_LONG {
            get {
                return ResourceManager.GetString("OSS_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Trace file error..
        /// </summary>
        internal static string OSS_TRACE_FILE_ALREADY_OPEN {
            get {
                return ResourceManager.GetString("OSS_TRACE_FILE_ALREADY_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Invalid data..
        /// </summary>
        internal static string OSS_TYPE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("OSS_TYPE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Encode/Decode function not implemented..
        /// </summary>
        internal static string OSS_UNAVAIL_ENCRULES {
            get {
                return ResourceManager.GetString("OSS_UNAVAIL_ENCRULES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OSS ASN.1 Error: Function not implemented..
        /// </summary>
        internal static string OSS_UNIMPLEMENTED {
            get {
                return ResourceManager.GetString("OSS_UNIMPLEMENTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File is PE32.
        /// </summary>
        internal static string PEFMT_E_32BIT {
            get {
                return ResourceManager.GetString("PEFMT_E_32BIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File is PE32+..
        /// </summary>
        internal static string PEFMT_E_64BIT {
            get {
                return ResourceManager.GetString("PEFMT_E_64BIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This object does not read and write self-sizing data..
        /// </summary>
        internal static string PERSIST_E_NOTSELFSIZING {
            get {
                return ResourceManager.GetString("PERSIST_E_NOTSELFSIZING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the data could not be determined..
        /// </summary>
        internal static string PERSIST_E_SIZEDEFINITE {
            get {
                return ResourceManager.GetString("PERSIST_E_SIZEDEFINITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the indefinite-sized data could not be determined..
        /// </summary>
        internal static string PERSIST_E_SIZEINDEFINITE {
            get {
                return ResourceManager.GetString("PERSIST_E_SIZEINDEFINITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict was detected in the list of include/exclude APIs. Do not specify the same API in both the include list and the exclude list..
        /// </summary>
        internal static string PLA_E_CONFLICT_INCL_EXCL_API {
            get {
                return ResourceManager.GetString("PLA_E_CONFLICT_INCL_EXCL_API", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A user account is required in order to commit the current Data Collector Set properties..
        /// </summary>
        internal static string PLA_E_CREDENTIALS_REQUIRED {
            get {
                return ResourceManager.GetString("PLA_E_CREDENTIALS_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Collector already exists..
        /// </summary>
        internal static string PLA_E_DC_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("PLA_E_DC_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wait for the Data Collector to start has timed out..
        /// </summary>
        internal static string PLA_E_DC_START_WAIT_TIMEOUT {
            get {
                return ResourceManager.GetString("PLA_E_DC_START_WAIT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Collector Set already exists..
        /// </summary>
        internal static string PLA_E_DCS_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("PLA_E_DCS_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Data Collector Set or one of its dependencies is already in use..
        /// </summary>
        internal static string PLA_E_DCS_IN_USE {
            get {
                return ResourceManager.GetString("PLA_E_DCS_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Collector Set was not found..
        /// </summary>
        internal static string PLA_E_DCS_NOT_FOUND {
            get {
                return ResourceManager.GetString("PLA_E_DCS_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Collector Set is not running..
        /// </summary>
        internal static string PLA_E_DCS_NOT_RUNNING {
            get {
                return ResourceManager.GetString("PLA_E_DCS_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current configuration for this Data Collector Set requires that it contain exactly one Data Collector..
        /// </summary>
        internal static string PLA_E_DCS_SINGLETON_REQUIRED {
            get {
                return ResourceManager.GetString("PLA_E_DCS_SINGLETON_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wait for the Data Collector Set start notification has timed out..
        /// </summary>
        internal static string PLA_E_DCS_START_WAIT_TIMEOUT {
            get {
                return ResourceManager.GetString("PLA_E_DCS_START_WAIT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executable path you have specified is already configured for API tracing..
        /// </summary>
        internal static string PLA_E_EXE_ALREADY_CONFIGURED {
            get {
                return ResourceManager.GetString("PLA_E_EXE_ALREADY_CONFIGURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specifying the executable that you want to trace, you must specify a full path to the executable and not just a filename..
        /// </summary>
        internal static string PLA_E_EXE_FULL_PATH_REQUIRED {
            get {
                return ResourceManager.GetString("PLA_E_EXE_FULL_PATH_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executable path you have specified does not exist. Verify that the specified path is correct..
        /// </summary>
        internal static string PLA_E_EXE_PATH_NOT_VALID {
            get {
                return ResourceManager.GetString("PLA_E_EXE_PATH_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session name provided is invalid..
        /// </summary>
        internal static string PLA_E_INVALID_SESSION_NAME {
            get {
                return ResourceManager.GetString("PLA_E_INVALID_SESSION_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executable path you have specified refers to a network share or UNC path..
        /// </summary>
        internal static string PLA_E_NETWORK_EXE_NOT_VALID {
            get {
                return ResourceManager.GetString("PLA_E_NETWORK_EXE_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate items are not allowed..
        /// </summary>
        internal static string PLA_E_NO_DUPLICATES {
            get {
                return ResourceManager.GetString("PLA_E_NO_DUPLICATES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough free disk space to start Data Collector Set..
        /// </summary>
        internal static string PLA_E_NO_MIN_DISK {
            get {
                return ResourceManager.GetString("PLA_E_NO_MIN_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Event Log channel Microsoft-Windows-Diagnosis-PLA/Operational must be enabled to perform this operation..
        /// </summary>
        internal static string PLA_E_PLA_CHANNEL_NOT_ENABLED {
            get {
                return ResourceManager.GetString("PLA_E_PLA_CHANNEL_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property value conflict..
        /// </summary>
        internal static string PLA_E_PROPERTY_CONFLICT {
            get {
                return ResourceManager.GetString("PLA_E_PROPERTY_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wait for the report generation tool to finish has timed out..
        /// </summary>
        internal static string PLA_E_REPORT_WAIT_TIMEOUT {
            get {
                return ResourceManager.GetString("PLA_E_REPORT_WAIT_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Event Log channel Microsoft-Windows-TaskScheduler must be enabled to perform this operation..
        /// </summary>
        internal static string PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED {
            get {
                return ResourceManager.GetString("PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to start Data Collector Set because there are too many folders..
        /// </summary>
        internal static string PLA_E_TOO_MANY_FOLDERS {
            get {
                return ResourceManager.GetString("PLA_E_TOO_MANY_FOLDERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property value will be ignored..
        /// </summary>
        internal static string PLA_S_PROPERTY_IGNORED {
            get {
                return ResourceManager.GetString("PLA_S_PROPERTY_IGNORED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Threading model entry is not valid.
        /// </summary>
        internal static string REGDB_E_BADTHREADINGMODEL {
            get {
                return ResourceManager.GetString("REGDB_E_BADTHREADINGMODEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class not registered.
        /// </summary>
        internal static string REGDB_E_CLASSNOTREG {
            get {
                return ResourceManager.GetString("REGDB_E_CLASSNOTREG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface not registered.
        /// </summary>
        internal static string REGDB_E_IIDNOTREG {
            get {
                return ResourceManager.GetString("REGDB_E_IIDNOTREG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for registry.
        /// </summary>
        internal static string REGDB_E_INVALIDVALUE {
            get {
                return ResourceManager.GetString("REGDB_E_INVALIDVALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the key in the registry.
        /// </summary>
        internal static string REGDB_E_KEYMISSING {
            get {
                return ResourceManager.GetString("REGDB_E_KEYMISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not read key from registry.
        /// </summary>
        internal static string REGDB_E_READREGDB {
            get {
                return ResourceManager.GetString("REGDB_E_READREGDB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not write key to registry.
        /// </summary>
        internal static string REGDB_E_WRITEREGDB {
            get {
                return ResourceManager.GetString("REGDB_E_WRITEREGDB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied..
        /// </summary>
        internal static string RPC_E_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("RPC_E_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to make calls on more than one thread in single threaded mode..
        /// </summary>
        internal static string RPC_E_ATTEMPTED_MULTITHREAD {
            get {
                return ResourceManager.GetString("RPC_E_ATTEMPTED_MULTITHREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call was canceled by the message filter..
        /// </summary>
        internal static string RPC_E_CALL_CANCELED {
            get {
                return ResourceManager.GetString("RPC_E_CALL_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call context cannot be accessed after call completed..
        /// </summary>
        internal static string RPC_E_CALL_COMPLETE {
            get {
                return ResourceManager.GetString("RPC_E_CALL_COMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call was rejected by callee..
        /// </summary>
        internal static string RPC_E_CALL_REJECTED {
            get {
                return ResourceManager.GetString("RPC_E_CALL_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no second outgoing call on same channel in DDE conversation..
        /// </summary>
        internal static string RPC_E_CANTCALLOUT_AGAIN {
            get {
                return ResourceManager.GetString("RPC_E_CANTCALLOUT_AGAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller is dispatching an asynchronous call and cannot make an outgoing call on behalf of this call..
        /// </summary>
        internal static string RPC_E_CANTCALLOUT_INASYNCCALL {
            get {
                return ResourceManager.GetString("RPC_E_CANTCALLOUT_INASYNCCALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is illegal to call out while inside message filter..
        /// </summary>
        internal static string RPC_E_CANTCALLOUT_INEXTERNALCALL {
            get {
                return ResourceManager.GetString("RPC_E_CANTCALLOUT_INEXTERNALCALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An outgoing call cannot be made since the application is dispatching an input-synchronous call..
        /// </summary>
        internal static string RPC_E_CANTCALLOUT_ININPUTSYNCCALL {
            get {
                return ResourceManager.GetString("RPC_E_CANTCALLOUT_ININPUTSYNCCALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller is dispatching an intertask SendMessage call and cannot call out via PostMessage..
        /// </summary>
        internal static string RPC_E_CANTPOST_INSENDCALL {
            get {
                return ResourceManager.GetString("RPC_E_CANTPOST_INSENDCALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call was not transmitted properly; the message queue was full and was not emptied after yielding..
        /// </summary>
        internal static string RPC_E_CANTTRANSMIT_CALL {
            get {
                return ResourceManager.GetString("RPC_E_CANTTRANSMIT_CALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change thread mode after it is set..
        /// </summary>
        internal static string RPC_E_CHANGED_MODE {
            get {
                return ResourceManager.GetString("RPC_E_CHANGED_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client (caller) cannot marshall the parameter data - low memory, etc..
        /// </summary>
        internal static string RPC_E_CLIENT_CANTMARSHAL_DATA {
            get {
                return ResourceManager.GetString("RPC_E_CLIENT_CANTMARSHAL_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client (caller) cannot unmarshall the return data - low memory, etc..
        /// </summary>
        internal static string RPC_E_CLIENT_CANTUNMARSHAL_DATA {
            get {
                return ResourceManager.GetString("RPC_E_CLIENT_CANTUNMARSHAL_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller (client) disappeared while the callee (server) was processing a call..
        /// </summary>
        internal static string RPC_E_CLIENT_DIED {
            get {
                return ResourceManager.GetString("RPC_E_CLIENT_DIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection terminated or is in a bogus state and cannot be used any more. Other connections are still valid..
        /// </summary>
        internal static string RPC_E_CONNECTION_TERMINATED {
            get {
                return ResourceManager.GetString("RPC_E_CONNECTION_TERMINATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object invoked has disconnected from its clients..
        /// </summary>
        internal static string RPC_E_DISCONNECTED {
            get {
                return ResourceManager.GetString("RPC_E_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RPC could not call the server or could not return the results of calling the server..
        /// </summary>
        internal static string RPC_E_FAULT {
            get {
                return ResourceManager.GetString("RPC_E_FAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full subject issuer chain SSL principal name expected from the server..
        /// </summary>
        internal static string RPC_E_FULLSIC_REQUIRED {
            get {
                return ResourceManager.GetString("RPC_E_FULLSIC_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call control interfaces was called with invalid data..
        /// </summary>
        internal static string RPC_E_INVALID_CALLDATA {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_CALLDATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received data is invalid; could be server or client data..
        /// </summary>
        internal static string RPC_E_INVALID_DATA {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data packet with the marshalled parameter data is incorrect..
        /// </summary>
        internal static string RPC_E_INVALID_DATAPACKET {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_DATAPACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE received a packet with an invalid extension..
        /// </summary>
        internal static string RPC_E_INVALID_EXTENSION {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_EXTENSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE received a packet with an invalid header..
        /// </summary>
        internal static string RPC_E_INVALID_HEADER {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested object or interface does not exist..
        /// </summary>
        internal static string RPC_E_INVALID_IPID {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_IPID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested object does not exist..
        /// </summary>
        internal static string RPC_E_INVALID_OBJECT {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The marshaled interface data packet (OBJREF) has an invalid or unknown format..
        /// </summary>
        internal static string RPC_E_INVALID_OBJREF {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_OBJREF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A particular parameter is invalid and cannot be (un)marshalled..
        /// </summary>
        internal static string RPC_E_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Principal name is not a valid MSSTD name..
        /// </summary>
        internal static string RPC_E_INVALID_STD_NAME {
            get {
                return ResourceManager.GetString("RPC_E_INVALID_STD_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method called does not exist on the server..
        /// </summary>
        internal static string RPC_E_INVALIDMETHOD {
            get {
                return ResourceManager.GetString("RPC_E_INVALIDMETHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No context is associated with this call. This happens for some custom marshalled calls and on the client side of the call..
        /// </summary>
        internal static string RPC_E_NO_CONTEXT {
            get {
                return ResourceManager.GetString("RPC_E_NO_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No security packages are installed on this machine or the user is not logged on or there are no compatible security packages between the client and server..
        /// </summary>
        internal static string RPC_E_NO_GOOD_SECURITY_PACKAGES {
            get {
                return ResourceManager.GetString("RPC_E_NO_GOOD_SECURITY_PACKAGES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no synchronize objects to wait on..
        /// </summary>
        internal static string RPC_E_NO_SYNC {
            get {
                return ResourceManager.GetString("RPC_E_NO_SYNC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested interface is not registered on the server object..
        /// </summary>
        internal static string RPC_E_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("RPC_E_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not allocate some required resource (memory, events, ...).
        /// </summary>
        internal static string RPC_E_OUT_OF_RESOURCES {
            get {
                return ResourceManager.GetString("RPC_E_OUT_OF_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remote calls are not allowed for this process..
        /// </summary>
        internal static string RPC_E_REMOTE_DISABLED {
            get {
                return ResourceManager.GetString("RPC_E_REMOTE_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object invoked chose not to process the call now. Try again later..
        /// </summary>
        internal static string RPC_E_RETRY {
            get {
                return ResourceManager.GetString("RPC_E_RETRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server (callee) cannot marshall the return data - low memory, etc..
        /// </summary>
        internal static string RPC_E_SERVER_CANTMARSHAL_DATA {
            get {
                return ResourceManager.GetString("RPC_E_SERVER_CANTMARSHAL_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server (callee) cannot unmarshall the parameter data - low memory, etc..
        /// </summary>
        internal static string RPC_E_SERVER_CANTUNMARSHAL_DATA {
            get {
                return ResourceManager.GetString("RPC_E_SERVER_CANTUNMARSHAL_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callee (server [not server application]) is not available and disappeared; all connections are invalid. The call may have executed..
        /// </summary>
        internal static string RPC_E_SERVER_DIED {
            get {
                return ResourceManager.GetString("RPC_E_SERVER_DIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callee (server [not server application]) is not available and disappeared; all connections are invalid. The call did not execute..
        /// </summary>
        internal static string RPC_E_SERVER_DIED_DNE {
            get {
                return ResourceManager.GetString("RPC_E_SERVER_DIED_DNE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message filter rejected the call..
        /// </summary>
        internal static string RPC_E_SERVERCALL_REJECTED {
            get {
                return ResourceManager.GetString("RPC_E_SERVERCALL_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message filter indicated that the application is busy..
        /// </summary>
        internal static string RPC_E_SERVERCALL_RETRYLATER {
            get {
                return ResourceManager.GetString("RPC_E_SERVERCALL_RETRYLATER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server threw an exception..
        /// </summary>
        internal static string RPC_E_SERVERFAULT {
            get {
                return ResourceManager.GetString("RPC_E_SERVERFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System call failed..
        /// </summary>
        internal static string RPC_E_SYS_CALL_FAILED {
            get {
                return ResourceManager.GetString("RPC_E_SYS_CALL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CoInitialize has not been called on the current thread..
        /// </summary>
        internal static string RPC_E_THREAD_NOT_INIT {
            get {
                return ResourceManager.GetString("RPC_E_THREAD_NOT_INIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation returned because the timeout period expired..
        /// </summary>
        internal static string RPC_E_TIMEOUT {
            get {
                return ResourceManager.GetString("RPC_E_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized..
        /// </summary>
        internal static string RPC_E_TOO_LATE {
            get {
                return ResourceManager.GetString("RPC_E_TOO_LATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error occurred..
        /// </summary>
        internal static string RPC_E_UNEXPECTED {
            get {
                return ResourceManager.GetString("RPC_E_UNEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Impersonate on unsecure calls is not supported..
        /// </summary>
        internal static string RPC_E_UNSECURE_CALL {
            get {
                return ResourceManager.GetString("RPC_E_UNSECURE_CALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of OLE on the client and server machines does not match..
        /// </summary>
        internal static string RPC_E_VERSION_MISMATCH {
            get {
                return ResourceManager.GetString("RPC_E_VERSION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application called an interface that was marshalled for a different thread..
        /// </summary>
        internal static string RPC_E_WRONG_THREAD {
            get {
                return ResourceManager.GetString("RPC_E_WRONG_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE has sent a request and is waiting for a reply..
        /// </summary>
        internal static string RPC_S_CALLPENDING {
            get {
                return ResourceManager.GetString("RPC_S_CALLPENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE is waiting before retrying a request..
        /// </summary>
        internal static string RPC_S_WAITONTIMER {
            get {
                return ResourceManager.GetString("RPC_S_WAITONTIMER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect function..
        /// </summary>
        internal static string S_FALSE {
            get {
                return ResourceManager.GetString("S_FALSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation completed successfully..
        /// </summary>
        internal static string S_OK {
            get {
                return ResourceManager.GetString("S_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error trying to set the smart card file object pointer..
        /// </summary>
        internal static string SCARD_E_BAD_SEEK {
            get {
                return ResourceManager.GetString("SCARD_E_BAD_SEEK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action was cancelled by an SCardCancel request..
        /// </summary>
        internal static string SCARD_E_CANCELLED {
            get {
                return ResourceManager.GetString("SCARD_E_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not dispose of the media in the requested manner..
        /// </summary>
        internal static string SCARD_E_CANT_DISPOSE {
            get {
                return ResourceManager.GetString("SCARD_E_CANT_DISPOSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card does not meet minimal requirements for support..
        /// </summary>
        internal static string SCARD_E_CARD_UNSUPPORTED {
            get {
                return ResourceManager.GetString("SCARD_E_CARD_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested certificate could not be obtained..
        /// </summary>
        internal static string SCARD_E_CERTIFICATE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("SCARD_E_CERTIFICATE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A communications error with the smart card has been detected. Retry the operation..
        /// </summary>
        internal static string SCARD_E_COMM_DATA_LOST {
            get {
                return ResourceManager.GetString("SCARD_E_COMM_DATA_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identified directory does not exist in the smart card..
        /// </summary>
        internal static string SCARD_E_DIR_NOT_FOUND {
            get {
                return ResourceManager.GetString("SCARD_E_DIR_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reader driver did not produce a unique reader name..
        /// </summary>
        internal static string SCARD_E_DUPLICATE_READER {
            get {
                return ResourceManager.GetString("SCARD_E_DUPLICATE_READER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identified file does not exist in the smart card..
        /// </summary>
        internal static string SCARD_E_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("SCARD_E_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested order of object creation is not supported..
        /// </summary>
        internal static string SCARD_E_ICC_CREATEORDER {
            get {
                return ResourceManager.GetString("SCARD_E_ICC_CREATEORDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Primary Provider can be found for the smart card..
        /// </summary>
        internal static string SCARD_E_ICC_INSTALLATION {
            get {
                return ResourceManager.GetString("SCARD_E_ICC_INSTALLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data buffer to receive returned data is too small for the returned data..
        /// </summary>
        internal static string SCARD_E_INSUFFICIENT_BUFFER {
            get {
                return ResourceManager.GetString("SCARD_E_INSUFFICIENT_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ATR obtained from the registry is not a valid ATR string..
        /// </summary>
        internal static string SCARD_E_INVALID_ATR {
            get {
                return ResourceManager.GetString("SCARD_E_INVALID_ATR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied PIN is incorrect..
        /// </summary>
        internal static string SCARD_E_INVALID_CHV {
            get {
                return ResourceManager.GetString("SCARD_E_INVALID_CHV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied handle was invalid..
        /// </summary>
        internal static string SCARD_E_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("SCARD_E_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the supplied parameters could not be properly interpreted..
        /// </summary>
        internal static string SCARD_E_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("SCARD_E_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registry startup information is missing or invalid..
        /// </summary>
        internal static string SCARD_E_INVALID_TARGET {
            get {
                return ResourceManager.GetString("SCARD_E_INVALID_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the supplied parameters values could not be properly interpreted..
        /// </summary>
        internal static string SCARD_E_INVALID_VALUE {
            get {
                return ResourceManager.GetString("SCARD_E_INVALID_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied to this file..
        /// </summary>
        internal static string SCARD_E_NO_ACCESS {
            get {
                return ResourceManager.GetString("SCARD_E_NO_ACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied path does not represent a smart card directory..
        /// </summary>
        internal static string SCARD_E_NO_DIR {
            get {
                return ResourceManager.GetString("SCARD_E_NO_DIR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied path does not represent a smart card file..
        /// </summary>
        internal static string SCARD_E_NO_FILE {
            get {
                return ResourceManager.GetString("SCARD_E_NO_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested key container does not exist on the smart card..
        /// </summary>
        internal static string SCARD_E_NO_KEY_CONTAINER {
            get {
                return ResourceManager.GetString("SCARD_E_NO_KEY_CONTAINER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory available to complete this command..
        /// </summary>
        internal static string SCARD_E_NO_MEMORY {
            get {
                return ResourceManager.GetString("SCARD_E_NO_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a smart card reader..
        /// </summary>
        internal static string SCARD_E_NO_READERS_AVAILABLE {
            get {
                return ResourceManager.GetString("SCARD_E_NO_READERS_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Smart Card Resource Manager is not running..
        /// </summary>
        internal static string SCARD_E_NO_SERVICE {
            get {
                return ResourceManager.GetString("SCARD_E_NO_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation requires a smart card, but no smart card is currently in the device..
        /// </summary>
        internal static string SCARD_E_NO_SMARTCARD {
            get {
                return ResourceManager.GetString("SCARD_E_NO_SMARTCARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested certificate does not exist..
        /// </summary>
        internal static string SCARD_E_NO_SUCH_CERTIFICATE {
            get {
                return ResourceManager.GetString("SCARD_E_NO_SUCH_CERTIFICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reader or smart card is not ready to accept commands..
        /// </summary>
        internal static string SCARD_E_NOT_READY {
            get {
                return ResourceManager.GetString("SCARD_E_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to end a non-existent transaction..
        /// </summary>
        internal static string SCARD_E_NOT_TRANSACTED {
            get {
                return ResourceManager.GetString("SCARD_E_NOT_TRANSACTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PCI Receive buffer was too small..
        /// </summary>
        internal static string SCARD_E_PCI_TOO_SMALL {
            get {
                return ResourceManager.GetString("SCARD_E_PCI_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested protocols are incompatible with the protocol currently in use with the smart card..
        /// </summary>
        internal static string SCARD_E_PROTO_MISMATCH {
            get {
                return ResourceManager.GetString("SCARD_E_PROTO_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified reader is not currently available for use..
        /// </summary>
        internal static string SCARD_E_READER_UNAVAILABLE {
            get {
                return ResourceManager.GetString("SCARD_E_READER_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reader driver does not meet minimal requirements for support..
        /// </summary>
        internal static string SCARD_E_READER_UNSUPPORTED {
            get {
                return ResourceManager.GetString("SCARD_E_READER_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Smart Card Resource Manager is too busy to complete this operation..
        /// </summary>
        internal static string SCARD_E_SERVER_TOO_BUSY {
            get {
                return ResourceManager.GetString("SCARD_E_SERVER_TOO_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Smart Card Resource Manager has shut down..
        /// </summary>
        internal static string SCARD_E_SERVICE_STOPPED {
            get {
                return ResourceManager.GetString("SCARD_E_SERVICE_STOPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card cannot be accessed because of other connections outstanding..
        /// </summary>
        internal static string SCARD_E_SHARING_VIOLATION {
            get {
                return ResourceManager.GetString("SCARD_E_SHARING_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action was cancelled by the system, presumably to log off or shut down..
        /// </summary>
        internal static string SCARD_E_SYSTEM_CANCELLED {
            get {
                return ResourceManager.GetString("SCARD_E_SYSTEM_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user-specified timeout value has expired..
        /// </summary>
        internal static string SCARD_E_TIMEOUT {
            get {
                return ResourceManager.GetString("SCARD_E_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected card error has occurred..
        /// </summary>
        internal static string SCARD_E_UNEXPECTED {
            get {
                return ResourceManager.GetString("SCARD_E_UNEXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified smart card name is not recognized..
        /// </summary>
        internal static string SCARD_E_UNKNOWN_CARD {
            get {
                return ResourceManager.GetString("SCARD_E_UNKNOWN_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified reader name is not recognized..
        /// </summary>
        internal static string SCARD_E_UNKNOWN_READER {
            get {
                return ResourceManager.GetString("SCARD_E_UNKNOWN_READER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecognized error code was returned from a layered component..
        /// </summary>
        internal static string SCARD_E_UNKNOWN_RES_MNG {
            get {
                return ResourceManager.GetString("SCARD_E_UNKNOWN_RES_MNG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This smart card does not support the requested feature..
        /// </summary>
        internal static string SCARD_E_UNSUPPORTED_FEATURE {
            get {
                return ResourceManager.GetString("SCARD_E_UNSUPPORTED_FEATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card does not have enough memory to store the information..
        /// </summary>
        internal static string SCARD_E_WRITE_TOO_MANY {
            get {
                return ResourceManager.GetString("SCARD_E_WRITE_TOO_MANY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal communications error has been detected..
        /// </summary>
        internal static string SCARD_F_COMM_ERROR {
            get {
                return ResourceManager.GetString("SCARD_F_COMM_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal consistency check failed..
        /// </summary>
        internal static string SCARD_F_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("SCARD_F_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has been detected, but the source is unknown..
        /// </summary>
        internal static string SCARD_F_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("SCARD_F_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal consistency timer has expired..
        /// </summary>
        internal static string SCARD_F_WAITED_TOO_LONG {
            get {
                return ResourceManager.GetString("SCARD_F_WAITED_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation has been aborted to allow the server application to exit..
        /// </summary>
        internal static string SCARD_P_SHUTDOWN {
            get {
                return ResourceManager.GetString("SCARD_P_SHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation completed successfully..
        /// </summary>
        internal static string SCARD_S_SUCCESS {
            get {
                return ResourceManager.GetString("SCARD_S_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action was cancelled by the user..
        /// </summary>
        internal static string SCARD_W_CANCELLED_BY_USER {
            get {
                return ResourceManager.GetString("SCARD_W_CANCELLED_BY_USER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No PIN was presented to the smart card..
        /// </summary>
        internal static string SCARD_W_CARD_NOT_AUTHENTICATED {
            get {
                return ResourceManager.GetString("SCARD_W_CARD_NOT_AUTHENTICATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The card cannot be accessed because the maximum number of PIN entry attempts has been reached..
        /// </summary>
        internal static string SCARD_W_CHV_BLOCKED {
            get {
                return ResourceManager.GetString("SCARD_W_CHV_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The end of the smart card file has been reached..
        /// </summary>
        internal static string SCARD_W_EOF {
            get {
                return ResourceManager.GetString("SCARD_W_EOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card has been removed, so that further communication is not possible..
        /// </summary>
        internal static string SCARD_W_REMOVED_CARD {
            get {
                return ResourceManager.GetString("SCARD_W_REMOVED_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card has been reset, so any shared state information is invalid..
        /// </summary>
        internal static string SCARD_W_RESET_CARD {
            get {
                return ResourceManager.GetString("SCARD_W_RESET_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access was denied because of a security violation..
        /// </summary>
        internal static string SCARD_W_SECURITY_VIOLATION {
            get {
                return ResourceManager.GetString("SCARD_W_SECURITY_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Power has been removed from the smart card, so that further communication is not possible..
        /// </summary>
        internal static string SCARD_W_UNPOWERED_CARD {
            get {
                return ResourceManager.GetString("SCARD_W_UNPOWERED_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card is not responding to a reset..
        /// </summary>
        internal static string SCARD_W_UNRESPONSIVE_CARD {
            get {
                return ResourceManager.GetString("SCARD_W_UNRESPONSIVE_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reader cannot communicate with the smart card, due to ATR configuration conflicts..
        /// </summary>
        internal static string SCARD_W_UNSUPPORTED_CARD {
            get {
                return ResourceManager.GetString("SCARD_W_UNSUPPORTED_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The card cannot be accessed because the wrong PIN was presented..
        /// </summary>
        internal static string SCARD_W_WRONG_CHV {
            get {
                return ResourceManager.GetString("SCARD_W_WRONG_CHV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Corruption was detected in the Task Scheduler security database; the database has been reset..
        /// </summary>
        internal static string SCHED_E_ACCOUNT_DBASE_CORRUPT {
            get {
                return ResourceManager.GetString("SCHED_E_ACCOUNT_DBASE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No account information could be found in the Task Scheduler security database for the task indicated..
        /// </summary>
        internal static string SCHED_E_ACCOUNT_INFORMATION_NOT_SET {
            get {
                return ResourceManager.GetString("SCHED_E_ACCOUNT_INFORMATION_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to establish existence of the account specified..
        /// </summary>
        internal static string SCHED_E_ACCOUNT_NAME_NOT_FOUND {
            get {
                return ResourceManager.GetString("SCHED_E_ACCOUNT_NAME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance of this task is already running..
        /// </summary>
        internal static string SCHED_E_ALREADY_RUNNING {
            get {
                return ResourceManager.GetString("SCHED_E_ALREADY_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task object could not be opened..
        /// </summary>
        internal static string SCHED_E_CANNOT_OPEN_TASK {
            get {
                return ResourceManager.GetString("SCHED_E_CANNOT_OPEN_TASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is either an invalid task object or is not a task object..
        /// </summary>
        internal static string SCHED_E_INVALID_TASK {
            get {
                return ResourceManager.GetString("SCHED_E_INVALID_TASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task image is corrupt or has been tampered with..
        /// </summary>
        internal static string SCHED_E_INVALID_TASK_HASH {
            get {
                return ResourceManager.GetString("SCHED_E_INVALID_TASK_HASH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task XML contains a value which is incorrectly formatted or out of range..
        /// </summary>
        internal static string SCHED_E_INVALIDVALUE {
            get {
                return ResourceManager.GetString("SCHED_E_INVALIDVALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task XML is malformed..
        /// </summary>
        internal static string SCHED_E_MALFORMEDXML {
            get {
                return ResourceManager.GetString("SCHED_E_MALFORMEDXML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task XML is missing a required element or attribute..
        /// </summary>
        internal static string SCHED_E_MISSINGNODE {
            get {
                return ResourceManager.GetString("SCHED_E_MISSINGNODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task XML contains an element or attribute from an unexpected namespace..
        /// </summary>
        internal static string SCHED_E_NAMESPACE {
            get {
                return ResourceManager.GetString("SCHED_E_NAMESPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task Scheduler security services are available only on Windows NT..
        /// </summary>
        internal static string SCHED_E_NO_SECURITY_SERVICES {
            get {
                return ResourceManager.GetString("SCHED_E_NO_SECURITY_SERVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task cannot be started after the trigger&apos;s end boundary..
        /// </summary>
        internal static string SCHED_E_PAST_END_BOUNDARY {
            get {
                return ResourceManager.GetString("SCHED_E_PAST_END_BOUNDARY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Task Scheduler service is not available..
        /// </summary>
        internal static string SCHED_E_SERVICE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("SCHED_E_SERVICE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Task Scheduler Service is not installed on this computer..
        /// </summary>
        internal static string SCHED_E_SERVICE_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("SCHED_E_SERVICE_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Task Scheduler Service is not running..
        /// </summary>
        internal static string SCHED_E_SERVICE_NOT_RUNNING {
            get {
                return ResourceManager.GetString("SCHED_E_SERVICE_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Task Scheduler service is too busy to handle your request. Please try again later..
        /// </summary>
        internal static string SCHED_E_SERVICE_TOO_BUSY {
            get {
                return ResourceManager.GetString("SCHED_E_SERVICE_TOO_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Task Scheduler service attempted to run the task, but the task did not run due to one of the constraints in the task definition..
        /// </summary>
        internal static string SCHED_E_TASK_ATTEMPTED {
            get {
                return ResourceManager.GetString("SCHED_E_TASK_ATTEMPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the properties that are needed to run this task have not been set..
        /// </summary>
        internal static string SCHED_E_TASK_NOT_READY {
            get {
                return ResourceManager.GetString("SCHED_E_TASK_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no running instance of the task..
        /// </summary>
        internal static string SCHED_E_TASK_NOT_RUNNING {
            get {
                return ResourceManager.GetString("SCHED_E_TASK_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task XML contains too many nodes of the same type..
        /// </summary>
        internal static string SCHED_E_TOO_MANY_NODES {
            get {
                return ResourceManager.GetString("SCHED_E_TOO_MANY_NODES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger not found..
        /// </summary>
        internal static string SCHED_E_TRIGGER_NOT_FOUND {
            get {
                return ResourceManager.GetString("SCHED_E_TRIGGER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task XML contains an unexpected node..
        /// </summary>
        internal static string SCHED_E_UNEXPECTEDNODE {
            get {
                return ResourceManager.GetString("SCHED_E_UNEXPECTEDNODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task object version is either unsupported or invalid..
        /// </summary>
        internal static string SCHED_E_UNKNOWN_OBJECT_VERSION {
            get {
                return ResourceManager.GetString("SCHED_E_UNKNOWN_OBJECT_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task has been configured with an unsupported combination of account settings and run time options..
        /// </summary>
        internal static string SCHED_E_UNSUPPORTED_ACCOUNT_OPTION {
            get {
                return ResourceManager.GetString("SCHED_E_UNSUPPORTED_ACCOUNT_OPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task will not run because the user is not logged on..
        /// </summary>
        internal static string SCHED_E_USER_NOT_LOGGED_ON {
            get {
                return ResourceManager.GetString("SCHED_E_USER_NOT_LOGGED_ON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task is registered, but may fail to start. Batch logon privilege needs to be enabled for the task principal..
        /// </summary>
        internal static string SCHED_S_BATCH_LOGON_PROBLEM {
            get {
                return ResourceManager.GetString("SCHED_S_BATCH_LOGON_PROBLEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event triggers don&apos;t have set run times..
        /// </summary>
        internal static string SCHED_S_EVENT_TRIGGER {
            get {
                return ResourceManager.GetString("SCHED_S_EVENT_TRIGGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task is registered, but not all specified triggers will start the task, check task scheduler event log for detailed information..
        /// </summary>
        internal static string SCHED_S_SOME_TRIGGERS_FAILED {
            get {
                return ResourceManager.GetString("SCHED_S_SOME_TRIGGERS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task will not run at the scheduled times because it has been disabled..
        /// </summary>
        internal static string SCHED_S_TASK_DISABLED {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task has not yet run..
        /// </summary>
        internal static string SCHED_S_TASK_HAS_NOT_RUN {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_HAS_NOT_RUN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more runs scheduled for this task..
        /// </summary>
        internal static string SCHED_S_TASK_NO_MORE_RUNS {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_NO_MORE_RUNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either the task has no triggers or the existing triggers are disabled or not set..
        /// </summary>
        internal static string SCHED_S_TASK_NO_VALID_TRIGGERS {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_NO_VALID_TRIGGERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the properties that are needed to run this task on a schedule have not been set..
        /// </summary>
        internal static string SCHED_S_TASK_NOT_SCHEDULED {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_NOT_SCHEDULED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task is ready to run at its next scheduled time..
        /// </summary>
        internal static string SCHED_S_TASK_READY {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task is currently running..
        /// </summary>
        internal static string SCHED_S_TASK_RUNNING {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The last run of the task was terminated by the user..
        /// </summary>
        internal static string SCHED_S_TASK_TERMINATED {
            get {
                return ResourceManager.GetString("SCHED_S_TASK_TERMINATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client and server cannot communicate, because they do not possess a common algorithm..
        /// </summary>
        internal static string SEC_E_ALGORITHM_MISMATCH {
            get {
                return ResourceManager.GetString("SEC_E_ALGORITHM_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client&apos;s supplied SSPI channel bindings were incorrect..
        /// </summary>
        internal static string SEC_E_BAD_BINDINGS {
            get {
                return ResourceManager.GetString("SEC_E_BAD_BINDINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested security package does not exist.
        /// </summary>
        internal static string SEC_E_BAD_PKGID {
            get {
                return ResourceManager.GetString("SEC_E_BAD_PKGID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffers supplied to a function was too small..
        /// </summary>
        internal static string SEC_E_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("SEC_E_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security package failed to initialize, and cannot be installed.
        /// </summary>
        internal static string SEC_E_CANNOT_INSTALL {
            get {
                return ResourceManager.GetString("SEC_E_CANNOT_INSTALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security package is not able to marshall the logon buffer, so the logon attempt has failed.
        /// </summary>
        internal static string SEC_E_CANNOT_PACK {
            get {
                return ResourceManager.GetString("SEC_E_CANNOT_PACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received certificate has expired..
        /// </summary>
        internal static string SEC_E_CERT_EXPIRED {
            get {
                return ResourceManager.GetString("SEC_E_CERT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred while processing the certificate..
        /// </summary>
        internal static string SEC_E_CERT_UNKNOWN {
            get {
                return ResourceManager.GetString("SEC_E_CERT_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate is not valid for the requested usage..
        /// </summary>
        internal static string SEC_E_CERT_WRONG_USAGE {
            get {
                return ResourceManager.GetString("SEC_E_CERT_WRONG_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context has expired and can no longer be used..
        /// </summary>
        internal static string SEC_E_CONTEXT_EXPIRED {
            get {
                return ResourceManager.GetString("SEC_E_CONTEXT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made by this server to make a Kerberos constrained delegation request for a target outside of the server&apos;s realm. This is not supported, and indicates a misconfiguration on this server&apos;s allowed to delegate to list. Please contact your administrator..
        /// </summary>
        internal static string SEC_E_CROSSREALM_DELEGATION_FAILURE {
            get {
                return ResourceManager.GetString("SEC_E_CROSSREALM_DELEGATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The crypto system or checksum function is invalid because a required function is unavailable..
        /// </summary>
        internal static string SEC_E_CRYPTO_SYSTEM_INVALID {
            get {
                return ResourceManager.GetString("SEC_E_CRYPTO_SYSTEM_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified data could not be decrypted..
        /// </summary>
        internal static string SEC_E_DECRYPT_FAILURE {
            get {
                return ResourceManager.GetString("SEC_E_DECRYPT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client policy does not allow credential delegation to target server..
        /// </summary>
        internal static string SEC_E_DELEGATION_POLICY {
            get {
                return ResourceManager.GetString("SEC_E_DELEGATION_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be completed. The computer must be trusted for delegation and the current user account must be configured to allow delegation..
        /// </summary>
        internal static string SEC_E_DELEGATION_REQUIRED {
            get {
                return ResourceManager.GetString("SEC_E_DELEGATION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system cannot contact a domain controller to service the authentication request. Please try again later..
        /// </summary>
        internal static string SEC_E_DOWNGRADE_DETECTED {
            get {
                return ResourceManager.GetString("SEC_E_DOWNGRADE_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified data could not be encrypted..
        /// </summary>
        internal static string SEC_E_ENCRYPT_FAILURE {
            get {
                return ResourceManager.GetString("SEC_E_ENCRYPT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message received was unexpected or badly formatted..
        /// </summary>
        internal static string SEC_E_ILLEGAL_MESSAGE {
            get {
                return ResourceManager.GetString("SEC_E_ILLEGAL_MESSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The credentials supplied were not complete, and could not be verified. The context could not be initialized..
        /// </summary>
        internal static string SEC_E_INCOMPLETE_CREDENTIALS {
            get {
                return ResourceManager.GetString("SEC_E_INCOMPLETE_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied message is incomplete. The signature was not verified..
        /// </summary>
        internal static string SEC_E_INCOMPLETE_MESSAGE {
            get {
                return ResourceManager.GetString("SEC_E_INCOMPLETE_MESSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory is available to complete this request.
        /// </summary>
        internal static string SEC_E_INSUFFICIENT_MEMORY {
            get {
                return ResourceManager.GetString("SEC_E_INSUFFICIENT_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Local Security Authority cannot be contacted.
        /// </summary>
        internal static string SEC_E_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("SEC_E_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handle specified is invalid.
        /// </summary>
        internal static string SEC_E_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("SEC_E_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the parameters passed to the function was invalid..
        /// </summary>
        internal static string SEC_E_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("SEC_E_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token supplied to the function is invalid.
        /// </summary>
        internal static string SEC_E_INVALID_TOKEN {
            get {
                return ResourceManager.GetString("SEC_E_INVALID_TOKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An untrusted certificate authority was detected while processing the smartcard certificate used for authentication. Please contact your system administrator..
        /// </summary>
        internal static string SEC_E_ISSUING_CA_UNTRUSTED {
            get {
                return ResourceManager.GetString("SEC_E_ISSUING_CA_UNTRUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An untrusted certificate authority was detected while processing the domain controller certificate used for authentication. There is additional information in the system event log. Please contact your system administrator..
        /// </summary>
        internal static string SEC_E_ISSUING_CA_UNTRUSTED_KDC {
            get {
                return ResourceManager.GetString("SEC_E_ISSUING_CA_UNTRUSTED_KDC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The domain controller certificate used for smartcard logon has expired. Please contact your system administrator with the contents of your system event log..
        /// </summary>
        internal static string SEC_E_KDC_CERT_EXPIRED {
            get {
                return ResourceManager.GetString("SEC_E_KDC_CERT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The domain controller certificate used for smartcard logon has been revoked. Please contact your system administrator with the contents of your system event log..
        /// </summary>
        internal static string SEC_E_KDC_CERT_REVOKED {
            get {
                return ResourceManager.GetString("SEC_E_KDC_CERT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid request was sent to the KDC..
        /// </summary>
        internal static string SEC_E_KDC_INVALID_REQUEST {
            get {
                return ResourceManager.GetString("SEC_E_KDC_INVALID_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KDC was unable to generate a referral for the service requested..
        /// </summary>
        internal static string SEC_E_KDC_UNABLE_TO_REFER {
            get {
                return ResourceManager.GetString("SEC_E_KDC_UNABLE_TO_REFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption type requested is not supported by the KDC..
        /// </summary>
        internal static string SEC_E_KDC_UNKNOWN_ETYPE {
            get {
                return ResourceManager.GetString("SEC_E_KDC_UNKNOWN_ETYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logon attempt failed.
        /// </summary>
        internal static string SEC_E_LOGON_DENIED {
            get {
                return ResourceManager.GetString("SEC_E_LOGON_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of maximum ticket referrals has been exceeded..
        /// </summary>
        internal static string SEC_E_MAX_REFERRALS_EXCEEDED {
            get {
                return ResourceManager.GetString("SEC_E_MAX_REFERRALS_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message or signature supplied for verification has been altered.
        /// </summary>
        internal static string SEC_E_MESSAGE_ALTERED {
            get {
                return ResourceManager.GetString("SEC_E_MESSAGE_ALTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received certificate was mapped to multiple accounts..
        /// </summary>
        internal static string SEC_E_MULTIPLE_ACCOUNTS {
            get {
                return ResourceManager.GetString("SEC_E_MULTIPLE_ACCOUNTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local machine must be a Kerberos KDC (domain controller) and it is not..
        /// </summary>
        internal static string SEC_E_MUST_BE_KDC {
            get {
                return ResourceManager.GetString("SEC_E_MUST_BE_KDC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No authority could be contacted for authentication..
        /// </summary>
        internal static string SEC_E_NO_AUTHENTICATING_AUTHORITY {
            get {
                return ResourceManager.GetString("SEC_E_NO_AUTHENTICATING_AUTHORITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No credentials are available in the security package.
        /// </summary>
        internal static string SEC_E_NO_CREDENTIALS {
            get {
                return ResourceManager.GetString("SEC_E_NO_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security context does not allow impersonation of the client.
        /// </summary>
        internal static string SEC_E_NO_IMPERSONATION {
            get {
                return ResourceManager.GetString("SEC_E_NO_IMPERSONATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to accomplish the requested task because the local machine does not have any IP addresses..
        /// </summary>
        internal static string SEC_E_NO_IP_ADDRESSES {
            get {
                return ResourceManager.GetString("SEC_E_NO_IP_ADDRESSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SEC_E_NO_KERB_KEY.
        /// </summary>
        internal static string SEC_E_NO_KERB_KEY {
            get {
                return ResourceManager.GetString("SEC_E_NO_KERB_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected to find PA data for a hint of what etype to use, but it was not found..
        /// </summary>
        internal static string SEC_E_NO_PA_DATA {
            get {
                return ResourceManager.GetString("SEC_E_NO_PA_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Kerberos subsystem encountered an error. A service for user protocol request was made against a domain controller which does not support service for user..
        /// </summary>
        internal static string SEC_E_NO_S4U_PROT_SUPPORT {
            get {
                return ResourceManager.GetString("SEC_E_NO_S4U_PROT_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client is trying to negotiate a context and the server requires user-to-user but didn&apos;t send a TGT reply..
        /// </summary>
        internal static string SEC_E_NO_TGT_REPLY {
            get {
                return ResourceManager.GetString("SEC_E_NO_TGT_REPLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller is not the owner of the desired credentials.
        /// </summary>
        internal static string SEC_E_NOT_OWNER {
            get {
                return ResourceManager.GetString("SEC_E_NOT_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message supplied for verification is out of sequence.
        /// </summary>
        internal static string SEC_E_OUT_OF_SEQUENCE {
            get {
                return ResourceManager.GetString("SEC_E_OUT_OF_SEQUENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smartcard certificate used for authentication was not trusted. Please contact your system administrator..
        /// </summary>
        internal static string SEC_E_PKINIT_CLIENT_FAILURE {
            get {
                return ResourceManager.GetString("SEC_E_PKINIT_CLIENT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client certificate does not contain a valid UPN, or does not match the client name in the logon request. Please contact your administrator..
        /// </summary>
        internal static string SEC_E_PKINIT_NAME_MISMATCH {
            get {
                return ResourceManager.GetString("SEC_E_PKINIT_NAME_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client policy does not allow credential delegation to target server with NLTM only authentication..
        /// </summary>
        internal static string SEC_E_POLICY_NLTM_ONLY {
            get {
                return ResourceManager.GetString("SEC_E_POLICY_NLTM_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The per-message Quality of Protection is not supported by the security package.
        /// </summary>
        internal static string SEC_E_QOP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("SEC_E_QOP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation status of the smartcard certificate used for authentication could not be determined. Please contact your system administrator..
        /// </summary>
        internal static string SEC_E_REVOCATION_OFFLINE_C {
            get {
                return ResourceManager.GetString("SEC_E_REVOCATION_OFFLINE_C", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation status of the domain controller certificate used for smartcard authentication could not be determined. There is additional information in the system event log. Please contact your system administrator..
        /// </summary>
        internal static string SEC_E_REVOCATION_OFFLINE_KDC {
            get {
                return ResourceManager.GetString("SEC_E_REVOCATION_OFFLINE_KDC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested security package does not exist.
        /// </summary>
        internal static string SEC_E_SECPKG_NOT_FOUND {
            get {
                return ResourceManager.GetString("SEC_E_SECPKG_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security context could not be established due to a failure in the requested quality of service (e.g. mutual authentication or delegation)..
        /// </summary>
        internal static string SEC_E_SECURITY_QOS_FAILED {
            get {
                return ResourceManager.GetString("SEC_E_SECURITY_QOS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A system shutdown is in progress..
        /// </summary>
        internal static string SEC_E_SHUTDOWN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("SEC_E_SHUTDOWN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smartcard certificate used for authentication has expired. Please contact your system administrator..
        /// </summary>
        internal static string SEC_E_SMARTCARD_CERT_EXPIRED {
            get {
                return ResourceManager.GetString("SEC_E_SMARTCARD_CERT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smartcard certificate used for authentication has been revoked. Please contact your system administrator. There may be additional information in the event log..
        /// </summary>
        internal static string SEC_E_SMARTCARD_CERT_REVOKED {
            get {
                return ResourceManager.GetString("SEC_E_SMARTCARD_CERT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Smartcard logon is required and was not used..
        /// </summary>
        internal static string SEC_E_SMARTCARD_LOGON_REQUIRED {
            get {
                return ResourceManager.GetString("SEC_E_SMARTCARD_LOGON_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The other end of the security negotiation is requires strong crypto but it is not supported on the local machine..
        /// </summary>
        internal static string SEC_E_STRONG_CRYPTO_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("SEC_E_STRONG_CRYPTO_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified target is unknown or unreachable.
        /// </summary>
        internal static string SEC_E_TARGET_UNKNOWN {
            get {
                return ResourceManager.GetString("SEC_E_TARGET_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The clocks on the client and server machines are skewed..
        /// </summary>
        internal static string SEC_E_TIME_SKEW {
            get {
                return ResourceManager.GetString("SEC_E_TIME_SKEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KDC reply contained more than one principal name..
        /// </summary>
        internal static string SEC_E_TOO_MANY_PRINCIPALS {
            get {
                return ResourceManager.GetString("SEC_E_TOO_MANY_PRINCIPALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security context was deleted before the context was completed. This is considered a logon failure..
        /// </summary>
        internal static string SEC_E_UNFINISHED_CONTEXT_DELETED {
            get {
                return ResourceManager.GetString("SEC_E_UNFINISHED_CONTEXT_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The credentials supplied to the package were not recognized.
        /// </summary>
        internal static string SEC_E_UNKNOWN_CREDENTIALS {
            get {
                return ResourceManager.GetString("SEC_E_UNKNOWN_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function requested is not supported.
        /// </summary>
        internal static string SEC_E_UNSUPPORTED_FUNCTION {
            get {
                return ResourceManager.GetString("SEC_E_UNSUPPORTED_FUNCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unsupported preauthentication mechanism was presented to the Kerberos package..
        /// </summary>
        internal static string SEC_E_UNSUPPORTED_PREAUTH {
            get {
                return ResourceManager.GetString("SEC_E_UNSUPPORTED_PREAUTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate chain was issued by an authority that is not trusted..
        /// </summary>
        internal static string SEC_E_UNTRUSTED_ROOT {
            get {
                return ResourceManager.GetString("SEC_E_UNTRUSTED_ROOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied credential handle does not match the credential associated with the security context..
        /// </summary>
        internal static string SEC_E_WRONG_CREDENTIAL_HANDLE {
            get {
                return ResourceManager.GetString("SEC_E_WRONG_CREDENTIAL_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target principal name is incorrect..
        /// </summary>
        internal static string SEC_E_WRONG_PRINCIPAL {
            get {
                return ResourceManager.GetString("SEC_E_WRONG_PRINCIPAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function completed successfully, but both CompleteToken and this function must be called to complete the context.
        /// </summary>
        internal static string SEC_I_COMPLETE_AND_CONTINUE {
            get {
                return ResourceManager.GetString("SEC_I_COMPLETE_AND_CONTINUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function completed successfully, but CompleteToken must be called.
        /// </summary>
        internal static string SEC_I_COMPLETE_NEEDED {
            get {
                return ResourceManager.GetString("SEC_I_COMPLETE_NEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context has expired and can no longer be used..
        /// </summary>
        internal static string SEC_I_CONTEXT_EXPIRED {
            get {
                return ResourceManager.GetString("SEC_I_CONTEXT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function completed successfully, but must be called again to complete the context.
        /// </summary>
        internal static string SEC_I_CONTINUE_NEEDED {
            get {
                return ResourceManager.GetString("SEC_I_CONTINUE_NEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The credentials supplied were not complete, and could not be verified. Additional information can be returned from the context..
        /// </summary>
        internal static string SEC_I_INCOMPLETE_CREDENTIALS {
            get {
                return ResourceManager.GetString("SEC_I_INCOMPLETE_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logon was completed, but no network authority was available. The logon was made using locally known information.
        /// </summary>
        internal static string SEC_I_LOCAL_LOGON {
            get {
                return ResourceManager.GetString("SEC_I_LOCAL_LOGON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no LSA mode context associated with this context..
        /// </summary>
        internal static string SEC_I_NO_LSA_CONTEXT {
            get {
                return ResourceManager.GetString("SEC_I_NO_LSA_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context data must be renegotiated with the peer..
        /// </summary>
        internal static string SEC_I_RENEGOTIATE {
            get {
                return ResourceManager.GetString("SEC_I_RENEGOTIATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A signature operation must be performed before the user can authenticate..
        /// </summary>
        internal static string SEC_I_SIGNATURE_NEEDED {
            get {
                return ResourceManager.GetString("SEC_I_SIGNATURE_NEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly already loaded without additional security evidence..
        /// </summary>
        internal static string SECURITY_E_INCOMPATIBLE_EVIDENCE {
            get {
                return ResourceManager.GetString("SECURITY_E_INCOMPATIBLE_EVIDENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading this assembly would produce a different grant set from other instances..
        /// </summary>
        internal static string SECURITY_E_INCOMPATIBLE_SHARE {
            get {
                return ResourceManager.GetString("SECURITY_E_INCOMPATIBLE_SHARE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unverifiable code failed policy check..
        /// </summary>
        internal static string SECURITY_E_UNVERIFIABLE {
            get {
                return ResourceManager.GetString("SECURITY_E_UNVERIFIABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authenticode(tm) signature verification is not supported for the specified INF..
        /// </summary>
        internal static string SPAPI_E_AUTHENTICODE_DISALLOWED {
            get {
                return ResourceManager.GetString("SPAPI_E_AUTHENTICODE_DISALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The publisher of an Authenticode(tm) signed catalog was not established as trusted..
        /// </summary>
        internal static string SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED {
            get {
                return ResourceManager.GetString("SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The publisher of an Authenticode(tm) signed catalog has not yet been established as trusted..
        /// </summary>
        internal static string SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED {
            get {
                return ResourceManager.GetString("SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The INF was signed with an Authenticode(tm) catalog from a trusted publisher..
        /// </summary>
        internal static string SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER {
            get {
                return ResourceManager.GetString("SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interface installation section in this INF is invalid..
        /// </summary>
        internal static string SPAPI_E_BAD_INTERFACE_INSTALLSECT {
            get {
                return ResourceManager.GetString("SPAPI_E_BAD_INTERFACE_INSTALLSECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A section name marker in the INF is not complete, or does not exist on a line by itself..
        /// </summary>
        internal static string SPAPI_E_BAD_SECTION_NAME_LINE {
            get {
                return ResourceManager.GetString("SPAPI_E_BAD_SECTION_NAME_LINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A service installation section in this INF is invalid..
        /// </summary>
        internal static string SPAPI_E_BAD_SERVICE_INSTALLSECT {
            get {
                return ResourceManager.GetString("SPAPI_E_BAD_SERVICE_INSTALLSECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The icon representing this install class cannot be loaded..
        /// </summary>
        internal static string SPAPI_E_CANT_LOAD_CLASS_ICON {
            get {
                return ResourceManager.GetString("SPAPI_E_CANT_LOAD_CLASS_ICON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device could not be dynamically removed..
        /// </summary>
        internal static string SPAPI_E_CANT_REMOVE_DEVINST {
            get {
                return ResourceManager.GetString("SPAPI_E_CANT_REMOVE_DEVINST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The INF or the device information set or element does not match the specified install class..
        /// </summary>
        internal static string SPAPI_E_CLASS_MISMATCH {
            get {
                return ResourceManager.GetString("SPAPI_E_CLASS_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The installation of this device is forbidden by system policy. Contact your system administrator..
        /// </summary>
        internal static string SPAPI_E_DEVICE_INSTALL_BLOCKED {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVICE_INSTALL_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the installers for this device cannot perform the installation at this time..
        /// </summary>
        internal static string SPAPI_E_DEVICE_INSTALLER_NOT_READY {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVICE_INSTALLER_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because the device interface is currently active..
        /// </summary>
        internal static string SPAPI_E_DEVICE_INTERFACE_ACTIVE {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVICE_INTERFACE_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because the device interface has been removed from the system..
        /// </summary>
        internal static string SPAPI_E_DEVICE_INTERFACE_REMOVED {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVICE_INTERFACE_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because the device information element is locked..
        /// </summary>
        internal static string SPAPI_E_DEVINFO_DATA_LOCKED {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVINFO_DATA_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because the device information set is locked..
        /// </summary>
        internal static string SPAPI_E_DEVINFO_LIST_LOCKED {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVINFO_LIST_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed on a device information element that has not been registered..
        /// </summary>
        internal static string SPAPI_E_DEVINFO_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVINFO_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device instance cannot be created because it already exists..
        /// </summary>
        internal static string SPAPI_E_DEVINST_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVINST_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid attempt was made to use a device installation file queue for verification of digital signatures relative to other platforms..
        /// </summary>
        internal static string SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE {
            get {
                return ResourceManager.GetString("SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified path does not contain any applicable device INFs..
        /// </summary>
        internal static string SPAPI_E_DI_BAD_PATH {
            get {
                return ResourceManager.GetString("SPAPI_E_DI_BAD_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class installer has indicated that the default action should be performed for this installation request..
        /// </summary>
        internal static string SPAPI_E_DI_DO_DEFAULT {
            get {
                return ResourceManager.GetString("SPAPI_E_DI_DO_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class installer has denied the request to install or upgrade this device..
        /// </summary>
        internal static string SPAPI_E_DI_DONT_INSTALL {
            get {
                return ResourceManager.GetString("SPAPI_E_DI_DONT_INSTALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested device install operation is obsolete..
        /// </summary>
        internal static string SPAPI_E_DI_FUNCTION_OBSOLETE {
            get {
                return ResourceManager.GetString("SPAPI_E_DI_FUNCTION_OBSOLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation does not require any files to be copied..
        /// </summary>
        internal static string SPAPI_E_DI_NOFILECOPY {
            get {
                return ResourceManager.GetString("SPAPI_E_DI_NOFILECOPY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device&apos;s co-installer has additional work to perform after installation is complete..
        /// </summary>
        internal static string SPAPI_E_DI_POSTPROCESSING_REQUIRED {
            get {
                return ResourceManager.GetString("SPAPI_E_DI_POSTPROCESSING_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The installation of this driver is forbidden by system policy. Contact your system administrator..
        /// </summary>
        internal static string SPAPI_E_DRIVER_INSTALL_BLOCKED {
            get {
                return ResourceManager.GetString("SPAPI_E_DRIVER_INSTALL_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Driver is not intended for this platform..
        /// </summary>
        internal static string SPAPI_E_DRIVER_NONNATIVE {
            get {
                return ResourceManager.GetString("SPAPI_E_DRIVER_NONNATIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem was encountered while attempting to add the driver to the store..
        /// </summary>
        internal static string SPAPI_E_DRIVER_STORE_ADD_FAILED {
            get {
                return ResourceManager.GetString("SPAPI_E_DRIVER_STORE_ADD_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem was encountered while attempting to delete the driver from the store..
        /// </summary>
        internal static string SPAPI_E_DRIVER_STORE_DELETE_FAILED {
            get {
                return ResourceManager.GetString("SPAPI_E_DRIVER_STORE_DELETE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An existing device was found that is a duplicate of the device being manually installed..
        /// </summary>
        internal static string SPAPI_E_DUPLICATE_FOUND {
            get {
                return ResourceManager.GetString("SPAPI_E_DUPLICATE_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No installed components were detected..
        /// </summary>
        internal static string SPAPI_E_ERROR_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("SPAPI_E_ERROR_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non-empty line was encountered in the INF before the start of a section..
        /// </summary>
        internal static string SPAPI_E_EXPECTED_SECTION_NAME {
            get {
                return ResourceManager.GetString("SPAPI_E_EXPECTED_SECTION_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hash for the file is not present in the specified catalog file. The file is likely corrupt or the victim of tampering..
        /// </summary>
        internal static string SPAPI_E_FILE_HASH_NOT_IN_CATALOG {
            get {
                return ResourceManager.GetString("SPAPI_E_FILE_HASH_NOT_IN_CATALOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because the file queue is locked..
        /// </summary>
        internal static string SPAPI_E_FILEQUEUE_LOCKED {
            get {
                return ResourceManager.GetString("SPAPI_E_FILEQUEUE_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syntax of the INF is invalid..
        /// </summary>
        internal static string SPAPI_E_GENERAL_SYNTAX {
            get {
                return ResourceManager.GetString("SPAPI_E_GENERAL_SYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation not allowed in WOW64..
        /// </summary>
        internal static string SPAPI_E_IN_WOW64 {
            get {
                return ResourceManager.GetString("SPAPI_E_IN_WOW64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An INF was copied into the Windows INF directory in an improper manner..
        /// </summary>
        internal static string SPAPI_E_INCORRECTLY_COPIED_INF {
            get {
                return ResourceManager.GetString("SPAPI_E_INCORRECTLY_COPIED_INF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more devices are presently installed using the specified INF..
        /// </summary>
        internal static string SPAPI_E_INF_IN_USE_BY_DEVICES {
            get {
                return ResourceManager.GetString("SPAPI_E_INF_IN_USE_BY_DEVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The install class is not present or is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_CLASS {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class installer registry entry is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_CLASS_INSTALLER {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_CLASS_INSTALLER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device&apos;s co-installer is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_COINSTALLER {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_COINSTALLER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device instance name is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_DEVINST_NAME {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_DEVINST_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the filter drivers installed for this device is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_FILTER_DRIVER {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_FILTER_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified hardware profile does not exist..
        /// </summary>
        internal static string SPAPI_E_INVALID_HWPROFILE {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_HWPROFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A logical configuration specified in this INF is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_INF_LOGCONFIG {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_INF_LOGCONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified machine name does not conform to UNC naming conventions..
        /// </summary>
        internal static string SPAPI_E_INVALID_MACHINENAME {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_MACHINENAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property page provider registry entry is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_PROPPAGE_PROVIDER {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_PROPPAGE_PROVIDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reference string supplied for this interface device is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_REFERENCE_STRING {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_REFERENCE_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device property code is invalid..
        /// </summary>
        internal static string SPAPI_E_INVALID_REG_PROPERTY {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_REG_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy to specified target..
        /// </summary>
        internal static string SPAPI_E_INVALID_TARGET {
            get {
                return ResourceManager.GetString("SPAPI_E_INVALID_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested device registry key does not exist..
        /// </summary>
        internal static string SPAPI_E_KEY_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("SPAPI_E_KEY_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required line was not found in the INF..
        /// </summary>
        internal static string SPAPI_E_LINE_NOT_FOUND {
            get {
                return ResourceManager.GetString("SPAPI_E_LINE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The machine selected for remote communication is not available at this time..
        /// </summary>
        internal static string SPAPI_E_MACHINE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("SPAPI_E_MACHINE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The INF or the device information set or element does not have an associated install class..
        /// </summary>
        internal static string SPAPI_E_NO_ASSOCIATED_CLASS {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_ASSOCIATED_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The installation failed because a function driver was not specified for this device instance..
        /// </summary>
        internal static string SPAPI_E_NO_ASSOCIATED_SERVICE {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_ASSOCIATED_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file could not be verified because it does not have an associated catalog signed via Authenticode(tm)..
        /// </summary>
        internal static string SPAPI_E_NO_AUTHENTICODE_CATALOG {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_AUTHENTICODE_CATALOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The files affected by the installation of this file queue have not been backed up for uninstall..
        /// </summary>
        internal static string SPAPI_E_NO_BACKUP {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_BACKUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The third-party INF does not contain digital signature information..
        /// </summary>
        internal static string SPAPI_E_NO_CATALOG_FOR_OEM_INF {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_CATALOG_FOR_OEM_INF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no class driver list for the device information element..
        /// </summary>
        internal static string SPAPI_E_NO_CLASS_DRIVER_LIST {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_CLASS_DRIVER_LIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No class installer parameters have been set for the device information set or element..
        /// </summary>
        internal static string SPAPI_E_NO_CLASSINSTALL_PARAMS {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_CLASSINSTALL_PARAMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no compatible drivers for this device..
        /// </summary>
        internal static string SPAPI_E_NO_COMPAT_DRIVERS {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_COMPAT_DRIVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Plug and Play service is not available on the remote machine..
        /// </summary>
        internal static string SPAPI_E_NO_CONFIGMGR_SERVICES {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_CONFIGMGR_SERVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is presently no default device interface designated for this interface class..
        /// </summary>
        internal static string SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no icon that represents this device or device type..
        /// </summary>
        internal static string SPAPI_E_NO_DEVICE_ICON {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_DEVICE_ICON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no device information element currently selected for this device information set..
        /// </summary>
        internal static string SPAPI_E_NO_DEVICE_SELECTED {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_DEVICE_SELECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no driver selected for the device information set or element..
        /// </summary>
        internal static string SPAPI_E_NO_DRIVER_SELECTED {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_DRIVER_SELECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The INF from which a driver list is to be built does not exist..
        /// </summary>
        internal static string SPAPI_E_NO_INF {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_INF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested device interface is not present in the system..
        /// </summary>
        internal static string SPAPI_E_NO_SUCH_DEVICE_INTERFACE {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_SUCH_DEVICE_INTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device instance does not exist in the hardware tree..
        /// </summary>
        internal static string SPAPI_E_NO_SUCH_DEVINST {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_SUCH_DEVINST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This interface class does not exist in the system..
        /// </summary>
        internal static string SPAPI_E_NO_SUCH_INTERFACE_CLASS {
            get {
                return ResourceManager.GetString("SPAPI_E_NO_SUCH_INTERFACE_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver selected for this device does not support Windows..
        /// </summary>
        internal static string SPAPI_E_NON_WINDOWS_DRIVER {
            get {
                return ResourceManager.GetString("SPAPI_E_NON_WINDOWS_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver selected for this device does not support this version of Windows..
        /// </summary>
        internal static string SPAPI_E_NON_WINDOWS_NT_DRIVER {
            get {
                return ResourceManager.GetString("SPAPI_E_NON_WINDOWS_NT_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file is not an installed OEM INF..
        /// </summary>
        internal static string SPAPI_E_NOT_AN_INSTALLED_OEM_INF {
            get {
                return ResourceManager.GetString("SPAPI_E_NOT_AN_INSTALLED_OEM_INF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device cannot be disabled..
        /// </summary>
        internal static string SPAPI_E_NOT_DISABLEABLE {
            get {
                return ResourceManager.GetString("SPAPI_E_NOT_DISABLEABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file may only be validated by a catalog signed via Authenticode(tm)..
        /// </summary>
        internal static string SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE {
            get {
                return ResourceManager.GetString("SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem was encountered when accessing the Plug and Play registry database..
        /// </summary>
        internal static string SPAPI_E_PNP_REGISTRY_ERROR {
            get {
                return ResourceManager.GetString("SPAPI_E_PNP_REGISTRY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A general remote communication error occurred..
        /// </summary>
        internal static string SPAPI_E_REMOTE_COMM_FAILURE {
            get {
                return ResourceManager.GetString("SPAPI_E_REMOTE_COMM_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not supported for a remote machine..
        /// </summary>
        internal static string SPAPI_E_REMOTE_REQUEST_UNSUPPORTED {
            get {
                return ResourceManager.GetString("SPAPI_E_REMOTE_REQUEST_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Security Configuration Editor (SCE) APIs have been disabled on this Embedded product..
        /// </summary>
        internal static string SPAPI_E_SCE_DISABLED {
            get {
                return ResourceManager.GetString("SPAPI_E_SCE_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An INF section was encountered whose name exceeds the maximum section name length..
        /// </summary>
        internal static string SPAPI_E_SECTION_NAME_TOO_LONG {
            get {
                return ResourceManager.GetString("SPAPI_E_SECTION_NAME_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required section was not found in the INF..
        /// </summary>
        internal static string SPAPI_E_SECTION_NOT_FOUND {
            get {
                return ResourceManager.GetString("SPAPI_E_SECTION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation involving unsigned file copying was rolled back, so that a system restore point could be set..
        /// </summary>
        internal static string SPAPI_E_SET_SYSTEM_RESTORE_POINT {
            get {
                return ResourceManager.GetString("SPAPI_E_SET_SYSTEM_RESTORE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The software was tested for compliance with Windows Logo requirements on a different version of Windows, and may not be compatible with this version..
        /// </summary>
        internal static string SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH {
            get {
                return ResourceManager.GetString("SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown exception was encountered..
        /// </summary>
        internal static string SPAPI_E_UNKNOWN_EXCEPTION {
            get {
                return ResourceManager.GetString("SPAPI_E_UNKNOWN_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecoverable stack overflow was encountered..
        /// </summary>
        internal static string SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW {
            get {
                return ResourceManager.GetString("SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The style of the INF is different than what was requested..
        /// </summary>
        internal static string SPAPI_E_WRONG_INF_STYLE {
            get {
                return ResourceManager.GetString("SPAPI_E_WRONG_INF_STYLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified INF is the wrong type for this operation..
        /// </summary>
        internal static string SPAPI_E_WRONG_INF_TYPE {
            get {
                return ResourceManager.GetString("SPAPI_E_WRONG_INF_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An API call exited abnormally..
        /// </summary>
        internal static string STG_E_ABNORMALAPIEXIT {
            get {
                return ResourceManager.GetString("STG_E_ABNORMALAPIEXIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access Denied..
        /// </summary>
        internal static string STG_E_ACCESSDENIED {
            get {
                return ResourceManager.GetString("STG_E_ACCESSDENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OLE32.DLL has been loaded at the wrong address..
        /// </summary>
        internal static string STG_E_BADBASEADDRESS {
            get {
                return ResourceManager.GetString("STG_E_BADBASEADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t save..
        /// </summary>
        internal static string STG_E_CANTSAVE {
            get {
                return ResourceManager.GetString("STG_E_CANTSAVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Protection Error - DVD CSS Authentication failed..
        /// </summary>
        internal static string STG_E_CSS_AUTHENTICATION_FAILURE {
            get {
                return ResourceManager.GetString("STG_E_CSS_AUTHENTICATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Protection Error - DVD session key not established..
        /// </summary>
        internal static string STG_E_CSS_KEY_NOT_ESTABLISHED {
            get {
                return ResourceManager.GetString("STG_E_CSS_KEY_NOT_ESTABLISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Protection Error - The given sector does not have a valid CSS key..
        /// </summary>
        internal static string STG_E_CSS_KEY_NOT_PRESENT {
            get {
                return ResourceManager.GetString("STG_E_CSS_KEY_NOT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Protection Error - The current DVD&apos;s region does not correspond to the region setting of the drive..
        /// </summary>
        internal static string STG_E_CSS_REGION_MISMATCH {
            get {
                return ResourceManager.GetString("STG_E_CSS_REGION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Protection Error - The read failed because the sector is encrypted..
        /// </summary>
        internal static string STG_E_CSS_SCRAMBLED_SECTOR {
            get {
                return ResourceManager.GetString("STG_E_CSS_SCRAMBLED_SECTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disk is write-protected..
        /// </summary>
        internal static string STG_E_DISKISWRITEPROTECTED {
            get {
                return ResourceManager.GetString("STG_E_DISKISWRITEPROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The docfile has been corrupted..
        /// </summary>
        internal static string STG_E_DOCFILECORRUPT {
            get {
                return ResourceManager.GetString("STG_E_DOCFILECORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compound file is too large for the current implementation.
        /// </summary>
        internal static string STG_E_DOCFILETOOLARGE {
            get {
                return ResourceManager.GetString("STG_E_DOCFILETOOLARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal operation called on object with extant marshallings..
        /// </summary>
        internal static string STG_E_EXTANTMARSHALLINGS {
            get {
                return ResourceManager.GetString("STG_E_EXTANTMARSHALLINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %1 already exists..
        /// </summary>
        internal static string STG_E_FILEALREADYEXISTS {
            get {
                return ResourceManager.GetString("STG_E_FILEALREADYEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %1 could not be found..
        /// </summary>
        internal static string STG_E_FILENOTFOUND {
            get {
                return ResourceManager.GetString("STG_E_FILENOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file download was aborted abnormally. The file is incomplete..
        /// </summary>
        internal static string STG_E_INCOMPLETE {
            get {
                return ResourceManager.GetString("STG_E_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is insufficient memory available to complete operation..
        /// </summary>
        internal static string STG_E_INSUFFICIENTMEMORY {
            get {
                return ResourceManager.GetString("STG_E_INSUFFICIENTMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to use an object that is busy..
        /// </summary>
        internal static string STG_E_INUSE {
            get {
                return ResourceManager.GetString("STG_E_INUSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid flag error..
        /// </summary>
        internal static string STG_E_INVALIDFLAG {
            get {
                return ResourceManager.GetString("STG_E_INVALIDFLAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to perform requested operation..
        /// </summary>
        internal static string STG_E_INVALIDFUNCTION {
            get {
                return ResourceManager.GetString("STG_E_INVALIDFUNCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted an operation on an invalid object..
        /// </summary>
        internal static string STG_E_INVALIDHANDLE {
            get {
                return ResourceManager.GetString("STG_E_INVALIDHANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file %1 is not a valid compound file..
        /// </summary>
        internal static string STG_E_INVALIDHEADER {
            get {
                return ResourceManager.GetString("STG_E_INVALIDHEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name %1 is not valid..
        /// </summary>
        internal static string STG_E_INVALIDNAME {
            get {
                return ResourceManager.GetString("STG_E_INVALIDNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid parameter error..
        /// </summary>
        internal static string STG_E_INVALIDPARAMETER {
            get {
                return ResourceManager.GetString("STG_E_INVALIDPARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid pointer error..
        /// </summary>
        internal static string STG_E_INVALIDPOINTER {
            get {
                return ResourceManager.GetString("STG_E_INVALIDPOINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A lock violation has occurred..
        /// </summary>
        internal static string STG_E_LOCKVIOLATION {
            get {
                return ResourceManager.GetString("STG_E_LOCKVIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is insufficient disk space to complete operation..
        /// </summary>
        internal static string STG_E_MEDIUMFULL {
            get {
                return ResourceManager.GetString("STG_E_MEDIUMFULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more entries to return..
        /// </summary>
        internal static string STG_E_NOMOREFILES {
            get {
                return ResourceManager.GetString("STG_E_NOMOREFILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage has been changed since the last commit..
        /// </summary>
        internal static string STG_E_NOTCURRENT {
            get {
                return ResourceManager.GetString("STG_E_NOTCURRENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal operation called on non-file based storage..
        /// </summary>
        internal static string STG_E_NOTFILEBASEDSTORAGE {
            get {
                return ResourceManager.GetString("STG_E_NOTFILEBASEDSTORAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compound file was not created with the STGM_SIMPLE flag.
        /// </summary>
        internal static string STG_E_NOTSIMPLEFORMAT {
            get {
                return ResourceManager.GetString("STG_E_NOTSIMPLEFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compound file %1 was produced with a newer version of storage..
        /// </summary>
        internal static string STG_E_OLDDLL {
            get {
                return ResourceManager.GetString("STG_E_OLDDLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compound file %1 was produced with an incompatible version of storage..
        /// </summary>
        internal static string STG_E_OLDFORMAT {
            get {
                return ResourceManager.GetString("STG_E_OLDFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path %1 could not be found..
        /// </summary>
        internal static string STG_E_PATHNOTFOUND {
            get {
                return ResourceManager.GetString("STG_E_PATHNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal write of non-simple property to simple property set..
        /// </summary>
        internal static string STG_E_PROPSETMISMATCHED {
            get {
                return ResourceManager.GetString("STG_E_PROPSETMISMATCHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A disk error occurred during a read operation..
        /// </summary>
        internal static string STG_E_READFAULT {
            get {
                return ResourceManager.GetString("STG_E_READFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Protection Error - The drive&apos;s region setting may be permanent or the number of user resets has been exhausted..
        /// </summary>
        internal static string STG_E_RESETS_EXHAUSTED {
            get {
                return ResourceManager.GetString("STG_E_RESETS_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to use an object that has ceased to exist..
        /// </summary>
        internal static string STG_E_REVERTED {
            get {
                return ResourceManager.GetString("STG_E_REVERTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred during a seek operation..
        /// </summary>
        internal static string STG_E_SEEKERROR {
            get {
                return ResourceManager.GetString("STG_E_SEEKERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Share.exe or equivalent is required for operation..
        /// </summary>
        internal static string STG_E_SHAREREQUIRED {
            get {
                return ResourceManager.GetString("STG_E_SHAREREQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A share violation has occurred..
        /// </summary>
        internal static string STG_E_SHAREVIOLATION {
            get {
                return ResourceManager.GetString("STG_E_SHAREVIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic Copy Protection Error..
        /// </summary>
        internal static string STG_E_STATUS_COPY_PROTECTION_FAILURE {
            get {
                return ResourceManager.GetString("STG_E_STATUS_COPY_PROTECTION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file download has been terminated..
        /// </summary>
        internal static string STG_E_TERMINATED {
            get {
                return ResourceManager.GetString("STG_E_TERMINATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are insufficient resources to open another file..
        /// </summary>
        internal static string STG_E_TOOMANYOPENFILES {
            get {
                return ResourceManager.GetString("STG_E_TOOMANYOPENFILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That function is not implemented..
        /// </summary>
        internal static string STG_E_UNIMPLEMENTEDFUNCTION {
            get {
                return ResourceManager.GetString("STG_E_UNIMPLEMENTEDFUNCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred..
        /// </summary>
        internal static string STG_E_UNKNOWN {
            get {
                return ResourceManager.GetString("STG_E_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A disk error occurred during a write operation..
        /// </summary>
        internal static string STG_E_WRITEFAULT {
            get {
                return ResourceManager.GetString("STG_E_WRITEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage operation should block until more data is available..
        /// </summary>
        internal static string STG_S_BLOCK {
            get {
                return ResourceManager.GetString("STG_S_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consolidation of the storage file is inappropriate. (commit succeeded)..
        /// </summary>
        internal static string STG_S_CANNOTCONSOLIDATE {
            get {
                return ResourceManager.GetString("STG_S_CANNOTCONSOLIDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consolidation of the storage file failed. (commit succeeded)..
        /// </summary>
        internal static string STG_S_CONSOLIDATIONFAILED {
            get {
                return ResourceManager.GetString("STG_S_CONSOLIDATIONFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying file was converted to compound file format..
        /// </summary>
        internal static string STG_S_CONVERTED {
            get {
                return ResourceManager.GetString("STG_S_CONVERTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The notified event sink will not influence the storage operation..
        /// </summary>
        internal static string STG_S_MONITORING {
            get {
                return ResourceManager.GetString("STG_S_MONITORING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple opens prevent consolidated. (commit succeeded)..
        /// </summary>
        internal static string STG_S_MULTIPLEOPENS {
            get {
                return ResourceManager.GetString("STG_S_MULTIPLEOPENS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage operation should retry immediately..
        /// </summary>
        internal static string STG_S_RETRYNOW {
            get {
                return ResourceManager.GetString("STG_S_RETRYNOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more input parameters is bad..
        /// </summary>
        internal static string TBS_E_BAD_PARAMETER {
            get {
                return ResourceManager.GetString("TBS_E_BAD_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input or output buffer is too large..
        /// </summary>
        internal static string TBS_E_BUFFER_TOO_LARGE {
            get {
                return ResourceManager.GetString("TBS_E_BUFFER_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command was canceled..
        /// </summary>
        internal static string TBS_E_COMMAND_CANCELED {
            get {
                return ResourceManager.GetString("TBS_E_COMMAND_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified output buffer is too small..
        /// </summary>
        internal static string TBS_E_INSUFFICIENT_BUFFER {
            get {
                return ResourceManager.GetString("TBS_E_INSUFFICIENT_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred within the Trusted Platform Module support program..
        /// </summary>
        internal static string TBS_E_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("TBS_E_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified context handle does not refer to a valid context..
        /// </summary>
        internal static string TBS_E_INVALID_CONTEXT {
            get {
                return ResourceManager.GetString("TBS_E_INVALID_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more context parameters is invalid..
        /// </summary>
        internal static string TBS_E_INVALID_CONTEXT_PARAM {
            get {
                return ResourceManager.GetString("TBS_E_INVALID_CONTEXT_PARAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified output pointer is bad..
        /// </summary>
        internal static string TBS_E_INVALID_OUTPUT_POINTER {
            get {
                return ResourceManager.GetString("TBS_E_INVALID_OUTPUT_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while communicating with the TPM..
        /// </summary>
        internal static string TBS_E_IOERROR {
            get {
                return ResourceManager.GetString("TBS_E_IOERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The physical presence interface is not supported..
        /// </summary>
        internal static string TBS_E_PPI_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("TBS_E_PPI_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TBS service is not running and could not be started..
        /// </summary>
        internal static string TBS_E_SERVICE_NOT_RUNNING {
            get {
                return ResourceManager.GetString("TBS_E_SERVICE_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TBS service has been started but is not yet running..
        /// </summary>
        internal static string TBS_E_SERVICE_START_PENDING {
            get {
                return ResourceManager.GetString("TBS_E_SERVICE_START_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new virtual resource could not be created because there are too many open virtual resources..
        /// </summary>
        internal static string TBS_E_TOO_MANY_RESOURCES {
            get {
                return ResourceManager.GetString("TBS_E_TOO_MANY_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new context could not be created because there are too many open contexts..
        /// </summary>
        internal static string TBS_E_TOO_MANY_TBS_CONTEXTS {
            get {
                return ResourceManager.GetString("TBS_E_TOO_MANY_TBS_CONTEXTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified buffer was too small..
        /// </summary>
        internal static string TBSIMP_E_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("TBSIMP_E_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context could not be cleaned up..
        /// </summary>
        internal static string TBSIMP_E_CLEANUP_FAILED {
            get {
                return ResourceManager.GetString("TBSIMP_E_CLEANUP_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command was canceled..
        /// </summary>
        internal static string TBSIMP_E_COMMAND_CANCELED {
            get {
                return ResourceManager.GetString("TBSIMP_E_COMMAND_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM command failed..
        /// </summary>
        internal static string TBSIMP_E_COMMAND_FAILED {
            get {
                return ResourceManager.GetString("TBSIMP_E_COMMAND_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified virtual handle matches a virtual handle already in use..
        /// </summary>
        internal static string TBSIMP_E_DUPLICATE_VHANDLE {
            get {
                return ResourceManager.GetString("TBSIMP_E_DUPLICATE_VHANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No entry with the specified key was found..
        /// </summary>
        internal static string TBSIMP_E_HASH_BAD_KEY {
            get {
                return ResourceManager.GetString("TBSIMP_E_HASH_BAD_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No new entries can be added to the hash table..
        /// </summary>
        internal static string TBSIMP_E_HASH_TABLE_FULL {
            get {
                return ResourceManager.GetString("TBSIMP_E_HASH_TABLE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified context handle is invalid..
        /// </summary>
        internal static string TBSIMP_E_INVALID_CONTEXT_HANDLE {
            get {
                return ResourceManager.GetString("TBSIMP_E_INVALID_CONTEXT_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid context parameter was specified..
        /// </summary>
        internal static string TBSIMP_E_INVALID_CONTEXT_PARAM {
            get {
                return ResourceManager.GetString("TBSIMP_E_INVALID_CONTEXT_PARAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pointer to the returned handle location was NULL or invalid.
        /// </summary>
        internal static string TBSIMP_E_INVALID_OUTPUT_POINTER {
            get {
                return ResourceManager.GetString("TBSIMP_E_INVALID_OUTPUT_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more parameters is invalid.
        /// </summary>
        internal static string TBSIMP_E_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("TBSIMP_E_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource type did not match..
        /// </summary>
        internal static string TBSIMP_E_INVALID_RESOURCE {
            get {
                return ResourceManager.GetString("TBSIMP_E_INVALID_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified list is empty, or the iteration has reached the end of the list..
        /// </summary>
        internal static string TBSIMP_E_LIST_NO_MORE_ITEMS {
            get {
                return ResourceManager.GetString("TBSIMP_E_LIST_NO_MORE_ITEMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified item was not found in the list..
        /// </summary>
        internal static string TBSIMP_E_LIST_NOT_FOUND {
            get {
                return ResourceManager.GetString("TBSIMP_E_LIST_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM does not have enough space to load the requested resource..
        /// </summary>
        internal static string TBSIMP_E_NOT_ENOUGH_SPACE {
            get {
                return ResourceManager.GetString("TBSIMP_E_NOT_ENOUGH_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many TPM contexts in use..
        /// </summary>
        internal static string TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS {
            get {
                return ResourceManager.GetString("TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No resources can be unloaded..
        /// </summary>
        internal static string TBSIMP_E_NOTHING_TO_UNLOAD {
            get {
                return ResourceManager.GetString("TBSIMP_E_NOTHING_TO_UNLOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was not enough memory to fulfill the request.
        /// </summary>
        internal static string TBSIMP_E_OUT_OF_MEMORY {
            get {
                return ResourceManager.GetString("TBSIMP_E_OUT_OF_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The physical presence interface is not supported..
        /// </summary>
        internal static string TBSIMP_E_PPI_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("TBSIMP_E_PPI_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resource is no longer available..
        /// </summary>
        internal static string TBSIMP_E_RESOURCE_EXPIRED {
            get {
                return ResourceManager.GetString("TBSIMP_E_RESOURCE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC subsystem could not be initialized..
        /// </summary>
        internal static string TBSIMP_E_RPC_INIT_FAILED {
            get {
                return ResourceManager.GetString("TBSIMP_E_RPC_INIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TBS scheduler is not running..
        /// </summary>
        internal static string TBSIMP_E_SCHEDULER_NOT_RUNNING {
            get {
                return ResourceManager.GetString("TBSIMP_E_SCHEDULER_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new virtual resource could not be created because there are too many open virtual resources..
        /// </summary>
        internal static string TBSIMP_E_TOO_MANY_RESOURCES {
            get {
                return ResourceManager.GetString("TBSIMP_E_TOO_MANY_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new TBS context could not be created because there are too many open contexts..
        /// </summary>
        internal static string TBSIMP_E_TOO_MANY_TBS_CONTEXTS {
            get {
                return ResourceManager.GetString("TBSIMP_E_TOO_MANY_TBS_CONTEXTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while communicating with the TPM.
        /// </summary>
        internal static string TBSIMP_E_TPM_ERROR {
            get {
                return ResourceManager.GetString("TBSIMP_E_TPM_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TBS is not compatible with the version of TPM found on the system..
        /// </summary>
        internal static string TBSIMP_E_TPM_INCOMPATIBLE {
            get {
                return ResourceManager.GetString("TBSIMP_E_TPM_INCOMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TBS does not recognize the specified ordinal..
        /// </summary>
        internal static string TBSIMP_E_UNKNOWN_ORDINAL {
            get {
                return ResourceManager.GetString("TBSIMP_E_UNKNOWN_ORDINAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Typelib export: Type library is not registered..
        /// </summary>
        internal static string TLBX_E_LIBNOTREGISTERED {
            get {
                return ResourceManager.GetString("TLBX_E_LIBNOTREGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The NV area is locked and not writable..
        /// </summary>
        internal static string TPM_E_AREA_LOCKED {
            get {
                return ResourceManager.GetString("TPM_E_AREA_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: TPM audit construction failed and the underlying command was returning success..
        /// </summary>
        internal static string TPM_E_AUDITFAIL_SUCCESSFUL {
            get {
                return ResourceManager.GetString("TPM_E_AUDITFAIL_SUCCESSFUL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: TPM audit construction failed and the underlying command was returning a failure code also..
        /// </summary>
        internal static string TPM_E_AUDITFAIL_UNSUCCESSFUL {
            get {
                return ResourceManager.GetString("TPM_E_AUDITFAIL_UNSUCCESSFUL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: An operation completed successfully but the auditing of that operation failed..
        /// </summary>
        internal static string TPM_E_AUDITFAILURE {
            get {
                return ResourceManager.GetString("TPM_E_AUDITFAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: NV_LoadKey blob requires both owner and blob authorization..
        /// </summary>
        internal static string TPM_E_AUTH_CONFLICT {
            get {
                return ResourceManager.GetString("TPM_E_AUTH_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The authorization for the second key in a 2 key function failed authorization..
        /// </summary>
        internal static string TPM_E_AUTH2FAIL {
            get {
                return ResourceManager.GetString("TPM_E_AUTH2FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Authentication failed..
        /// </summary>
        internal static string TPM_E_AUTHFAIL {
            get {
                return ResourceManager.GetString("TPM_E_AUTHFAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The NV area attributes conflict..
        /// </summary>
        internal static string TPM_E_BAD_ATTRIBUTES {
            get {
                return ResourceManager.GetString("TPM_E_BAD_ATTRIBUTES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The counter handle is incorrect..
        /// </summary>
        internal static string TPM_E_BAD_COUNTER {
            get {
                return ResourceManager.GetString("TPM_E_BAD_COUNTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The size of the data (or blob) parameter is bad or inconsistent with the referenced key..
        /// </summary>
        internal static string TPM_E_BAD_DATASIZE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_DATASIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Delegation is not correct..
        /// </summary>
        internal static string TPM_E_BAD_DELEGATE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_DELEGATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The handle is incorrect..
        /// </summary>
        internal static string TPM_E_BAD_HANDLE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The key properties in TPM_KEY_PARMs are not supported by this TPM..
        /// </summary>
        internal static string TPM_E_BAD_KEY_PROPERTY {
            get {
                return ResourceManager.GetString("TPM_E_BAD_KEY_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The locality is incorrect for the attempted operation..
        /// </summary>
        internal static string TPM_E_BAD_LOCALITY {
            get {
                return ResourceManager.GetString("TPM_E_BAD_LOCALITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The migration properties of this key are incorrect..
        /// </summary>
        internal static string TPM_E_BAD_MIGRATION {
            get {
                return ResourceManager.GetString("TPM_E_BAD_MIGRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: A mode parameter is bad, such as capArea or subCapArea for TPM_GetCapability, phsicalPresence parameter for TPM_PhysicalPresence, or migrationType for TPM_CreateMigrationBlob..
        /// </summary>
        internal static string TPM_E_BAD_MODE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The ordinal was unknown or inconsistent..
        /// </summary>
        internal static string TPM_E_BAD_ORDINAL {
            get {
                return ResourceManager.GetString("TPM_E_BAD_ORDINAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The paramSize argument to the command has the incorrect value ..
        /// </summary>
        internal static string TPM_E_BAD_PARAM_SIZE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_PARAM_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: One or more parameter is bad..
        /// </summary>
        internal static string TPM_E_BAD_PARAMETER {
            get {
                return ResourceManager.GetString("TPM_E_BAD_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Either the physicalPresence or physicalPresenceLock bits have the wrong value..
        /// </summary>
        internal static string TPM_E_BAD_PRESENCE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_PRESENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The signature or encryption scheme for this key is incorrect or not permitted in this situation..
        /// </summary>
        internal static string TPM_E_BAD_SCHEME {
            get {
                return ResourceManager.GetString("TPM_E_BAD_SCHEME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Bad signature of CMK ticket..
        /// </summary>
        internal static string TPM_E_BAD_SIGNATURE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Make identity blob not properly typed..
        /// </summary>
        internal static string TPM_E_BAD_TYPE {
            get {
                return ResourceManager.GetString("TPM_E_BAD_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM cannot perform this version of the capability..
        /// </summary>
        internal static string TPM_E_BAD_VERSION {
            get {
                return ResourceManager.GetString("TPM_E_BAD_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The context blob is invalid..
        /// </summary>
        internal static string TPM_E_BADCONTEXT {
            get {
                return ResourceManager.GetString("TPM_E_BADCONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The index to a PCR, DIR or other register is incorrect..
        /// </summary>
        internal static string TPM_E_BADINDEX {
            get {
                return ResourceManager.GetString("TPM_E_BADINDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The tag value sent to for a command is invalid..
        /// </summary>
        internal static string TPM_E_BADTAG {
            get {
                return ResourceManager.GetString("TPM_E_BADTAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The clear disable flag is set and all clear operations now require physical access..
        /// </summary>
        internal static string TPM_E_CLEAR_DISABLED {
            get {
                return ResourceManager.GetString("TPM_E_CLEAR_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command was blocked..
        /// </summary>
        internal static string TPM_E_COMMAND_BLOCKED {
            get {
                return ResourceManager.GetString("TPM_E_COMMAND_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The gap between saved context counts is too large..
        /// </summary>
        internal static string TPM_E_CONTEXT_GAP {
            get {
                return ResourceManager.GetString("TPM_E_CONTEXT_GAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The consistency check on DAA parameter inputData0 has failed..
        /// </summary>
        internal static string TPM_E_DAA_INPUT_DATA0 {
            get {
                return ResourceManager.GetString("TPM_E_DAA_INPUT_DATA0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The consistency check on DAA parameter inputData1 has failed..
        /// </summary>
        internal static string TPM_E_DAA_INPUT_DATA1 {
            get {
                return ResourceManager.GetString("TPM_E_DAA_INPUT_DATA1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The consistency check on DAA_issuerSettings has failed..
        /// </summary>
        internal static string TPM_E_DAA_ISSUER_SETTINGS {
            get {
                return ResourceManager.GetString("TPM_E_DAA_ISSUER_SETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The issuer&apos;s validity check has detected an inconsistency..
        /// </summary>
        internal static string TPM_E_DAA_ISSUER_VALIDITY {
            get {
                return ResourceManager.GetString("TPM_E_DAA_ISSUER_VALIDITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The DAA command has no resources available to execute the command..
        /// </summary>
        internal static string TPM_E_DAA_RESOURCES {
            get {
                return ResourceManager.GetString("TPM_E_DAA_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The atomic process indicated by the submitted DAA command is not the expected process..
        /// </summary>
        internal static string TPM_E_DAA_STAGE {
            get {
                return ResourceManager.GetString("TPM_E_DAA_STAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The consistency check on DAA_tpmSpecific has failed..
        /// </summary>
        internal static string TPM_E_DAA_TPM_SETTINGS {
            get {
                return ResourceManager.GetString("TPM_E_DAA_TPM_SETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The consistency check on w has failed..
        /// </summary>
        internal static string TPM_E_DAA_WRONG_W {
            get {
                return ResourceManager.GetString("TPM_E_DAA_WRONG_W", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Activate the Trusted Platform Module (TPM)..
        /// </summary>
        internal static string TPM_E_DEACTIVATED {
            get {
                return ResourceManager.GetString("TPM_E_DEACTIVATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The decryption process did not complete..
        /// </summary>
        internal static string TPM_E_DECRYPT_ERROR {
            get {
                return ResourceManager.GetString("TPM_E_DECRYPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM is defending against dictionary attacks and is in a time-out period..
        /// </summary>
        internal static string TPM_E_DEFEND_LOCK_RUNNING {
            get {
                return ResourceManager.GetString("TPM_E_DEFEND_LOCK_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Delegation table management not enabled..
        /// </summary>
        internal static string TPM_E_DELEGATE_ADMIN {
            get {
                return ResourceManager.GetString("TPM_E_DELEGATE_ADMIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Attempt to manage a family other then the delegated family..
        /// </summary>
        internal static string TPM_E_DELEGATE_FAMILY {
            get {
                return ResourceManager.GetString("TPM_E_DELEGATE_FAMILY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The delegate administration is locked..
        /// </summary>
        internal static string TPM_E_DELEGATE_LOCK {
            get {
                return ResourceManager.GetString("TPM_E_DELEGATE_LOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Enable the Trusted Platform Module (TPM)..
        /// </summary>
        internal static string TPM_E_DISABLED {
            get {
                return ResourceManager.GetString("TPM_E_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The target command has been disabled..
        /// </summary>
        internal static string TPM_E_DISABLED_CMD {
            get {
                return ResourceManager.GetString("TPM_E_DISABLED_CMD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM is currently executing a full selftest..
        /// </summary>
        internal static string TPM_E_DOING_SELFTEST {
            get {
                return ResourceManager.GetString("TPM_E_DOING_SELFTEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM returned a duplicate handle and the command needs to be resubmitted..
        /// </summary>
        internal static string TPM_E_DUPLICATE_VHANDLE {
            get {
                return ResourceManager.GetString("TPM_E_DUPLICATE_VHANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command within the transport was blocked..
        /// </summary>
        internal static string TPM_E_EMBEDDED_COMMAND_BLOCKED {
            get {
                return ResourceManager.GetString("TPM_E_EMBEDDED_COMMAND_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command within the transport is not supported..
        /// </summary>
        internal static string TPM_E_EMBEDDED_COMMAND_UNSUPPORTED {
            get {
                return ResourceManager.GetString("TPM_E_EMBEDDED_COMMAND_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The encryption process had a problem..
        /// </summary>
        internal static string TPM_E_ENCRYPT_ERROR {
            get {
                return ResourceManager.GetString("TPM_E_ENCRYPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is an error mask to convert TPM hardware errors to win errors..
        /// </summary>
        internal static string TPM_E_ERROR_MASK {
            get {
                return ResourceManager.GetString("TPM_E_ERROR_MASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The operation failed..
        /// </summary>
        internal static string TPM_E_FAIL {
            get {
                return ResourceManager.GetString("TPM_E_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM hardware device reported a failure during its internal self test. Try restarting the computer to resolve the problem. If the problem continues, check for the latest BIOS or firmware update for your TPM hardware. Consult the computer manufacturer&apos;s documentation for instructions..
        /// </summary>
        internal static string TPM_E_FAILEDSELFTEST {
            get {
                return ResourceManager.GetString("TPM_E_FAILEDSELFTEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The family count value does not match..
        /// </summary>
        internal static string TPM_E_FAMILYCOUNT {
            get {
                return ResourceManager.GetString("TPM_E_FAMILYCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Unacceptable encryption scheme..
        /// </summary>
        internal static string TPM_E_INAPPROPRIATE_ENC {
            get {
                return ResourceManager.GetString("TPM_E_INAPPROPRIATE_ENC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Signed data cannot include additional DER information..
        /// </summary>
        internal static string TPM_E_INAPPROPRIATE_SIG {
            get {
                return ResourceManager.GetString("TPM_E_INAPPROPRIATE_SIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The ability to install an owner is disabled..
        /// </summary>
        internal static string TPM_E_INSTALL_DISABLED {
            get {
                return ResourceManager.GetString("TPM_E_INSTALL_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: An invalid handle was used..
        /// </summary>
        internal static string TPM_E_INVALID_AUTHHANDLE {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_AUTHHANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The command is attempting to use an invalid family ID..
        /// </summary>
        internal static string TPM_E_INVALID_FAMILY {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_FAMILY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified handle was not found..
        /// </summary>
        internal static string TPM_E_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The key handle cannot be interpreted..
        /// </summary>
        internal static string TPM_E_INVALID_KEYHANDLE {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_KEYHANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The usage of a key is not allowed..
        /// </summary>
        internal static string TPM_E_INVALID_KEYUSAGE {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_KEYUSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: PCR information could not be interpreted..
        /// </summary>
        internal static string TPM_E_INVALID_PCR_INFO {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_PCR_INFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The command was received in the wrong sequence relative to TPM_Init and a subsequent TPM_Startup..
        /// </summary>
        internal static string TPM_E_INVALID_POSTINIT {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_POSTINIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: When saving context identified resource type does not match actual resource..
        /// </summary>
        internal static string TPM_E_INVALID_RESOURCE {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The structure tag and version are invalid or inconsistent..
        /// </summary>
        internal static string TPM_E_INVALID_STRUCTURE {
            get {
                return ResourceManager.GetString("TPM_E_INVALID_STRUCTURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: An IO error occurred transmitting information to the TPM..
        /// </summary>
        internal static string TPM_E_IOERROR {
            get {
                return ResourceManager.GetString("TPM_E_IOERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Wrong operation to load an NV key..
        /// </summary>
        internal static string TPM_E_KEY_NOTSUPPORTED {
            get {
                return ResourceManager.GetString("TPM_E_KEY_NOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The key is under control of the TPM Owner and can only be evicted by the TPM Owner..
        /// </summary>
        internal static string TPM_E_KEY_OWNER_CONTROL {
            get {
                return ResourceManager.GetString("TPM_E_KEY_OWNER_CONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The key handle points to an invalid key..
        /// </summary>
        internal static string TPM_E_KEYNOTFOUND {
            get {
                return ResourceManager.GetString("TPM_E_KEYNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Incorrect migration authority..
        /// </summary>
        internal static string TPM_E_MA_AUTHORITY {
            get {
                return ResourceManager.GetString("TPM_E_MA_AUTHORITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Migration destination not authenticated..
        /// </summary>
        internal static string TPM_E_MA_DESTINATION {
            get {
                return ResourceManager.GetString("TPM_E_MA_DESTINATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Migration source incorrect..
        /// </summary>
        internal static string TPM_E_MA_SOURCE {
            get {
                return ResourceManager.GetString("TPM_E_MA_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Migration authority signature validation failure..
        /// </summary>
        internal static string TPM_E_MA_TICKET_SIGNATURE {
            get {
                return ResourceManager.GetString("TPM_E_MA_TICKET_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The maximum number of NV writes without an owner has been exceeded..
        /// </summary>
        internal static string TPM_E_MAXNVWRITES {
            get {
                return ResourceManager.GetString("TPM_E_MAXNVWRITES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Migration authorization failed..
        /// </summary>
        internal static string TPM_E_MIGRATEFAIL {
            get {
                return ResourceManager.GetString("TPM_E_MIGRATEFAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SelfTestFull has not been run..
        /// </summary>
        internal static string TPM_E_NEEDS_SELFTEST {
            get {
                return ResourceManager.GetString("TPM_E_NEEDS_SELFTEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM does not have an Endorsement Key (EK) installed..
        /// </summary>
        internal static string TPM_E_NO_ENDORSEMENT {
            get {
                return ResourceManager.GetString("TPM_E_NO_ENDORSEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The permission to manipulate the NV storage is not available..
        /// </summary>
        internal static string TPM_E_NO_NV_PERMISSION {
            get {
                return ResourceManager.GetString("TPM_E_NO_NV_PERMISSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM does not allow for wrapped transport sessions..
        /// </summary>
        internal static string TPM_E_NO_WRAP_TRANSPORT {
            get {
                return ResourceManager.GetString("TPM_E_NO_WRAP_TRANSPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: There is no room in the context list for additional contexts..
        /// </summary>
        internal static string TPM_E_NOCONTEXTSPACE {
            get {
                return ResourceManager.GetString("TPM_E_NOCONTEXTSPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: No operator AuthData value is set..
        /// </summary>
        internal static string TPM_E_NOOPERATOR {
            get {
                return ResourceManager.GetString("TPM_E_NOOPERATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: No room to load key..
        /// </summary>
        internal static string TPM_E_NOSPACE {
            get {
                return ResourceManager.GetString("TPM_E_NOSPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: There is no Storage Root Key (SRK) set..
        /// </summary>
        internal static string TPM_E_NOSRK {
            get {
                return ResourceManager.GetString("TPM_E_NOSRK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The write is not a complete write of the area..
        /// </summary>
        internal static string TPM_E_NOT_FULLWRITE {
            get {
                return ResourceManager.GetString("TPM_E_NOT_FULLWRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM is attempting to execute a command only available when in FIPS mode..
        /// </summary>
        internal static string TPM_E_NOTFIPS {
            get {
                return ResourceManager.GetString("TPM_E_NOTFIPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Attempt to reset a PCR register that requires locality and locality modifier not part of command transport..
        /// </summary>
        internal static string TPM_E_NOTLOCAL {
            get {
                return ResourceManager.GetString("TPM_E_NOTLOCAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Attempt to reset a PCR register that does not have the resettable attribute..
        /// </summary>
        internal static string TPM_E_NOTRESETABLE {
            get {
                return ResourceManager.GetString("TPM_E_NOTRESETABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: An encrypted blob is invalid or was not created by this TPM..
        /// </summary>
        internal static string TPM_E_NOTSEALED_BLOB {
            get {
                return ResourceManager.GetString("TPM_E_NOTSEALED_BLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Attempt to context save a owner evict controlled key..
        /// </summary>
        internal static string TPM_E_OWNER_CONTROL {
            get {
                return ResourceManager.GetString("TPM_E_OWNER_CONTROL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The Trusted Platform Module (TPM) already has an owner..
        /// </summary>
        internal static string TPM_E_OWNER_SET {
            get {
                return ResourceManager.GetString("TPM_E_OWNER_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: There is no protection on the write to the NV area..
        /// </summary>
        internal static string TPM_E_PER_NOWRITE {
            get {
                return ResourceManager.GetString("TPM_E_PER_NOWRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Attempt to revoke the EK and the EK is not revocable..
        /// </summary>
        internal static string TPM_E_PERMANENTEK {
            get {
                return ResourceManager.GetString("TPM_E_PERMANENTEK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A general error was detected when attempting to acquire the BIOS&apos;s response to a Physical Presence command..
        /// </summary>
        internal static string TPM_E_PPI_ACPI_FAILURE {
            get {
                return ResourceManager.GetString("TPM_E_PPI_ACPI_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BIOS failure prevented the successful execution of the requested TPM operation (e.g. invalid TPM operation request, BIOS communication error with the TPM)..
        /// </summary>
        internal static string TPM_E_PPI_BIOS_FAILURE {
            get {
                return ResourceManager.GetString("TPM_E_PPI_BIOS_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BIOS does not support the physical presence interface..
        /// </summary>
        internal static string TPM_E_PPI_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("TPM_E_PPI_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user failed to confirm the TPM operation request..
        /// </summary>
        internal static string TPM_E_PPI_USER_ABORT {
            get {
                return ResourceManager.GetString("TPM_E_PPI_USER_ABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The NV area is read only and can&apos;t be written to..
        /// </summary>
        internal static string TPM_E_READ_ONLY {
            get {
                return ResourceManager.GetString("TPM_E_READ_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The operation requires a signed command..
        /// </summary>
        internal static string TPM_E_REQUIRES_SIGN {
            get {
                return ResourceManager.GetString("TPM_E_REQUIRES_SIGN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The resource pointed to by context is not loaded..
        /// </summary>
        internal static string TPM_E_RESOURCEMISSING {
            get {
                return ResourceManager.GetString("TPM_E_RESOURCEMISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM has insufficient internal resources to perform the requested action..
        /// </summary>
        internal static string TPM_E_RESOURCES {
            get {
                return ResourceManager.GetString("TPM_E_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM is too busy to respond to the command immediately, but the command could be resubmitted at a later time..
        /// </summary>
        internal static string TPM_E_RETRY {
            get {
                return ResourceManager.GetString("TPM_E_RETRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The calculation is unable to proceed because the existing SHA-1 thread has already encountered an error..
        /// </summary>
        internal static string TPM_E_SHA_ERROR {
            get {
                return ResourceManager.GetString("TPM_E_SHA_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: There is no existing SHA-1 thread..
        /// </summary>
        internal static string TPM_E_SHA_THREAD {
            get {
                return ResourceManager.GetString("TPM_E_SHA_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: A random string was too short..
        /// </summary>
        internal static string TPM_E_SHORTRANDOM {
            get {
                return ResourceManager.GetString("TPM_E_SHORTRANDOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The TPM does not have the space to perform the operation..
        /// </summary>
        internal static string TPM_E_SIZE {
            get {
                return ResourceManager.GetString("TPM_E_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: Too many contexts held by the TPM..
        /// </summary>
        internal static string TPM_E_TOOMANYCONTEXTS {
            get {
                return ResourceManager.GetString("TPM_E_TOOMANYCONTEXTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: There was a command executed outside of an exclusive transport session..
        /// </summary>
        internal static string TPM_E_TRANSPORT_NOTEXCLUSIVE {
            get {
                return ResourceManager.GetString("TPM_E_TRANSPORT_NOTEXCLUSIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The NV area has already been written to..
        /// </summary>
        internal static string TPM_E_WRITE_LOCKED {
            get {
                return ResourceManager.GetString("TPM_E_WRITE_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The submitted entity type is not allowed..
        /// </summary>
        internal static string TPM_E_WRONG_ENTITYTYPE {
            get {
                return ResourceManager.GetString("TPM_E_WRONG_ENTITYTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPM 1.2: The named PCR value does not match the current PCR value..
        /// </summary>
        internal static string TPM_E_WRONGPCRVAL {
            get {
                return ResourceManager.GetString("TPM_E_WRONGPCRVAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller does not have the appropriate rights to perform the requested operation..
        /// </summary>
        internal static string TPMAPI_E_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("TPMAPI_E_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified authorization information was invalid..
        /// </summary>
        internal static string TPMAPI_E_AUTHORIZATION_FAILED {
            get {
                return ResourceManager.GetString("TPMAPI_E_AUTHORIZATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified buffer was too small..
        /// </summary>
        internal static string TPMAPI_E_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("TPMAPI_E_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption operation failed..
        /// </summary>
        internal static string TPMAPI_E_ENCRYPTION_FAILED {
            get {
                return ResourceManager.GetString("TPMAPI_E_ENCRYPTION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error was detected..
        /// </summary>
        internal static string TPMAPI_E_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("TPMAPI_E_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified context handle was not valid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_CONTEXT_HANDLE {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_CONTEXT_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the specified context parameters was not valid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_CONTEXT_PARAMS {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_CONTEXT_PARAMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data given does not appear to be a valid delegate blob..
        /// </summary>
        internal static string TPMAPI_E_INVALID_DELEGATE_BLOB {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_DELEGATE_BLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encoding in the blob was not recognized..
        /// </summary>
        internal static string TPMAPI_E_INVALID_ENCODING {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_ENCODING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data given does not appear to be a valid key blob.
        /// </summary>
        internal static string TPMAPI_E_INVALID_KEY_BLOB {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_KEY_BLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key parameters structure was not valid.
        /// </summary>
        internal static string TPMAPI_E_INVALID_KEY_PARAMS {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_KEY_PARAMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key size is not valid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_KEY_SIZE {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_KEY_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested supplied data does not appear to be a valid migration authorization blob..
        /// </summary>
        internal static string TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more output parameters was NULL or invalid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_OUTPUT_POINTER {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_OUTPUT_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of the owner auth data was invalid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_OWNER_AUTH {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_OWNER_AUTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more input parameters is invalid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified PCR data was invalid..
        /// </summary>
        internal static string TPMAPI_E_INVALID_PCR_DATA {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_PCR_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified PCR index was invalid.
        /// </summary>
        internal static string TPMAPI_E_INVALID_PCR_INDEX {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_PCR_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command buffer is not in the correct state..
        /// </summary>
        internal static string TPMAPI_E_INVALID_STATE {
            get {
                return ResourceManager.GetString("TPMAPI_E_INVALID_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message was too large for the encoding scheme..
        /// </summary>
        internal static string TPMAPI_E_MESSAGE_TOO_LARGE {
            get {
                return ResourceManager.GetString("TPMAPI_E_MESSAGE_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command buffer does not contain enough data to satisfy the request..
        /// </summary>
        internal static string TPMAPI_E_NOT_ENOUGH_DATA {
            get {
                return ResourceManager.GetString("TPMAPI_E_NOT_ENOUGH_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory was available to satisfy the request..
        /// </summary>
        internal static string TPMAPI_E_OUT_OF_MEMORY {
            get {
                return ResourceManager.GetString("TPMAPI_E_OUT_OF_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while communicating with the TBS..
        /// </summary>
        internal static string TPMAPI_E_TBS_COMMUNICATION_ERROR {
            get {
                return ResourceManager.GetString("TPMAPI_E_TBS_COMMUNICATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command buffer cannot contain any more data..
        /// </summary>
        internal static string TPMAPI_E_TOO_MUCH_DATA {
            get {
                return ResourceManager.GetString("TPMAPI_E_TOO_MUCH_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM returned an unexpected result..
        /// </summary>
        internal static string TPMAPI_E_TPM_COMMAND_ERROR {
            get {
                return ResourceManager.GetString("TPMAPI_E_TPM_COMMAND_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested object was not found..
        /// </summary>
        internal static string TRK_E_NOT_FOUND {
            get {
                return ResourceManager.GetString("TRK_E_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server received a CREATE_VOLUME subrequest of a SYNC_VOLUMES request, but the ServerVolumeTable size limit for the RequestMachine has already been reached..
        /// </summary>
        internal static string TRK_E_VOLUME_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("TRK_E_VOLUME_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server received a {MOVE_NOTIFICATION} request, but the {FileTable} size limit has already been reached..
        /// </summary>
        internal static string TRK_S_NOTIFICATION_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("TRK_S_NOTIFICATION_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {VolumeSequenceNumber} of a {MOVE_NOTIFICATION} request is incorrect..
        /// </summary>
        internal static string TRK_S_OUT_OF_SYNC {
            get {
                return ResourceManager.GetString("TRK_S_OUT_OF_SYNC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is busy, and the client should retry the request at a later time..
        /// </summary>
        internal static string TRK_SERVER_TOO_BUSY {
            get {
                return ResourceManager.GetString("TRK_SERVER_TOO_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {VolumeID} in a request was not found in the server&apos;s {ServerVolumeTable}..
        /// </summary>
        internal static string TRK_VOLUME_NOT_FOUND {
            get {
                return ResourceManager.GetString("TRK_VOLUME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A notification was sent to the {LnkSvrMessage} method, but the {RequestMachine} for the request was not the {VolumeOwner} for a {VolumeID} in the request..
        /// </summary>
        internal static string TRK_VOLUME_NOT_OWNED {
            get {
                return ResourceManager.GetString("TRK_VOLUME_NOT_OWNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The trust verification action specified is not supported by the specified trust provider..
        /// </summary>
        internal static string TRUST_E_ACTION_UNKNOWN {
            get {
                return ResourceManager.GetString("TRUST_E_ACTION_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The digital signature of the object did not verify..
        /// </summary>
        internal static string TRUST_E_BAD_DIGEST {
            get {
                return ResourceManager.GetString("TRUST_E_BAD_DIGEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate&apos;s basic constraint extension has not been observed..
        /// </summary>
        internal static string TRUST_E_BASIC_CONSTRAINTS {
            get {
                return ResourceManager.GetString("TRUST_E_BASIC_CONSTRAINTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signature of the certificate cannot be verified..
        /// </summary>
        internal static string TRUST_E_CERT_SIGNATURE {
            get {
                return ResourceManager.GetString("TRUST_E_CERT_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the counter signatures was invalid..
        /// </summary>
        internal static string TRUST_E_COUNTER_SIGNER {
            get {
                return ResourceManager.GetString("TRUST_E_COUNTER_SIGNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate was explicitly marked as untrusted by the user..
        /// </summary>
        internal static string TRUST_E_EXPLICIT_DISTRUST {
            get {
                return ResourceManager.GetString("TRUST_E_EXPLICIT_DISTRUST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic trust failure..
        /// </summary>
        internal static string TRUST_E_FAIL {
            get {
                return ResourceManager.GetString("TRUST_E_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate does not meet or contain the Authenticode(tm) financial extensions..
        /// </summary>
        internal static string TRUST_E_FINANCIAL_CRITERIA {
            get {
                return ResourceManager.GetString("TRUST_E_FINANCIAL_CRITERIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate for the signer of the message is invalid or not found..
        /// </summary>
        internal static string TRUST_E_NO_SIGNER_CERT {
            get {
                return ResourceManager.GetString("TRUST_E_NO_SIGNER_CERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No signature was present in the subject..
        /// </summary>
        internal static string TRUST_E_NOSIGNATURE {
            get {
                return ResourceManager.GetString("TRUST_E_NOSIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown trust provider..
        /// </summary>
        internal static string TRUST_E_PROVIDER_UNKNOWN {
            get {
                return ResourceManager.GetString("TRUST_E_PROVIDER_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The form specified for the subject is not one supported or known by the specified trust provider..
        /// </summary>
        internal static string TRUST_E_SUBJECT_FORM_UNKNOWN {
            get {
                return ResourceManager.GetString("TRUST_E_SUBJECT_FORM_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subject is not trusted for the specified action..
        /// </summary>
        internal static string TRUST_E_SUBJECT_NOT_TRUSTED {
            get {
                return ResourceManager.GetString("TRUST_E_SUBJECT_NOT_TRUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A system-level error occurred while verifying trust..
        /// </summary>
        internal static string TRUST_E_SYSTEM_ERROR {
            get {
                return ResourceManager.GetString("TRUST_E_SYSTEM_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timestamp signature and/or certificate could not be verified or is malformed..
        /// </summary>
        internal static string TRUST_E_TIME_STAMP {
            get {
                return ResourceManager.GetString("TRUST_E_TIME_STAMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous name..
        /// </summary>
        internal static string TYPE_E_AMBIGUOUSNAME {
            get {
                return ResourceManager.GetString("TYPE_E_AMBIGUOUSNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong module kind for the operation..
        /// </summary>
        internal static string TYPE_E_BADMODULEKIND {
            get {
                return ResourceManager.GetString("TYPE_E_BADMODULEKIND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer too small..
        /// </summary>
        internal static string TYPE_E_BUFFERTOOSMALL {
            get {
                return ResourceManager.GetString("TYPE_E_BUFFERTOOSMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating unique tmp file..
        /// </summary>
        internal static string TYPE_E_CANTCREATETMPFILE {
            get {
                return ResourceManager.GetString("TYPE_E_CANTCREATETMPFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error loading type library/DLL..
        /// </summary>
        internal static string TYPE_E_CANTLOADLIBRARY {
            get {
                return ResourceManager.GetString("TYPE_E_CANTLOADLIBRARY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Circular dependency between types/modules..
        /// </summary>
        internal static string TYPE_E_CIRCULARTYPE {
            get {
                return ResourceManager.GetString("TYPE_E_CIRCULARTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function not defined in specified DLL..
        /// </summary>
        internal static string TYPE_E_DLLFUNCTIONNOTFOUND {
            get {
                return ResourceManager.GetString("TYPE_E_DLLFUNCTIONNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate ID in inheritance hierarchy..
        /// </summary>
        internal static string TYPE_E_DUPLICATEID {
            get {
                return ResourceManager.GetString("TYPE_E_DUPLICATEID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element not found..
        /// </summary>
        internal static string TYPE_E_ELEMENTNOTFOUND {
            get {
                return ResourceManager.GetString("TYPE_E_ELEMENTNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field name not defined in the record..
        /// </summary>
        internal static string TYPE_E_FIELDNOTFOUND {
            get {
                return ResourceManager.GetString("TYPE_E_FIELDNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent property functions..
        /// </summary>
        internal static string TYPE_E_INCONSISTENTPROPFUNCS {
            get {
                return ResourceManager.GetString("TYPE_E_INCONSISTENTPROPFUNCS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect inheritance depth in standard OLE hmember..
        /// </summary>
        internal static string TYPE_E_INVALIDID {
            get {
                return ResourceManager.GetString("TYPE_E_INVALIDID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid forward reference, or reference to uncompiled type..
        /// </summary>
        internal static string TYPE_E_INVALIDSTATE {
            get {
                return ResourceManager.GetString("TYPE_E_INVALIDSTATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Old format or invalid type library..
        /// </summary>
        internal static string TYPE_E_INVDATAREAD {
            get {
                return ResourceManager.GetString("TYPE_E_INVDATAREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I/O Error..
        /// </summary>
        internal static string TYPE_E_IOERROR {
            get {
                return ResourceManager.GetString("TYPE_E_IOERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library not registered..
        /// </summary>
        internal static string TYPE_E_LIBNOTREGISTERED {
            get {
                return ResourceManager.GetString("TYPE_E_LIBNOTREGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name already exists in the library..
        /// </summary>
        internal static string TYPE_E_NAMECONFLICT {
            get {
                return ResourceManager.GetString("TYPE_E_NAMECONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid number of arguments..
        /// </summary>
        internal static string TYPE_E_OUTOFBOUNDS {
            get {
                return ResourceManager.GetString("TYPE_E_OUTOFBOUNDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Qualified name disallowed..
        /// </summary>
        internal static string TYPE_E_QUALIFIEDNAMEDISALLOWED {
            get {
                return ResourceManager.GetString("TYPE_E_QUALIFIEDNAMEDISALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error accessing the OLE registry..
        /// </summary>
        internal static string TYPE_E_REGISTRYACCESS {
            get {
                return ResourceManager.GetString("TYPE_E_REGISTRYACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Size may not exceed 64K..
        /// </summary>
        internal static string TYPE_E_SIZETOOBIG {
            get {
                return ResourceManager.GetString("TYPE_E_SIZETOOBIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type mismatch..
        /// </summary>
        internal static string TYPE_E_TYPEMISMATCH {
            get {
                return ResourceManager.GetString("TYPE_E_TYPEMISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bound to unknown type..
        /// </summary>
        internal static string TYPE_E_UNDEFINEDTYPE {
            get {
                return ResourceManager.GetString("TYPE_E_UNDEFINEDTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown LCID..
        /// </summary>
        internal static string TYPE_E_UNKNOWNLCID {
            get {
                return ResourceManager.GetString("TYPE_E_UNKNOWNLCID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Old format or invalid type library..
        /// </summary>
        internal static string TYPE_E_UNSUPFORMAT {
            get {
                return ResourceManager.GetString("TYPE_E_UNSUPFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type mismatch..
        /// </summary>
        internal static string TYPE_E_WRONGTYPEKIND {
            get {
                return ResourceManager.GetString("TYPE_E_WRONGTYPEKIND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Argument not optional..
        /// </summary>
        internal static string VB6_ARGUMENT_NOT_OPTIONAL {
            get {
                return ResourceManager.GetString("VB6_ARGUMENT_NOT_OPTIONAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Could not access system registry..
        /// </summary>
        internal static string VB6_COULD_NOT_ACCESS_SYSTEM_REGISTRY {
            get {
                return ResourceManager.GetString("VB6_COULD_NOT_ACCESS_SYSTEM_REGISTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Error loading from file..
        /// </summary>
        internal static string VB6_ERROR_LOADING_FROM_FILE {
            get {
                return ResourceManager.GetString("VB6_ERROR_LOADING_FROM_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Error saving to file..
        /// </summary>
        internal static string VB6_ERROR_SAVING_TO_FILE {
            get {
                return ResourceManager.GetString("VB6_ERROR_SAVING_TO_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Input past end of file..
        /// </summary>
        internal static string VB6_INPUT_PAST_END_OF_FILE {
            get {
                return ResourceManager.GetString("VB6_INPUT_PAST_END_OF_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Method or data member not found..
        /// </summary>
        internal static string VB6_METHOD_OR_DATA_MEMBER_NOT_FOUND {
            get {
                return ResourceManager.GetString("VB6_METHOD_OR_DATA_MEMBER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Object doesn&apos;t support this action..
        /// </summary>
        internal static string VB6_OBJECT_DOESNT_SUPPORT_THIS_ACTION {
            get {
                return ResourceManager.GetString("VB6_OBJECT_DOESNT_SUPPORT_THIS_ACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Object doesn&apos;t support this property or method..
        /// </summary>
        internal static string VB6_OBJECT_DOESNT_SUPPORT_THIS_PROPERTY_OR_METHOD {
            get {
                return ResourceManager.GetString("VB6_OBJECT_DOESNT_SUPPORT_THIS_PROPERTY_OR_METHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Out of memory..
        /// </summary>
        internal static string VB6_OUT_OF_MEMORY {
            get {
                return ResourceManager.GetString("VB6_OUT_OF_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Permission to use object denied..
        /// </summary>
        internal static string VB6_PERMISSION_TO_USE_OBJECT_DENIED {
            get {
                return ResourceManager.GetString("VB6_PERMISSION_TO_USE_OBJECT_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Subscript out of range..
        /// </summary>
        internal static string VB6_SUBSCRIPT_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("VB6_SUBSCRIPT_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Object or class does not support the set of events..
        /// </summary>
        internal static string VB6_THIS_COMPONENT_DOESNT_SUPPORT_THE_SET_OF_EVENTS {
            get {
                return ResourceManager.GetString("VB6_THIS_COMPONENT_DOESNT_SUPPORT_THE_SET_OF_EVENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Variable uses an automation type not supported..
        /// </summary>
        internal static string VB6_VARIABLE_USES_A_TYPE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("VB6_VARIABLE_USES_A_TYPE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VB6: Wrong number of arguments or invalid property assignment..
        /// </summary>
        internal static string VB6_WRONG_NUMBER_OF_ARGUMENTS {
            get {
                return ResourceManager.GetString("VB6_WRONG_NUMBER_OF_ARGUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method has circular method type parameter constraints..
        /// </summary>
        internal static string VER_E_CIRCULAR_MVAR_CONSTRAINTS {
            get {
                return ResourceManager.GetString("VER_E_CIRCULAR_MVAR_CONSTRAINTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method parent has circular class type parameter constraints..
        /// </summary>
        internal static string VER_E_CIRCULAR_VAR_CONSTRAINTS {
            get {
                return ResourceManager.GetString("VER_E_CIRCULAR_VAR_CONSTRAINTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [field sig].
        /// </summary>
        internal static string VER_E_FIELD_SIG {
            get {
                return ResourceManager.GetString("VER_E_FIELD_SIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error drawing view.
        /// </summary>
        internal static string VIEW_E_DRAW {
            get {
                return ResourceManager.GetString("VIEW_E_DRAW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View is already frozen.
        /// </summary>
        internal static string VIEW_S_ALREADY_FROZEN {
            get {
                return ResourceManager.GetString("VIEW_S_ALREADY_FROZEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blob offset if invalid..
        /// </summary>
        internal static string VLDTR_E_BLOB_INVALID {
            get {
                return ResourceManager.GetString("VLDTR_E_BLOB_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field or method is PInvoke but is not marked Static..
        /// </summary>
        internal static string VLDTR_E_FMD_PINVOKENOTSTATIC {
            get {
                return ResourceManager.GetString("VLDTR_E_FMD_PINVOKENOTSTATIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GenericParam is a method type parameter and must be non-variant..
        /// </summary>
        internal static string VLDTR_E_GP_ILLEGAL_VARIANT_MVAR {
            get {
                return ResourceManager.GetString("VLDTR_E_GP_ILLEGAL_VARIANT_MVAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GUID offset is invalid..
        /// </summary>
        internal static string VLDTR_E_GUID_INVALID {
            get {
                return ResourceManager.GetString("VLDTR_E_GUID_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method signature has invalid calling convention..
        /// </summary>
        internal static string VLDTR_E_MD_BADCALLINGCONV {
            get {
                return ResourceManager.GetString("VLDTR_E_MD_BADCALLINGCONV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method signature is missing the argument count..
        /// </summary>
        internal static string VLDTR_E_MD_NOARGCNT {
            get {
                return ResourceManager.GetString("VLDTR_E_MD_NOARGCNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is not marked static but is not HASTHIS or EXPLICITTHIS..
        /// </summary>
        internal static string VLDTR_E_MD_NOTTHISNOTSTATIC {
            get {
                return ResourceManager.GetString("VLDTR_E_MD_NOTTHISNOTSTATIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is marked static but has HASTHIS/EXPLICITTHIS set on the calling convention..
        /// </summary>
        internal static string VLDTR_E_MD_THISSTATIC {
            get {
                return ResourceManager.GetString("VLDTR_E_MD_THISSTATIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemberRef has invalid calling convention..
        /// </summary>
        internal static string VLDTR_E_MR_BADCALLINGCONV {
            get {
                return ResourceManager.GetString("VLDTR_E_MR_BADCALLINGCONV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rid is out of range..
        /// </summary>
        internal static string VLDTR_E_RID_OUTOFRANGE {
            get {
                return ResourceManager.GetString("VLDTR_E_RID_OUTOFRANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature has bad element type..
        /// </summary>
        internal static string VLDTR_E_SIG_BADELTYPE {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_BADELTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal &apos;void&apos; in signature..
        /// </summary>
        internal static string VLDTR_E_SIG_BADVOID {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_BADVOID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field of ByRef type..
        /// </summary>
        internal static string VLDTR_E_SIG_BYREFINFIELD {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_BYREFINFIELD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature missing argument..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSARG {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSARG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature missing element type..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSELTYPE {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSELTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature is missing function pointer..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSFPTR {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSFPTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature has function pointer missing argument count..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSFPTRARGCNT {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSFPTRARGCNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature is missing a lower bound..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSLBND {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSLBND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature is missing count of lower bounds..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSNLBND {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSNLBND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature is missing count of sized dimensions..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSNSIZE {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSNSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature is missing rank specification..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSRANK {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSRANK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature is missing size of dimension..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSSIZE {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature missing token..
        /// </summary>
        internal static string VLDTR_E_SIG_MISSTKN {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MISSTKN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple E_T_SENTINELs..
        /// </summary>
        internal static string VLDTR_E_SIG_MULTSENTINELS {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_MULTSENTINELS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to E_T_SENTINEL in MethodDef signature..
        /// </summary>
        internal static string VLDTR_E_SIG_SENTINMETHODDEF {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_SENTINMETHODDEF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to E_T_SENTINEL &lt;=&gt; VARARG..
        /// </summary>
        internal static string VLDTR_E_SIG_SENTMUSTVARARG {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_SENTMUSTVARARG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature has bad token..
        /// </summary>
        internal static string VLDTR_E_SIG_TKNBAD {
            get {
                return ResourceManager.GetString("VLDTR_E_SIG_TKNBAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature specified is zero-sized..
        /// </summary>
        internal static string VLDTR_E_SIGNULL {
            get {
                return ResourceManager.GetString("VLDTR_E_SIGNULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String offset is invalid..
        /// </summary>
        internal static string VLDTR_E_STRING_INVALID {
            get {
                return ResourceManager.GetString("VLDTR_E_STRING_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TypeDef not nested has encloser..
        /// </summary>
        internal static string VLDTR_E_TD_ENCLNOTNESTED {
            get {
                return ResourceManager.GetString("VLDTR_E_TD_ENCLNOTNESTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction has already been aborted..
        /// </summary>
        internal static string XACT_E_ABORTED {
            get {
                return ResourceManager.GetString("XACT_E_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local transaction has aborted..
        /// </summary>
        internal static string XACT_E_ABORTING {
            get {
                return ResourceManager.GetString("XACT_E_ABORTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is already in progress for the transaction..
        /// </summary>
        internal static string XACT_E_ALREADYINPROGRESS {
            get {
                return ResourceManager.GetString("XACT_E_ALREADYINPROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another single phase resource manager has already been enlisted in this transaction..
        /// </summary>
        internal static string XACT_E_ALREADYOTHERSINGLEPHASE {
            get {
                return ResourceManager.GetString("XACT_E_ALREADYOTHERSINGLEPHASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A retaining commit or abort is not supported.
        /// </summary>
        internal static string XACT_E_CANTRETAIN {
            get {
                return ResourceManager.GetString("XACT_E_CANTRETAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XACT_E_CLERKEXISTS.
        /// </summary>
        internal static string XACT_E_CLERKEXISTS {
            get {
                return ResourceManager.GetString("XACT_E_CLERKEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XACT_E_CLERKNOTFOUND.
        /// </summary>
        internal static string XACT_E_CLERKNOTFOUND {
            get {
                return ResourceManager.GetString("XACT_E_CLERKNOTFOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction failed to commit for an unknown reason. The transaction was aborted..
        /// </summary>
        internal static string XACT_E_COMMITFAILED {
            get {
                return ResourceManager.GetString("XACT_E_COMMITFAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call commit on this transaction object because the calling application did not initiate the transaction..
        /// </summary>
        internal static string XACT_E_COMMITPREVENTED {
            get {
                return ResourceManager.GetString("XACT_E_COMMITPREVENTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A request to establish a connection with the transaction manager was denied..
        /// </summary>
        internal static string XACT_E_CONNECTION_DENIED {
            get {
                return ResourceManager.GetString("XACT_E_CONNECTION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection with the transaction manager was lost..
        /// </summary>
        internal static string XACT_E_CONNECTION_DOWN {
            get {
                return ResourceManager.GetString("XACT_E_CONNECTION_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to connect to the specified transaction coordinator was denied..
        /// </summary>
        internal static string XACT_E_CONNECTION_REQUEST_DENIED {
            get {
                return ResourceManager.GetString("XACT_E_CONNECTION_REQUEST_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Transaction Manager on the destination machine is not available..
        /// </summary>
        internal static string XACT_E_DEST_TMNOTAVAILABLE {
            get {
                return ResourceManager.GetString("XACT_E_DEST_TMNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A resource manager with the same identifier is already registered with the specified transaction coordinator..
        /// </summary>
        internal static string XACT_E_DUPLICATE_GUID {
            get {
                return ResourceManager.GetString("XACT_E_DUPLICATE_GUID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified Logical Unit of Work already exists..
        /// </summary>
        internal static string XACT_E_DUPLICATE_LU {
            get {
                return ResourceManager.GetString("XACT_E_DUPLICATE_LU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction with the given identifier already exists..
        /// </summary>
        internal static string XACT_E_DUPLICATE_TRANSID {
            get {
                return ResourceManager.GetString("XACT_E_DUPLICATE_TRANSID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of committing, the resource heuristically aborted..
        /// </summary>
        internal static string XACT_E_HEURISTICABORT {
            get {
                return ResourceManager.GetString("XACT_E_HEURISTICABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of aborting, the resource heuristically committed..
        /// </summary>
        internal static string XACT_E_HEURISTICCOMMIT {
            get {
                return ResourceManager.GetString("XACT_E_HEURISTICCOMMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the states of the resource were committed while others were aborted, likely because of heuristic decisions..
        /// </summary>
        internal static string XACT_E_HEURISTICDAMAGE {
            get {
                return ResourceManager.GetString("XACT_E_HEURISTICDAMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the states of the resource may have been committed while others may have been aborted, likely because of heuristic decisions..
        /// </summary>
        internal static string XACT_E_HEURISTICDANGER {
            get {
                return ResourceManager.GetString("XACT_E_HEURISTICDANGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction status is in doubt. A communication failure occurred, or a transaction manager or resource manager has failed.
        /// </summary>
        internal static string XACT_E_INDOUBT {
            get {
                return ResourceManager.GetString("XACT_E_INDOUBT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction cookie is invalid..
        /// </summary>
        internal static string XACT_E_INVALIDCOOKIE {
            get {
                return ResourceManager.GetString("XACT_E_INVALIDCOOKIE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XACT_E_INVALIDLSN.
        /// </summary>
        internal static string XACT_E_INVALIDLSN {
            get {
                return ResourceManager.GetString("XACT_E_INVALIDLSN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested isolation level is not valid or supported..
        /// </summary>
        internal static string XACT_E_ISOLATIONLEVEL {
            get {
                return ResourceManager.GetString("XACT_E_ISOLATIONLEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Transaction Manager returned a log full error..
        /// </summary>
        internal static string XACT_E_LOGFULL {
            get {
                return ResourceManager.GetString("XACT_E_LOGFULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource is in use..
        /// </summary>
        internal static string XACT_E_LU_BUSY {
            get {
                return ResourceManager.GetString("XACT_E_LU_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote session was lost..
        /// </summary>
        internal static string XACT_E_LU_DOWN {
            get {
                return ResourceManager.GetString("XACT_E_LU_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LU Recovery process is down..
        /// </summary>
        internal static string XACT_E_LU_NO_RECOVERY_PROCESS {
            get {
                return ResourceManager.GetString("XACT_E_LU_NO_RECOVERY_PROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subordinate creation failed. The specified Logical Unit of Work was not connected..
        /// </summary>
        internal static string XACT_E_LU_NOT_CONNECTED {
            get {
                return ResourceManager.GetString("XACT_E_LU_NOT_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Logical Unit of Work specified cannot be found..
        /// </summary>
        internal static string XACT_E_LU_NOT_FOUND {
            get {
                return ResourceManager.GetString("XACT_E_LU_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource is currently recovering..
        /// </summary>
        internal static string XACT_E_LU_RECOVERING {
            get {
                return ResourceManager.GetString("XACT_E_LU_RECOVERING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a mismatch in driving recovery..
        /// </summary>
        internal static string XACT_E_LU_RECOVERY_MISMATCH {
            get {
                return ResourceManager.GetString("XACT_E_LU_RECOVERY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction manager has disabled its support for remote/network transactions..
        /// </summary>
        internal static string XACT_E_NETWORK_TX_DISABLED {
            get {
                return ResourceManager.GetString("XACT_E_NETWORK_TX_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction manager doesn&apos;t support an asynchronous operation for this method..
        /// </summary>
        internal static string XACT_E_NOASYNC {
            get {
                return ResourceManager.GetString("XACT_E_NOASYNC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to enlist in the transaction..
        /// </summary>
        internal static string XACT_E_NOENLIST {
            get {
                return ResourceManager.GetString("XACT_E_NOENLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An import object for the transaction could not be found..
        /// </summary>
        internal static string XACT_E_NOIMPORTOBJECT {
            get {
                return ResourceManager.GetString("XACT_E_NOIMPORTOBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested semantics of retention of isolation across retaining commit and abort boundaries cannot be supported by this transaction implementation, or isoFlags was not equal to zero..
        /// </summary>
        internal static string XACT_E_NOISORETAIN {
            get {
                return ResourceManager.GetString("XACT_E_NOISORETAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no resource presently associated with this enlistment.
        /// </summary>
        internal static string XACT_E_NORESOURCE {
            get {
                return ResourceManager.GetString("XACT_E_NORESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction failed to commit due to the failure of optimistic concurrency control in at least one of the resource managers..
        /// </summary>
        internal static string XACT_E_NOTCURRENT {
            get {
                return ResourceManager.GetString("XACT_E_NOTCURRENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A time-out was specified, but time-outs are not supported..
        /// </summary>
        internal static string XACT_E_NOTIMEOUT {
            get {
                return ResourceManager.GetString("XACT_E_NOTIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction has already been implicitly or explicitly committed or aborted.
        /// </summary>
        internal static string XACT_E_NOTRANSACTION {
            get {
                return ResourceManager.GetString("XACT_E_NOTRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The prepare request given was not eligible for single phase optimizations..
        /// </summary>
        internal static string XACT_E_NOTSINGLEPHASE {
            get {
                return ResourceManager.GetString("XACT_E_NOTSINGLEPHASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid combination of flags was specified.
        /// </summary>
        internal static string XACT_E_NOTSUPPORTED {
            get {
                return ResourceManager.GetString("XACT_E_NOTSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partner transaction manager has disabled its support for remote/network transactions..
        /// </summary>
        internal static string XACT_E_PARTNER_NETWORK_TX_DISABLED {
            get {
                return ResourceManager.GetString("XACT_E_PARTNER_NETWORK_TX_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface call made was incorrect for the current state of the protocol..
        /// </summary>
        internal static string XACT_E_PROTOCOL {
            get {
                return ResourceManager.GetString("XACT_E_PROTOCOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to xa_recover call failed for the XA resource..
        /// </summary>
        internal static string XACT_E_RECOVERY_FAILED {
            get {
                return ResourceManager.GetString("XACT_E_RECOVERY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RecoveryComplete has already been called for the given resource manager..
        /// </summary>
        internal static string XACT_E_RECOVERYALREADYDONE {
            get {
                return ResourceManager.GetString("XACT_E_RECOVERYALREADYDONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XACT_E_RECOVERYINPROGRESS.
        /// </summary>
        internal static string XACT_E_RECOVERYINPROGRESS {
            get {
                return ResourceManager.GetString("XACT_E_RECOVERYINPROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource manager reenlistment to determine transaction status timed out..
        /// </summary>
        internal static string XACT_E_REENLISTTIMEOUT {
            get {
                return ResourceManager.GetString("XACT_E_REENLISTTIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XACT_E_REPLAYREQUEST.
        /// </summary>
        internal static string XACT_E_REPLAYREQUEST {
            get {
                return ResourceManager.GetString("XACT_E_REPLAYREQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to xa_open call failed for the XA resource..
        /// </summary>
        internal static string XACT_E_RM_FAILURE {
            get {
                return ResourceManager.GetString("XACT_E_RM_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred with the XA resource..
        /// </summary>
        internal static string XACT_E_RM_UNAVAILABLE {
            get {
                return ResourceManager.GetString("XACT_E_RM_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transaction manager failed to establish a connection with another TIP transaction manager..
        /// </summary>
        internal static string XACT_E_TIP_CONNECT_FAILED {
            get {
                return ResourceManager.GetString("XACT_E_TIP_CONNECT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Transaction Manager has disabled its support for TIP..
        /// </summary>
        internal static string XACT_E_TIP_DISABLED {
            get {
                return ResourceManager.GetString("XACT_E_TIP_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transaction manager encountered a protocol error with another TIP transaction manager..
        /// </summary>
        internal static string XACT_E_TIP_PROTOCOL_ERROR {
            get {
                return ResourceManager.GetString("XACT_E_TIP_PROTOCOL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This transaction manager could not propagate a transaction from another TIP transaction manager..
        /// </summary>
        internal static string XACT_E_TIP_PULL_FAILED {
            get {
                return ResourceManager.GetString("XACT_E_TIP_PULL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Transaction Manager is not available..
        /// </summary>
        internal static string XACT_E_TMNOTAVAILABLE {
            get {
                return ResourceManager.GetString("XACT_E_TMNOTAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of enlistments for the specified transaction has been reached..
        /// </summary>
        internal static string XACT_E_TOOMANY_ENLISTMENTS {
            get {
                return ResourceManager.GetString("XACT_E_TOOMANY_ENLISTMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XACT_E_TRANSACTIONCLOSED.
        /// </summary>
        internal static string XACT_E_TRANSACTIONCLOSED {
            get {
                return ResourceManager.GetString("XACT_E_TRANSACTIONCLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSDTC was unable to load the dtc proxy dll..
        /// </summary>
        internal static string XACT_E_UNABLE_TO_LOAD_DTC_PROXY {
            get {
                return ResourceManager.GetString("XACT_E_UNABLE_TO_LOAD_DTC_PROXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSDTC was unable to read its configuration information..
        /// </summary>
        internal static string XACT_E_UNABLE_TO_READ_DTC_CONFIG {
            get {
                return ResourceManager.GetString("XACT_E_UNABLE_TO_READ_DTC_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource manager id is not associated with this transaction or the transaction manager..
        /// </summary>
        internal static string XACT_E_UNKNOWNRMGRID {
            get {
                return ResourceManager.GetString("XACT_E_UNKNOWNRMGRID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method was called in the wrong state.
        /// </summary>
        internal static string XACT_E_WRONGSTATE {
            get {
                return ResourceManager.GetString("XACT_E_WRONGSTATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The indicated unit of work does not match the unit of work expected by the resource manager..
        /// </summary>
        internal static string XACT_E_WRONGUOW {
            get {
                return ResourceManager.GetString("XACT_E_WRONGUOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction manager has disabled its support for XA transactions..
        /// </summary>
        internal static string XACT_E_XA_TX_DISABLED {
            get {
                return ResourceManager.GetString("XACT_E_XA_TX_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An enlistment in a transaction already exists..
        /// </summary>
        internal static string XACT_E_XTIONEXISTS {
            get {
                return ResourceManager.GetString("XACT_E_XTIONEXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An abort operation was already in progress..
        /// </summary>
        internal static string XACT_S_ABORTING {
            get {
                return ResourceManager.GetString("XACT_S_ABORTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction was successfully aborted. However, the abort was non-retaining..
        /// </summary>
        internal static string XACT_S_ALLNORETAIN {
            get {
                return ResourceManager.GetString("XACT_S_ALLNORETAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An asynchronous operation was specified. The operation has begun, but its outcome is not known yet..
        /// </summary>
        internal static string XACT_S_ASYNC {
            get {
                return ResourceManager.GetString("XACT_S_ASYNC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource manager has requested to be the coordinator (last resource manager) for the transaction..
        /// </summary>
        internal static string XACT_S_LASTRESOURCEMANAGER {
            get {
                return ResourceManager.GetString("XACT_S_LASTRESOURCEMANAGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local transaction has not aborted..
        /// </summary>
        internal static string XACT_S_LOCALLY_OK {
            get {
                return ResourceManager.GetString("XACT_S_LOCALLY_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sink is content and wishes the transaction to proceed. Changes were made to one or more resources during this call..
        /// </summary>
        internal static string XACT_S_MADECHANGESCONTENT {
            get {
                return ResourceManager.GetString("XACT_S_MADECHANGESCONTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sink is for the moment and wishes the transaction to proceed, but if other changes are made following this return by other event sinks then this sink wants another chance to look.
        /// </summary>
        internal static string XACT_S_MADECHANGESINFORM {
            get {
                return ResourceManager.GetString("XACT_S_MADECHANGESINFORM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No changes were made during this call, but the sink wants another chance to look if any other sinks make further changes..
        /// </summary>
        internal static string XACT_S_OKINFORM {
            get {
                return ResourceManager.GetString("XACT_S_OKINFORM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method call succeeded because the transaction was read-only..
        /// </summary>
        internal static string XACT_S_READONLY {
            get {
                return ResourceManager.GetString("XACT_S_READONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource manager has performed a single-phase commit of the transaction..
        /// </summary>
        internal static string XACT_S_SINGLEPHASE {
            get {
                return ResourceManager.GetString("XACT_S_SINGLEPHASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction was successfully aborted. However, this is a coordinated transaction, and some number of enlisted resources were aborted outright because they could not support abort-retaining semantics.
        /// </summary>
        internal static string XACT_S_SOMENORETAIN {
            get {
                return ResourceManager.GetString("XACT_S_SOMENORETAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot add the root CA certificate into your local store..
        /// </summary>
        internal static string XENROLL_E_CANNOT_ADD_ROOT_CERT {
            get {
                return ResourceManager.GetString("XENROLL_E_CANNOT_ADD_ROOT_CERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key is not exportable..
        /// </summary>
        internal static string XENROLL_E_KEY_NOT_EXPORTABLE {
            get {
                return ResourceManager.GetString("XENROLL_E_KEY_NOT_EXPORTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signing certificate cannot include SMIME extension..
        /// </summary>
        internal static string XENROLL_E_KEYSPEC_SMIME_MISMATCH {
            get {
                return ResourceManager.GetString("XENROLL_E_KEYSPEC_SMIME_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a key archival hash mismatch between the request and the response..
        /// </summary>
        internal static string XENROLL_E_RESPONSE_KA_HASH_MISMATCH {
            get {
                return ResourceManager.GetString("XENROLL_E_RESPONSE_KA_HASH_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key archival hash attribute was not found in the response..
        /// </summary>
        internal static string XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND {
            get {
                return ResourceManager.GetString("XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected key archival hash attribute was found in the response..
        /// </summary>
        internal static string XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH {
            get {
                return ResourceManager.GetString("XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH", resourceCulture);
            }
        }
    }
}
